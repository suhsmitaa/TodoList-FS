import { Connection } from "../Connection";
import { ConnectionOfNode } from "./ConnectionOfNode";
/**
 * This is a binary tree that is used to store the reference to the main connection of the concept.
 */
export declare class ConnectionOfTheTree {
    static node: ConnectionOfNode | null;
    static CreateCompositionKey(ofTheConceptId: number, typeId: number): number;
    static GetConnectionByOfTheConceptAndTypeId(ofTheConceptId: number, typeId: number): any;
    /**
     * This function lets you add a connection by composite key with of the concept id and type id.
     * This function checks if the connection already exists and then updates in the case that it does not
     * If the connection of the concept id and type id combination is encountered first time then a node is created.
     * @param connection connection that needs to be added.
     */
    static addConnection(connection: Connection): void;
    /**
     * This is a function to add the connectionNode to the existing tree
     * @param connectionOfNode This is the node that needs to be added to the tree.
     * @returns ConnectionOfNode
     */
    static addNodeToTree(connectionOfNode: ConnectionOfNode): Promise<ConnectionOfNode | null>;
    static removeNodeFromTree(id: number): Promise<void>;
}
