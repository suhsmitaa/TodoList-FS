import { Concept } from "../../DataStructures/Concept";
/**
 * This is the basic function of the concept connection system. This function let's you create a concept within the constraints of the
 * concept connection system. This function is the building block of the concept connection system.
 * This function automatically passes the concept to be synced to the background. Next time you sync the data this concept will also be created in the backend.
 * @param type this is the type of the concept. You can also think of this as the key of concept. first_name, last_name etc.
 * @param referent the actual value of the concept. The actual name of value of the concept.
 * @param composition this is a boolean that defines if the concept is a composition or not. If this is a composition then other things are also
 * connected internally with this concept. If composition is true then always a new concept is created otherwise it checks if the concept already exists
 * and creates only in the case that the concept does not already exists with its type and value as its unique identifier.
 * @param userId the userId of the creator.
 * @param accessId this is the accessId of the creator. By default should be 4.
 * @param sessionInformationId this is the session that is created by the system.
 * @param referentId In case we need this concept to refer to any other concept.
 * @returns a concept which is either newly created or an older concept that already exists.
 */
export declare function MakeTheInstanceConceptLocal(type: string, referent: string, composition: boolean | undefined, userId: number, accessId: number, sessionInformationId?: number, referentId?: number): Promise<Concept>;
