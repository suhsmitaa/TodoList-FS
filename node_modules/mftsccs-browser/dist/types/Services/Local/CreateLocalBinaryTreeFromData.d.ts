/**
 * This will create a binary tree of local concepts that is saved from the indexdb.
 */
export default function CreateLocalBinaryTreeFromIndexDb(): Promise<void>;
/**
 * We have designed our system to use local concepts and connections with its own local ids(negative ids) that
 * is only valid for the browser that creates this. We have a translator in our node server.
 * We cannot keep on using the indexdb to get the new data so we populate the data from indexdb to our memory
 * then we use these ids from memory and update the indexdb with the latest id frequently.
 * This function does this process in initlization from indexdb to memory.
 *
 * Here we have locked this function so that other processes cannot access this process in the case that this process is ongoing
 *
 *
 */
export declare function PopulateTheLocalConceptsToMemory(): Promise<void>;
/**
* We have designed our system to use local concepts and connections with its own local ids(negative ids) that
* is only valid for the browser that creates this. We have a translator in our node server.
* We cannot keep on using the indexdb to get the new data so we populate the data from indexdb to our memory
* then we use these ids from memory and update the indexdb with the latest id frequently.
* This function does this process in initlization from indexdb to memory.
*
* This function locked so that no two parallel process can access this functionality at the same time.
* That might cause some ids to be repeated.
*
*
*/
export declare function PopulateTheLocalConnectionToMemory(): Promise<void>;
