{
  "version": 3,
  "sources": ["../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Create/CreateTheCharacter.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Create/CreateTheConceptApi.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Create/CreateTheConnectionApi.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Create/CreateTheGhostConceptApi.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Create/CreateTheTextData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/DeleteTheConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/DeleteTheConnection.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Delete/DeleteConceptInBackend.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetAiData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetAllConceptsByType.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetAllConnectionsOfComposition.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetAllConnectionsOfCompositionBulk.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetAllLinkerConnectionsFromTheConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetAllLinkerConnectionsToTheConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetCompositionConnectionsBetweenTwoConcepts.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetConceptBulk.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetConceptByCharacterAndType.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetConceptByCharacterValue.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetConnection.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetConnectionBulk.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetConnectionOfTheConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetReservedConnectionIds.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/GetReservedIds.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Local/GetLocalConceptByCharacterValue.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Login.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/MakeTheNameInBackend.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/MakeTheTypeConceptApi.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/RecursiveSearch.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/SearchConcept/GetConceptByCharacterAndCategoryDirect.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Search/Search.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Search/SearchInternalApi.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Search/SearchLinkMultipleApi.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Search/SearchWithLinker.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Search/SearchWithTypeAndLinker.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Session/CreateSession.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Session/CreateSessionVisit.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Signin.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Signup.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/Translate/TranslateLocalToReal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Api/View/ViewInternalDataApi.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Constants/AccessConstants.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Constants/FormatConstants.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/BaseUrl.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/BinaryCharacterTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/BinaryTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/BinaryTypeTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/CharacterRepository.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Composition/Composition.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Composition/CompositionBinaryTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Composition/CompositionNode.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Concept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/ConceptData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Connection.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/ConnectionBinaryTree/ConnectionBinaryTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/ConnectionBinaryTree/ConnectionNode.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/ConnectionBinaryTree/ConnectionOfNode.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/ConnectionBinaryTree/ConnectionOfTheTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/ConnectionBinaryTree/ConnectionTypeTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/ConnectionBinaryTree/NodePrimitive.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/ConnectionData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/FilterSearch.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/IdentifierFlags.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Local/LConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Local/LConnection.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Local/LNode.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Local/LocalBinaryCharacterTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Local/LocalBinaryTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Local/LocalBinaryTypeTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Local/LocalConceptData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Local/LocalConnectionData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Local/LocalGhostIdTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Local/LocalId.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Local/LocalSyncData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Node.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/PatcherStructure.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/ReservedIds.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Responses/ErrorResponse.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Returner.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/SearchQuery.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Search/SearchStructure.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Security/TokenStorage.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Session/SessionData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/SettingData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/Settings.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/SyncData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/TheCharacter.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/TheTexts.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/TypeNode.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/User/UserBinaryTree.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/DataStructures/User/UserNode.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Database/NoIndexDb.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Database/indexdblocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Database/indexeddb.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Helpers/CheckIfExists.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Helpers/RemoveFromArray.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Helpers/UniqueInsert.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/CheckForConnectionDeletion.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Common/DelayFunction.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Common/ErrorPosting.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Composition/BuildComposition.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Composition/CompositionCache.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Composition/CreateCompositionCache.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/ConceptFinding/GetConceptByCharacterAndCategory.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Conversion/ConvertConcepts.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/CreateBinaryTreeFromData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/CreateConnectionBetweenTwoConcepts.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/CreateDefaultConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/CreateTheComposition.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/CreateTheConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/CreateTheConnection.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/CreateTheConnectionGeneral.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/DeleteConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/DeleteConnection.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/FindConeceptsFromConnection.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/FindConnectionsOfCompositionBulkInMemory.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/GetComposition.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/GetCompositionBulk.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/GetCompositionList.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/GetConceptByCharacter.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/GetConnectionBetweenTwoConceptsLinker.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/GetConnections.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/GetDataFromIndexDb.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/GetLink.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/GetLinkerConnectionFromConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/GetRelation.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/GetTheConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/InitializeSystem.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/ConvertFromLConnectionToConnection.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/CreateConnectionBetweenTwoConceptsLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/CreateDefaultLConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/CreateLocalBinaryTreeFromData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/CreateTheCompositionLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/CreateTheConceptLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/CreateTheConnectionLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/DeleteConceptLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/GetCompositionListLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/GetCompositionLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/GetConceptByCharacterLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/GetConnectionOfTheConceptLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/GetRelationLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/GetTheConceptLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/MakeTheConceptLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/MakeTheInstanceConceptLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/MakeTheTypeLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Local/UpdateCompositionLocal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/MakeTheCharacter.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/MakeTheCharacterData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/MakeTheConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/MakeTheInstanceConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/MakeTheTimestamp.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/MakeTheTypeConcept.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Mqtt/publishMessage.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Search/SearchLinkInternal.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Search/SearchLinkMultiple.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Search/SearchWithTypeAndLinker.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/Security/GetRequestHeader.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/SplitStrings.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/UpdateComposition.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/User/UserTranslation.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/Services/View/ViewInternalData.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/WrapperFunctions/DepenedencyObserver.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/WrapperFunctions/GetCompositionListObservable.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/WrapperFunctions/GetCompositionObservable.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/WrapperFunctions/GetLinkObservable.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/WrapperFunctions/RecursiveSearchObservable.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/WrapperFunctions/SearchLinkMultipleAllObservable.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/src/app.ts", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/webpack/bootstrap", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/webpack/runtime/define property getters", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/webpack/runtime/hasOwnProperty shorthand", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/webpack/runtime/make namespace object", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/webpack/before-startup", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/webpack/startup", "../../mftsccs-browser/dist/webpack:/mftsccs-browser/webpack/after-startup"],
  "sourcesContent": ["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CharacterRepository } from \"../../DataStructures/CharacterRepository\";\nimport { Returner } from \"../../DataStructures/Returner\";\nimport { TheCharacter } from \"../../DataStructures/TheCharacter\";\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { HandleHttpError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateTheCharacter(characterData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var characterData;\n        try {\n            characterData = CharacterRepository.GetCharacter(characterData.data);\n            if (characterData.id == 0) {\n                var header = GetRequestHeader();\n                const response = yield fetch(BaseUrl.CreateTheCharacterDataUrl(), {\n                    method: 'POST',\n                    headers: header,\n                    body: JSON.stringify(characterData),\n                });\n                if (!response.ok) {\n                    HandleHttpError(response);\n                    throw new Error(`Error! status: ${response.status}`);\n                }\n                const resultString = yield response.json();\n                const result = resultString;\n                var savingCharacter = new TheCharacter(result.userId, characterData.data, 0, 0, 4, 4, 999, 999, \"\", false);\n                savingCharacter.id = result.id;\n                CharacterRepository.AddCharacter(savingCharacter);\n                return result;\n            }\n            else {\n                var returningData = new Returner(characterData.id, characterData.userId, 0, false);\n                return returningData;\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('create the character error message: ', error.message);\n            }\n            else {\n                console.log('create the character unexpected error: ', error);\n            }\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { CreateDefaultConcept } from \"../../app\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateTheConceptApi(conceptData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = CreateDefaultConcept();\n        try {\n            var header = GetRequestHeader();\n            const response = yield fetch(BaseUrl.CreateTheConceptUrl(), {\n                method: 'POST',\n                headers: header,\n                body: JSON.stringify(conceptData),\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const resultString = yield response.json();\n            result = resultString;\n            return result;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Create the concept api error message: ', error.message);\n            }\n            else {\n                console.log('Create the concept api unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.CreateTheConceptUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Connection } from \"../../DataStructures/Connection\";\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { HandleHttpError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateTheConnectionApi(connectionData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = new Connection(0, 0, 0, 0, 0, 0, 0);\n        try {\n            var header = GetRequestHeader();\n            var jsonData = JSON.stringify(connectionData);\n            const response = yield fetch(BaseUrl.CreateTheConnectionUrl(), {\n                method: 'POST',\n                headers: header,\n                body: jsonData\n            });\n            if (response.ok) {\n                const result = yield response.json();\n            }\n            else {\n                console.log('Create the connection error message: ', response.status);\n                HandleHttpError(response);\n            }\n            return result;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Create the connection error message: ', error.message);\n            }\n            else {\n                console.log(' Create the connection unexpected error: ', error);\n            }\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { TokenStorage } from \"../../DataStructures/Security/TokenStorage\";\nimport { HandleHttpError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateTheGhostConceptApi(conceptData, connectionData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = {\n            \"concepts\": [],\n            \"connections\": []\n        };\n        try {\n            const myHeaders = new Headers();\n            let myBody = {\n                \"concepts\": conceptData,\n                \"connections\": connectionData\n            };\n            myHeaders.set(\"Content-Type\", \"application/json\");\n            myHeaders.set('Authorization', \"Bearer \" + TokenStorage.BearerAccessToken);\n            myHeaders.set('Accept', 'application/json');\n            myHeaders.set('Randomizer', BaseUrl.BASE_RANDOMIZER.toString());\n            const response = yield fetch(BaseUrl.CreateGhostConceptApiUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: JSON.stringify(myBody),\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const resultString = yield response.json();\n            result.concepts = resultString.concepts;\n            result.connections = resultString.connections;\n            return result;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Create the concept api error message: ', error.message);\n            }\n            else {\n                console.log('Create the concept api unexpected error: ', error);\n            }\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { HandleHttpError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateTextData(textData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            var header = GetRequestHeader();\n            const response = yield fetch(BaseUrl.CreateTheTextDataUrl(), {\n                method: 'POST',\n                headers: header,\n                body: JSON.stringify(textData),\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const resultString = yield response.json();\n            const result = resultString;\n            return result;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Create the text error message: ', error.message);\n            }\n            else {\n                console.log('Create the text unexpected error: ', error);\n            }\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { GetOnlyTokenHeader } from \"../Services/Security/GetRequestHeader\";\nexport default function DeleteTheConcept(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const formdata = new FormData();\n            formdata.append(\"id\", id.toString());\n            let header = GetOnlyTokenHeader();\n            const response = yield fetch(BaseUrl.DeleteConceptUrl(), {\n                method: 'POST',\n                headers: header,\n                body: formdata\n            });\n            if (!response.ok) {\n                // throw new Error(`Error! status: ${response.status}`);\n                console.log(\"Delete concept error\", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Delete concept error message: ', error.message);\n            }\n            else {\n                console.log('Delete concept unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.DeleteConceptUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { GetOnlyTokenHeader } from \"../Services/Security/GetRequestHeader\";\nexport default function DeleteTheConnection(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const formdata = new FormData();\n            formdata.append(\"id\", id.toString());\n            let header = GetOnlyTokenHeader();\n            const response = yield fetch(BaseUrl.DeleteTheConnectionUrl(), {\n                method: 'POST',\n                headers: header,\n                body: formdata,\n                redirect: \"follow\"\n            });\n            if (!response.ok) {\n                console.log('Delete connection error status: ', response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Delete connection error message: ', error.message);\n            }\n            else {\n                console.log('Delete connection unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.DeleteTheConnectionUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nexport function TrashTheConcept(id, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const myHeaders = new Headers();\n            myHeaders.append('Authorization', 'Bearer ' + token);\n            const formdata = new FormData();\n            formdata.append('id', id.toString());\n            const response = yield fetch(BaseUrl.DeleteConceptUrl(), {\n                method: 'POST',\n                body: formdata,\n                headers: myHeaders,\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Delete composition Error! status: ${response.status}`);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Delete composition error message: ', error.message);\n            }\n            else {\n                console.log('Delete composition unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.DeleteConceptUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from '../DataStructures/BaseUrl';\nimport { ConceptsData } from '../DataStructures/ConceptData';\nimport { HandleHttpError, HandleInternalError } from '../Services/Common/ErrorPosting';\nimport { PurgatoryDatabaseUpdated } from '../Services/InitializeSystem';\nimport { GetRequestHeaderWithAuthorization } from '../Services/Security/GetRequestHeader';\nexport function GetAiData() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const start = new Date().getTime();\n            var header = GetRequestHeaderWithAuthorization('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetAllAiData(), {\n                method: 'GET',\n                headers: header,\n            });\n            if (!response.ok) {\n                console.log('Ai Error Message: ', \"Cannot get response\");\n                HandleHttpError(response);\n            }\n            const result = yield response.json();\n            for (var i = 0; i < result.length; i++) {\n                ConceptsData.AddConcept(result[i]);\n            }\n            PurgatoryDatabaseUpdated();\n            let elapsed = new Date().getTime() - start;\n            console.log(\"The time taken is \", elapsed);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Ai Error Message: ', error.message);\n            }\n            else {\n                console.log('Ai Error Message: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllAiData());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetAllConceptsByType(type, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            var urlencoded = new URLSearchParams();\n            urlencoded.append(\"type\", type);\n            urlencoded.append(\"user_id\", userId.toString());\n            var header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetAllConceptsByTypeUrl(), {\n                method: 'POST',\n                headers: header,\n                body: urlencoded\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                for (var i = 0; i < result.length; i++) {\n                    ConceptsData.AddConcept(result[i]);\n                }\n            }\n            else {\n                console.log(\"GetAllConceptsByType error\", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('GetAllConceptsByType error message: ', error.message);\n            }\n            else {\n                console.log('GetAllConceptsByType unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllConceptsByTypeUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from '../DataStructures/ConnectionData';\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { CheckForConnectionDeletion } from '../Services/CheckForConnectionDeletion';\nimport { GetRequestHeader } from '../Services/Security/GetRequestHeader';\nimport { HandleHttpError, HandleInternalError } from '../Services/Common/ErrorPosting';\nexport function GetAllConnectionsOfComposition(composition_id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var connectionList = [];\n        //connectionList = await ConnectionData.GetConnectionsOfCompositionLocal(composition_id);\n        connectionList = yield ConnectionData.GetConnectionsOfConcept(composition_id);\n        if (connectionList.length == 0) {\n            var connectionListString = yield GetAllConnectionsOfCompositionOnline(composition_id);\n            connectionList = connectionListString;\n        }\n        else {\n            var newConnectionsString = yield GetAllConnectionsOfCompositionOnline(composition_id);\n            var newConnections = newConnectionsString;\n            CheckForConnectionDeletion(newConnections, connectionList);\n            connectionList = newConnections;\n        }\n        return connectionList;\n    });\n}\nexport function GetAllConnectionsOfCompositionOnline(composition_id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var connectionList = [];\n        try {\n            var header = GetRequestHeader('application/json');\n            const myHeaders = new Headers();\n            const formdata = new FormData();\n            formdata.append(\"composition_id\", composition_id.toString());\n            const response = yield fetch(BaseUrl.GetAllConnectionsOfCompositionUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: formdata\n            });\n            console.log(\"this is getting connection from online\", BaseUrl.GetAllConnectionsOfCompositionUrl(), composition_id);\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const result = yield response.json();\n            for (var i = 0; i < result.length; i++) {\n                ConnectionData.AddConnection(result[i]);\n                connectionList.push(result[i]);\n            }\n            return connectionList;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get all connection of composition error : ', error.message);\n            }\n            else {\n                console.log('Get all connection of composition error : ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllConnectionsOfCompositionUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from '../DataStructures/ConnectionData';\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { FindConceptsFromConnections } from '../Services/FindConeceptsFromConnection';\nimport { FindConnectionsOfCompositionsBulkInMemory } from '../Services/FindConnectionsOfCompositionBulkInMemory';\nimport { CheckForConnectionDeletion } from '../Services/CheckForConnectionDeletion';\nimport { GetRequestHeader } from '../Services/Security/GetRequestHeader';\nimport { HandleHttpError, HandleInternalError } from '../Services/Common/ErrorPosting';\nexport function GetAllConnectionsOfCompositionBulk() {\n    return __awaiter(this, arguments, void 0, function* (composition_ids = []) {\n        var connectionList = [];\n        var conceptList = [];\n        if (composition_ids.length <= 0) {\n            return connectionList;\n        }\n        var oldConnectionList = yield FindConnectionsOfCompositionsBulkInMemory(composition_ids);\n        var connectionListString = yield GetAllConnectionsOfCompositionOnline(composition_ids);\n        connectionList = connectionListString;\n        CheckForConnectionDeletion(connectionList, oldConnectionList);\n        yield FindConceptsFromConnections(connectionList);\n        return connectionList;\n    });\n}\nexport function GetAllConnectionsOfCompositionOnline() {\n    return __awaiter(this, arguments, void 0, function* (composition_ids = []) {\n        var connectionList = [];\n        try {\n            var header = GetRequestHeader();\n            const response = yield fetch(BaseUrl.GetAllConnectionsOfCompositionBulkUrl(), {\n                method: 'POST',\n                headers: header,\n                body: JSON.stringify(composition_ids)\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                for (var i = 0; i < result.length; i++) {\n                    ConnectionData.AddConnection(result[i]);\n                    connectionList.push(result[i]);\n                }\n            }\n            else {\n                console.log('Get all connections of composition bulk error message: ', \"Cannot get response\");\n                HandleHttpError(response);\n            }\n            return connectionList;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get all connections of composition bulk error message: ', error.message);\n            }\n            else {\n                console.log('Get all connections of composition bulk unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllConnectionsOfCompositionBulkUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { BaseUrl } from \"../app\";\nexport function GetAllLinkerConnectionsFromTheConcept(conceptId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var connections = [];\n        try {\n            const start = new Date().getTime();\n            var header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetAllLinkerConnectionOfConceptUrl() + `?conceptId=${conceptId}`, {\n                method: 'GET',\n                headers: header,\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                for (var i = 0; i < result.length; i++) {\n                    var connection = result[i];\n                    connections.push(connection);\n                }\n            }\n            else {\n                console.log(\"Get all linker connection from the concepts error\", \"cannot get respone\");\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get all linker connection from the concepts error: ', error.message);\n            }\n            else {\n                console.log('Get all linker connection from the concepts error(Unexpected): ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllLinkerConnectionOfConceptUrl());\n        }\n        return connections;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { BaseUrl } from \"../app\";\nexport function GetAllLinkerConnectionsToTheConcept(conceptId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var connections = [];\n        try {\n            const start = new Date().getTime();\n            var header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetAllLinkerConnectionToConceptUrl() + `?conceptId=${conceptId}`, {\n                method: 'GET',\n                headers: header,\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                for (var i = 0; i < result.length; i++) {\n                    var connection = result[i];\n                    connections.push(connection);\n                }\n            }\n            else {\n                console.log(\"Get all linker connection To the concepts error\", \"cannot get respone\");\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get all linker connection To the concepts error: ', error.message);\n            }\n            else {\n                console.log('Get all linker connection To the concepts error(Unexpected): ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllLinkerConnectionToConceptUrl());\n        }\n        return connections;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetCompositionConnectionsBetweenTwoConcepts(ofConceptId, toConcept, mainKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var connectionList = [];\n        try {\n            var formdata = new FormData();\n            formdata.append(\"ofConceptId\", ofConceptId.toString());\n            formdata.append(\"mainKey\", mainKey.toString());\n            formdata.append(\"toConceptId\", toConcept.toString());\n            const response = yield fetch(BaseUrl.GetCompositionConnectionBetweenTwoConceptsUrl(), {\n                method: 'POST',\n                body: formdata,\n                redirect: \"follow\"\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                for (var i = 0; i < result.length; i++) {\n                    ConnectionData.AddConnection(result[i]);\n                    connectionList.push(result[i]);\n                }\n            }\n            else {\n                console.log(\"Get composition connection between two concepts\", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get composition connection between two concepts error message: ', error.message);\n            }\n            else {\n                console.log('Get composition connection between two concepts unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetCompositionConnectionBetweenTwoConceptsUrl());\n        }\n        return connectionList;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { CreateDefaultConcept } from \"../app\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\n/**\n * This function helps you get concept from the id. This can only be positive.\n * @param id The id that you want to get the concept of\n * @returns\n */\nexport function GetConcept(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let result = CreateDefaultConcept();\n            var conceptUse = yield ConceptsData.GetConcept(id);\n            let isNpc = ConceptsData.GetNpc(id);\n            if (conceptUse.id != 0 || isNpc) {\n                return conceptUse;\n            }\n            else {\n                var header = GetRequestHeader();\n                console.log(\"this is the url\", BaseUrl.GetConceptUrl());\n                const formdata = new FormData();\n                formdata.append(\"id\", id.toString());\n                const response = yield fetch(BaseUrl.GetConceptUrl(), {\n                    method: 'POST',\n                    body: formdata\n                });\n                if (response.ok) {\n                    result = (yield response.json());\n                    if (result.id > 0) {\n                        ConceptsData.AddConcept(result);\n                    }\n                    else {\n                        ConceptsData.AddNpc(id);\n                    }\n                }\n                else {\n                    console.log(\"Get the concept error\", response.status);\n                    HandleHttpError(response);\n                }\n                return result;\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get the concept error message: ', error.message);\n            }\n            else {\n                console.log('Get the concept unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConceptUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\n/**\n * This function takes in a list of ids and returns a list of concepts . This uses local memory to find concepts\n * namely in the concept binary tree. If it could not find the concepts in local memory then it fetches those from\n * the api. The fetched concepts from api are then stored in the memory for further use in future.\n * @param conceptIds list of concept ids that need to be fetched\n * @returns list of concepts\n */\nexport function GetConceptBulk(passedConcepts) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = [];\n        let setTime = new Date().getTime();\n        // let conceptIds = passedConcepts.filter((value, index, self) => {\n        //   return self.indexOf(value) === index;\n        // });\n        let conceptIds = Array.from(new Set(passedConcepts));\n        try {\n            if (conceptIds.length > 0) {\n                let bulkConceptFetch = [];\n                for (let i = 0; i < conceptIds.length; i++) {\n                    let conceptUse = yield ConceptsData.GetConcept(conceptIds[i]);\n                    if (conceptUse.id == 0) {\n                        bulkConceptFetch.push(conceptIds[i]);\n                    }\n                }\n                // let newAlgoTime = new Date().getTime();\n                //let remainingIds:any = {};\n                // for(let i=0; i< conceptIds.length; i++){\n                //     remainingIds[conceptIds[i]] = false;\n                // }\n                //await ConceptsData.GetConceptBulkData(conceptIds, result, remainingIds );\n                // for(let key in remainingIds){\n                //     if(remainingIds[key] == false){\n                //       bulkConceptFetch.push(Number(key));\n                //     }\n                // }\n                //bulkConceptFetch = conceptIds;\n                if (bulkConceptFetch.length == 0) {\n                    return result;\n                }\n                else {\n                    let header = GetRequestHeader();\n                    const response = yield fetch(BaseUrl.GetConceptBulkUrl(), {\n                        method: 'POST',\n                        headers: header,\n                        body: JSON.stringify(bulkConceptFetch)\n                    });\n                    if (response.ok) {\n                        result = yield response.json();\n                        console.log(\"got all the concepts\", result);\n                        if (result.length > 0) {\n                            for (let i = 0; i < result.length; i++) {\n                                let concept = result[i];\n                                ConceptsData.AddConcept(concept);\n                            }\n                        }\n                        console.log(\"added the concepts\");\n                    }\n                    else {\n                        console.log(\"Get Concept Bulk error\", response.status);\n                        HandleHttpError(response);\n                    }\n                }\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get Concept Bulk  error message: ', error.message);\n            }\n            else {\n                console.log('Get Concept Bulk  unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConceptBulkUrl());\n        }\n        return result;\n    });\n}\nexport function BulkConceptGetterApi(bulkConceptFetch) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const conceptList = [];\n        if (bulkConceptFetch.length > 0) {\n            const myHeaders = {\n                'Content-Type': 'application/json',\n            };\n            try {\n                const response = yield fetch(BaseUrl.GetConceptBulkUrl(), {\n                    method: 'POST',\n                    headers: myHeaders,\n                    body: JSON.stringify(bulkConceptFetch),\n                });\n                if (response.ok) {\n                    const result = yield response.json();\n                    if (result.length > 0) {\n                        for (let i = 0; i < result.length; i++) {\n                            const concept = result[i];\n                            conceptList.push(concept);\n                            ConceptsData.AddConcept(concept);\n                        }\n                    }\n                }\n                else {\n                    console.log('bulk concept getter api error: ', response.status);\n                    HandleHttpError(response);\n                }\n            }\n            catch (error) {\n                if (error instanceof Error) {\n                    console.log('bulk concept getter api error: ', error.message);\n                }\n                else {\n                    console.log('bulk concept getter api error: ', error);\n                }\n                HandleInternalError(error, BaseUrl.GetConceptBulkUrl());\n            }\n        }\n        return conceptList;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetConceptByCharacterAndType(characterValue, typeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield ConceptsData.GetConceptByCharacterAndTypeLocal(characterValue, typeId);\n        try {\n            if (concept == null || concept.id == 0) {\n                var json = {\n                    'character_value': `${characterValue}`,\n                    'type_id': typeId\n                };\n                var toSendJson = JSON.stringify(json);\n                var header = GetRequestHeader();\n                const response = yield fetch(BaseUrl.GetConceptByCharacterAndTypeUrl(), {\n                    method: 'POST',\n                    headers: header,\n                    body: toSendJson,\n                });\n                if (response.ok) {\n                    let conceptString = yield response.json();\n                    concept = conceptString;\n                    ConceptsData.AddConcept(concept);\n                }\n                else {\n                    //  throw new Error(`Error! status: ${response.status}`);\n                    HandleHttpError(response);\n                    console.log(\"This is the concept by type and character error\", response.status);\n                }\n            }\n            return concept;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log(' This is the concept by type and character error message: ', error.message);\n            }\n            else {\n                console.log(' This is the concept by type and character unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConceptByCharacterAndTypeUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { CreateDefaultConcept } from \"../app\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetConceptByCharacterValue(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = CreateDefaultConcept();\n        try {\n            const formdata = new FormData();\n            formdata.append(\"character_value\", characterValue);\n            const response = yield fetch(BaseUrl.GetConceptByCharacterValueUrl(), {\n                method: 'POST',\n                body: formdata\n            });\n            if (response.ok) {\n                result = (yield response.json());\n                if (result.id > 0) {\n                    ConceptsData.AddConcept(result);\n                }\n            }\n            else {\n                HandleHttpError(response);\n                console.log(\"Error in Getting concept by character value Error\", response.status);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Error in Getting concept by character value error message: ', error);\n            }\n            else {\n                console.log('Error in Getting concept by character value unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConceptByCharacterValueUrl());\n        }\n        return result;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetConnection(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = yield ConnectionData.GetConnection(id);\n        try {\n            if (result.id != 0) {\n                return result;\n            }\n            else {\n                let header = GetRequestHeader('application/x-www-form-urlencoded');\n                const formdata = new FormData();\n                formdata.append(\"id\", id.toString());\n                const response = yield fetch(BaseUrl.GetConnectionUrl(), {\n                    method: 'POST',\n                    headers: header,\n                    body: formdata\n                });\n                if (response.ok) {\n                    result = (yield response.json());\n                    ConnectionData.AddConnection(result);\n                }\n                else {\n                    HandleHttpError(response);\n                    console.log(\"Get Connection Error\", response.status);\n                }\n                return result;\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get Connection error message: ', error.message);\n            }\n            else {\n                console.log('Get Connection unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConnectionUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from \"./../DataStructures/ConnectionData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { FindConceptsFromConnections } from \"../Services/FindConeceptsFromConnection\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\n/**\n * After fetching these connections it is saved in the local static ConnectionBinaryTree so it can be reused without being fetched\n * @param connectionIds array of connection ids that need to fetched by the local system\n * @returns the list of  connections that have been fetched\n */\nexport function GetConnectionBulk() {\n    return __awaiter(this, arguments, void 0, function* (connectionIds = []) {\n        let connectionList = [];\n        try {\n            if (connectionIds.length > 0) {\n                let bulkConnectionFetch = [];\n                // if the connections are already present in the local memory then take it from there \n                //else put it in a list called bulkConnectionFetch which will be used to call and api.\n                for (let i = 0; i < connectionIds.length; i++) {\n                    let conceptUse = yield ConnectionData.GetConnection(connectionIds[i]);\n                    if (conceptUse.id == 0) {\n                        bulkConnectionFetch.push(connectionIds[i]);\n                    }\n                    else {\n                        connectionList.push(conceptUse);\n                    }\n                }\n                // let remainingIds:any = {};\n                // await ConnectionData.GetConnectionBulkData(connectionIds, connectionList, remainingIds );\n                //bulkConnectionFetch = connectionIds;\n                // if the case that bulkConnectionFetch does not have any elements then we just return everything we have\n                if (bulkConnectionFetch.length == 0) {\n                    return connectionList;\n                }\n                else {\n                    // if the connection could not be found in the local memory then fetch from the api.\n                    let header = GetRequestHeader();\n                    const response = yield fetch(BaseUrl.GetConnectionBulkUrl(), {\n                        method: 'POST',\n                        headers: header,\n                        body: JSON.stringify(bulkConnectionFetch)\n                    });\n                    if (response.ok) {\n                        const result = yield response.json();\n                        if (result.length > 0) {\n                            for (let i = 0; i < result.length; i++) {\n                                let connection = result[i];\n                                connectionList.push(connection);\n                                ConnectionData.AddConnection(connection);\n                            }\n                        }\n                    }\n                    else {\n                        HandleHttpError(response);\n                        console.log(\"Get Connection Bulk error\", response.status);\n                    }\n                }\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get Connection Bulk error message: ', error);\n            }\n            else {\n                console.log('Get Connection Bulk unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConnectionBulkUrl());\n        }\n        yield FindConceptsFromConnections(connectionList);\n        return connectionList;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetConnectionOfTheConcept(typeId_1, ofTheConceptId_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (typeId, ofTheConceptId, userId, inpage = 10, page = 1) {\n        let connectionList = [];\n        try {\n            let urlencoded = new URLSearchParams();\n            urlencoded.append(\"typeId\", `${typeId}`);\n            urlencoded.append(\"ofTheConceptId\", `${ofTheConceptId}`);\n            urlencoded.append(\"userId\", `${userId}`);\n            urlencoded.append(\"inpage\", `${inpage}`);\n            urlencoded.append(\"page\", `${page}`);\n            let header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetAllConnectionsOfConceptUrl(), {\n                method: 'POST',\n                headers: header,\n                body: urlencoded\n            });\n            if (response.ok) {\n                connectionList = (yield response.json());\n            }\n            else {\n                HandleHttpError(response);\n                console.log(\"Get connection of concept error\", response.status);\n            }\n            return connectionList;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Get connection of concept  error message: ', error.message);\n            }\n            else {\n                console.log('Get connection of concept unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetAllConnectionsOfConceptUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ReservedConnectionIds } from \"../DataStructures/ReservedIds\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetReservedConnectionIds() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetReservedConnectionIdUrl(), {\n                method: 'GET',\n                headers: header,\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const result = yield response.json();\n            for (let i = 0; i < result.length; i++) {\n                ReservedConnectionIds.AddId(result[i]);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('get reserved connection ids error message: ', error.message);\n            }\n            else {\n                console.log('get reserved connection ids  unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetReservedConnectionIdUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ReservedIds } from \"../DataStructures/ReservedIds\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function GetReservedIds() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetReservedIdUrl(), {\n                method: 'GET',\n                headers: header,\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n                throw new Error(`Error! status: ${response.status}`);\n            }\n            const result = yield response.json();\n            for (let i = 0; i < result.length; i++) {\n                ReservedIds.AddId(result[i]);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('get reserved ids error message: ', error.message);\n            }\n            else {\n                console.log('get reserved ids  unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetReservedIdUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConceptsData } from \"./../../DataStructures/Local/LocalConceptData\";\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { CreateDefaultLConcept } from \"../../app\";\nimport { HandleHttpError } from \"../../Services/Common/ErrorPosting\";\nexport function GetLocalConceptByCharacterValue(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = CreateDefaultLConcept();\n        try {\n            var header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetConceptByCharacterValueUrl(), {\n                method: 'POST',\n                headers: header,\n                body: `character_value=${characterValue}`\n            });\n            if (response.ok) {\n                result = (yield response.json());\n                if (result.id > 0) {\n                    LocalConceptsData.AddConcept(result);\n                }\n            }\n            else {\n                console.log(\"Error in Getting Local concept by character value Error\", response.status);\n                HandleHttpError(response);\n            }\n            return result;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Error in Getting Local concept by character value error message: ', error);\n            }\n            else {\n                console.log('Error in Getting Local concept by character value unexpected error: ', error);\n            }\n            throw result;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { TokenStorage } from '../DataStructures/Security/TokenStorage';\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function LoginToBackend(email, password) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let object = {\n                'email': email,\n                'password': password\n            };\n            let myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n            let requestObject = JSON.stringify(object);\n            const response = yield fetch(BaseUrl.LoginUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: requestObject\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                console.log(result.data);\n                TokenStorage.BearerAccessToken = result.data.token;\n                console.log(\"this is the token\", TokenStorage.BearerAccessToken);\n                return result;\n            }\n            else {\n                console.log('Login tsccs error message: ', response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Login tsccs error message: ', error.message);\n            }\n            else {\n                console.log(' Login tsccs  unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.LoginUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nexport function MakeTheNameInBackend(newConceptId, referent, typeId, typeUserId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let object = {\n                'newConceptId': newConceptId,\n                'referent': referent,\n                'typeId': typeId,\n                'typeUserId': typeUserId\n            };\n            let myHeaders = GetRequestHeader();\n            let requestObject = JSON.stringify(object);\n            const response = yield fetch(BaseUrl.MakeTheNameInBackendUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: requestObject\n            });\n            if (!response.ok) {\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('make the name in backend error message: ', error.message);\n            }\n            else {\n                console.log('make the name in backend unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.MakeTheNameInBackendUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { CreateDefaultConcept } from \"../Services/CreateDefaultConcept\";\nimport { GetConceptByCharacterAndCategory } from \"../Services/ConceptFinding/GetConceptByCharacterAndCategory\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\n/**\n *  This function is used to check the type concpet of a passed string\n *  if the text is \"the_person\" then the function finds the related concept\n * @param type This is the type of the concept that needs to be created.\n * @param userId This is the userId of the creator.\n * @returns the concept created.\n */\nexport function MakeTheTypeConceptApi(type, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // create  a default concept with all defaulting to zero\n        let concept = CreateDefaultConcept();\n        try {\n            // get the concept by character and category from the api\n            concept = yield GetConceptByCharacterAndCategory(type);\n            if (concept.id == 0 || concept.typeId == 4) {\n                let header = GetRequestHeader('application/x-www-form-urlencoded');\n                const response = yield fetch(BaseUrl.MakeTheTypeConceptUrl(), {\n                    method: 'POST',\n                    headers: header,\n                    body: `type=${type}`\n                });\n                if (!response.ok) {\n                    HandleHttpError(response);\n                    throw new Error(`Error! status: ${response.status}`);\n                }\n                let result = yield response.json();\n                concept = result;\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Make The Type Concept Api error : ', error.message);\n            }\n            else {\n                console.log('Make The Type Concept Api error : ', error);\n            }\n            HandleInternalError(error, BaseUrl.MakeTheTypeConceptUrl());\n        }\n        return concept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\nimport { SearchQuery } from \"../DataStructures/SearchQuery\";\nimport { GetCompositionFromConnectionsWithDataId } from \"../Services/GetCompositionBulk\";\nimport { GetRequestHeader } from \"../Services/Security/GetRequestHeader\";\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nexport function RecursiveSearchApi() {\n    return __awaiter(this, arguments, void 0, function* (composition = 0, listLinkers = [], textSearch = \"\") {\n        let concepts = [];\n        try {\n            let searchQuery = new SearchQuery();\n            searchQuery.composition = composition;\n            searchQuery.listLinkers = listLinkers;\n            searchQuery.textSearch = textSearch;\n            let raw = JSON.stringify(searchQuery);\n            let Connections = [];\n            let myHeaders = GetRequestHeader();\n            const response = yield fetch(BaseUrl.RecursiveSearchUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                let conceptIds = result.compositionIds;\n                let connections = result.internalConnections;\n                let externalConnections = result.externalConnections;\n                concepts = yield GetCompositionFromConnectionsWithDataId(conceptIds, connections);\n            }\n            else {\n                console.log(\"recursive search error \", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('recursive search error message: ', error.message);\n            }\n            else {\n                console.log('recursive search unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.RecursiveSearchUrl());\n        }\n        return concepts;\n    });\n}\nexport function RecursiveSearchApiRaw() {\n    return __awaiter(this, arguments, void 0, function* (composition = 0, listLinkers = [], textSearch = \"\") {\n        let concepts = [];\n        try {\n            let searchQuery = new SearchQuery();\n            searchQuery.composition = composition;\n            searchQuery.listLinkers = listLinkers;\n            searchQuery.textSearch = textSearch;\n            let raw = JSON.stringify(searchQuery);\n            let Connections = [];\n            let myHeaders = GetRequestHeader();\n            const response = yield fetch(BaseUrl.RecursiveSearchUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                let conceptIds = result.compositionIds;\n                let connections = result.internalConnections;\n                let externalConnections = result.externalConnections;\n                return result;\n            }\n            else {\n                console.log(\"recursive search error \", response.status);\n                HandleHttpError(response);\n            }\n            return [];\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('recursive search error message: ', error.message);\n            }\n            else {\n                console.log('recursive search unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.RecursiveSearchUrl());\n        }\n    });\n}\nexport function RecursiveSearchApiRawFullLinker() {\n    return __awaiter(this, arguments, void 0, function* (composition = 0, fullLinkers = [], textSearch = \"\") {\n        let concepts = [];\n        try {\n            let searchQuery = new SearchQuery();\n            searchQuery.composition = composition;\n            searchQuery.fullLinkers = fullLinkers;\n            searchQuery.textSearch = textSearch;\n            let raw = JSON.stringify(searchQuery);\n            let Connections = [];\n            let myHeaders = GetRequestHeader();\n            const response = yield fetch(BaseUrl.RecursiveSearchUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                let conceptIds = result.compositionIds;\n                let connections = result.internalConnections;\n                let externalConnections = result.externalConnections;\n                return result;\n            }\n            else {\n                console.log(\"recursive search error \", response.status);\n                HandleHttpError(response);\n            }\n            return [];\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('recursive search error message: ', error.message);\n            }\n            else {\n                console.log('recursive search unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.RecursiveSearchUrl());\n        }\n    });\n}\nexport function RecursiveSearchApiNewRawFullLinker() {\n    return __awaiter(this, arguments, void 0, function* (composition = 0, fullLinkers = [], textSearch = \"\") {\n        let concepts = [];\n        try {\n            let searchQuery = new SearchQuery();\n            searchQuery.composition = composition;\n            searchQuery.fullLinkers = fullLinkers;\n            searchQuery.textSearch = textSearch;\n            let raw = JSON.stringify(searchQuery);\n            let Connections = [];\n            let myHeaders = GetRequestHeader();\n            const response = yield fetch(BaseUrl.RecursiveSearchUrl(), {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw\n            });\n            if (response.ok) {\n                const result = yield response.json();\n                let conceptIds = result.compositionIds;\n                let connections = result.internalConnections;\n                let externalConnections = result.externalConnections;\n                return result;\n            }\n            else {\n                console.log(\"recursive search error \", response.status);\n                HandleHttpError(response);\n            }\n            return [];\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('recursive search error message: ', error.message);\n            }\n            else {\n                console.log('recursive search unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.RecursiveSearchUrl());\n        }\n    });\n}\nexport function RecursiveSearchLocal(composition_1) {\n    return __awaiter(this, arguments, void 0, function* (composition, listLinkers = [], textSearch = \"\") {\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from \"./../../DataStructures/ConceptData\";\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { CreateDefaultConcept } from \"../../app\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nexport function GetConceptByCharacterAndCategoryDirectApi(characterValue, category_id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = CreateDefaultConcept();\n        try {\n            var header = GetRequestHeader('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetConceptByCharacterAndCategoryDirectUrl(), {\n                method: 'POST',\n                headers: header,\n                body: `character_value=${characterValue}&category_id=${category_id}`,\n            });\n            if (response.ok) {\n                let conceptString = yield response.json();\n                concept = conceptString;\n                ConceptsData.AddConcept(concept);\n            }\n            else {\n                //  throw new Error(`Error! status: ${response.status}`);\n                console.log(\"This is the concept by category and character error\", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log(' This is the concept by category and character error message: ', error.message);\n            }\n            else {\n                console.log(' This is the concept by category and character unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetConceptByCharacterAndCategoryDirectUrl());\n        }\n        return concept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nexport function SearchAllConcepts(type_1, search_1, composition_1, token_1) {\n    return __awaiter(this, arguments, void 0, function* (type, search, composition, token, inpage = 10, page = 1) {\n        var header = GetRequestHeaderWithAuthorization('application/x-www-form-urlencoded', token);\n        var urlencoded = new URLSearchParams();\n        urlencoded.append(\"type\", type);\n        urlencoded.append(\"search\", search);\n        urlencoded.append(\"composition\", composition);\n        urlencoded.append(\"inpage\", inpage.toString());\n        urlencoded.append(\"page\", page.toString());\n        const queryUrl = BaseUrl.SearchCompositionsUrl() + \"?\" + urlencoded.toString();\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'GET',\n                headers: header\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                HandleHttpError(response);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../app\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nexport function SearchInternalApi(search_1) {\n    return __awaiter(this, arguments, void 0, function* (search, token = \"\") {\n        var header = GetRequestHeaderWithAuthorization(\"application/json\", token);\n        let queryUrl = BaseUrl.SearchInternalWithAuthenticatedCcsUrl();\n        queryUrl = queryUrl + '?composition=' + search.composition + '&search=' + search.search + '&internalComposition=' + search.internalComposition + '&type=' + search.type + '&inpage=' + search.inpage + '&page=' + search.page;\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'GET',\n                headers: header\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                console.log(\"This is the searching internal error\", response.status);\n                HandleHttpError(response);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching internal error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\nexport function SearchInternalAllApi(search_1) {\n    return __awaiter(this, arguments, void 0, function* (search, token = \"\") {\n        var header = GetRequestHeaderWithAuthorization(\"application/json\", token);\n        let queryUrl = BaseUrl.SearchInternalWithAuthenticatedCcsUrl();\n        queryUrl = queryUrl + '?composition=' + search.composition + '&search=' + search.search + '&internalComposition=' + search.internalComposition + '&type=' + search.type + '&inpage=' + search.inpage + '&page=' + search.page;\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'GET',\n                headers: header\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                console.log(\"This is the searching internal error\", response.status);\n                HandleHttpError(response);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching internal error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nexport function SearchLinkMultipleApi(searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchQuery, token = \"\") {\n        var header = GetRequestHeaderWithAuthorization(\"application/json\", token);\n        const queryUrl = BaseUrl.SearchLinkMultipleAllApiUrl();\n        const body = JSON.stringify(searchQuery);\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'POST',\n                headers: header,\n                body: body\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                HandleHttpError(response);\n                console.log(\"This is the searching multiple error\", response.status);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching multiple error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nexport function SearchWithLinker(searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchQuery, token = \"\") {\n        var header = GetRequestHeaderWithAuthorization(\"application/json\", token);\n        const queryUrl = BaseUrl.SearchLinkMultipleAll();\n        const body = JSON.stringify(searchQuery);\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'POST',\n                headers: header,\n                body: body\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                console.log(\"This is the searching error\", response.status);\n                HandleHttpError(response);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../app\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nexport function SearchWithTypeAndLinkerApi(searchStructure_1, searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchStructure, searchQuery, token = \"\") {\n        let queryUrl = BaseUrl.SearchAllTypeWithLinker();\n        var header = GetRequestHeaderWithAuthorization(\"application/json\", token);\n        queryUrl = queryUrl + '?search=' + searchStructure.search + '&type=' + searchStructure.type + '&inpage=' + searchStructure.inpage + '&page=' + searchStructure.page;\n        const body = JSON.stringify(searchQuery);\n        try {\n            const response = yield fetch(queryUrl, {\n                method: 'POST',\n                headers: header,\n                body: body\n            });\n            if (response.ok) {\n                let result = yield response.json();\n                return result;\n            }\n            else {\n                HandleHttpError(response);\n                console.log(\"This is the searching multiple error\", response.status);\n                return [];\n            }\n        }\n        catch (ex) {\n            console.log(\"This is the searching SearchWithTypeAndLinker error\", ex);\n            HandleInternalError(ex, queryUrl);\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nexport function CreateSession(sessionData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            var header = GetRequestHeader();\n            const body = JSON.stringify(sessionData);\n            const response = yield fetch(BaseUrl.CreateSessionId(), {\n                method: 'POST',\n                headers: header,\n                body: body\n            });\n            if (response.ok) {\n                return response.json();\n            }\n            else {\n                console.log(\"Creating session failed\", yield response.json());\n                HandleHttpError(response);\n                return null;\n            }\n        }\n        catch (ex) {\n            console.log(\"Creating session failed\", ex);\n            HandleInternalError(ex, BaseUrl.CreateSessionId());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nexport function CreateSessionVisit(sessionId, url) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            var header = GetRequestHeader(\"application/x-www-form-urlencoded\");\n            const urlencoded = new URLSearchParams();\n            urlencoded.append(\"sessionId\", sessionId.toString());\n            urlencoded.append(\"url\", url);\n            const response = yield fetch(BaseUrl.CreateSessionVisitUrl(), {\n                method: 'POST',\n                headers: header,\n                body: urlencoded\n            });\n            if (response.ok) {\n                return response.json();\n            }\n            else {\n                console.log(\"Creating session url failed\", yield response.json());\n                HandleHttpError(response);\n                return null;\n            }\n        }\n        catch (ex) {\n            console.log(\"Creating session url failed\", ex);\n            HandleInternalError(ex, BaseUrl.CreateSessionVisitUrl());\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { BaseUrl } from \"../app\";\nexport default function Signin(signinInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const raw = JSON.stringify({\n            email: signinInfo.email,\n            password: signinInfo.password,\n        });\n        let freeschemaRes = {\n            message: 'success',\n            status: false,\n            statusCode: 200,\n            data: '',\n        };\n        const myHeaders = new Headers();\n        myHeaders.append('Content-Type', 'application/json');\n        const url = BaseUrl.LoginUrl();\n        try {\n            const response = yield fetch(url, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow',\n            });\n            const output = yield response.json();\n            if (response.ok) {\n                const dataObject = output === null || output === void 0 ? void 0 : output.data;\n                freeschemaRes = {\n                    message: 'success',\n                    status: true,\n                    statusCode: 200,\n                    data: dataObject,\n                };\n            }\n            else {\n                HandleHttpError(response);\n            }\n            return freeschemaRes;\n        }\n        catch (error) {\n            console.log('Sign in api error', error);\n            HandleInternalError(error, url);\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { HandleHttpError, HandleInternalError } from \"../Services/Common/ErrorPosting\";\nimport { BaseUrl } from \"../app\";\nexport default function Signup(signupModel) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const signupResponse = yield postData(BaseUrl.SignupUrl(), signupModel);\n        return signupResponse;\n    });\n}\nfunction postData() {\n    return __awaiter(this, arguments, void 0, function* (url = '', data = {}) {\n        let freeschemaRes = {\n            message: 'success',\n            status: false,\n            statusCode: 200,\n            data: '',\n        };\n        // Default options are marked with *\n        try {\n            const response = yield fetch(url, {\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json',\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                redirect: 'follow', // manual, *follow, error\n                referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n                body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n            });\n            const output = yield response.json();\n            if (response.ok) {\n                freeschemaRes = {\n                    message: 'success',\n                    status: true,\n                    statusCode: 200,\n                    data: output,\n                };\n            }\n            else {\n                HandleHttpError(response);\n            }\n            return freeschemaRes;\n        }\n        catch (error) {\n            console.log('Signup Error: ', error);\n            HandleInternalError(error, url);\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError, HandleInternalError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeaderWithAuthorization } from \"../../Services/Security/GetRequestHeader\";\nimport { ConceptsData, CreateDefaultConcept } from \"../../app\";\nexport function TranslateLocalToReal(conceptId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result = CreateDefaultConcept();\n        try {\n            var header = GetRequestHeaderWithAuthorization('application/x-www-form-urlencoded');\n            const response = yield fetch(BaseUrl.GetRealConceptById(), {\n                method: 'POST',\n                headers: header,\n                body: `id=${conceptId}`\n            });\n            if (response.ok) {\n                result = (yield response.json());\n                if (result.id > 0) {\n                    ConceptsData.AddConcept(result);\n                }\n                return result;\n            }\n            else {\n                console.log(\"Error in Getting Translating concept Error\", response.status);\n                HandleHttpError(response);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log('Error in Getting Translating concept error message: ', error);\n            }\n            else {\n                console.log('Error in Getting Translating concept unexpected error: ', error);\n            }\n            HandleInternalError(error, BaseUrl.GetRealConceptById());\n        }\n        return result;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../../DataStructures/BaseUrl\";\nimport { HandleHttpError } from \"../../Services/Common/ErrorPosting\";\nimport { GetRequestHeader } from \"../../Services/Security/GetRequestHeader\";\nimport { GetConceptBulk } from \"../../app\";\nexport function ViewInternalDataApi(ids) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connectionList = [];\n        try {\n            var header = GetRequestHeader();\n            const response = yield fetch(BaseUrl.ViewInternalDataUrl(), {\n                method: 'POST',\n                headers: header,\n                body: JSON.stringify(ids)\n            });\n            if (response.ok) {\n                let conceptString = yield response.json();\n                let connectionDictionary = {};\n                for (let i = 0; i < conceptString.length; i++) {\n                    let conceptList = conceptString[i].concepts;\n                    connectionList = conceptString[i].connections;\n                    let id = conceptString[i].id;\n                    GetConceptBulk(conceptList);\n                    connectionDictionary[id] = connectionList;\n                }\n                return connectionDictionary;\n            }\n            else {\n                //  throw new Error(`Error! status: ${response.status}`);\n                console.log(\"View Internal Data error\", response.status);\n                HandleHttpError(response);\n            }\n            return connectionList;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                console.log(' This is the view internal data error message: ', error.message);\n            }\n            else {\n                console.log(' This is the view internal data unexpected error: ', error);\n            }\n            throw error;\n        }\n    });\n}\n", "export const ADMIN = 3;\nexport const PRIVATE = 4;\nexport const PUBLIC = 5;\n", "export const NORMAL = 1;\nexport const DATAID = 2;\nexport const JUSTDATA = 3;\nexport const DATAIDDATE = 4;\nexport const RAW = 5;\n", "export class BaseUrl {\n    // static GetConceptUrl:string = this.BASE_URL + '/api/getConcept';\n    static GetConceptUrl() {\n        return this.BASE_URL + '/api/getConcept';\n    }\n    static GetConnectionUrl() {\n        return this.BASE_URL + '/api/get-connection-by-id';\n    }\n    static GetConceptBulkUrl() {\n        return this.BASE_URL + '/api/get_concept_bulk';\n    }\n    static GetConnectionBulkUrl() {\n        return this.BASE_URL + '/api/get_connection_bulk';\n    }\n    static GetAllConceptsOfUserUrl() {\n        return this.BASE_URL + '/api/get_all_concepts_of_user';\n    }\n    static GetAllConnectionsOfUserUrl() {\n        return this.BASE_URL + '/api/get_all_connections_of_user';\n    }\n    static GetAllConnectionsOfCompositionUrl() {\n        return this.BASE_URL + '/api/get_all_connections_of_composition';\n    }\n    static GetAllConnectionsOfCompositionBulkUrl() {\n        return this.BASE_URL + '/api/get_all_connections_of_composition_bulk';\n    }\n    static GetConceptByCharacterValueUrl() {\n        return this.BASE_URL + '/api/get_concept_by_character_value';\n    }\n    static GetConceptByCharacterAndTypeUrl() {\n        return this.BASE_URL + '/api/get_concept_by_character_and_type';\n    }\n    static GetConceptByCharacterAndCategoryUrl() {\n        return this.BASE_URL + '/api/get_concept_by_character_and_category';\n    }\n    static GetConceptByCharacterAndCategoryDirectUrl() {\n        return this.BASE_URL + '/api/get_concept_by_character_and_category_direct';\n    }\n    static GetCharacterByCharacterUrl() {\n        return this.BASE_URL + '/api/get_character_by_character';\n    }\n    static GetAllConceptsByTypeUrl() {\n        return this.BASE_URL + '/api/get_all_concepts_by_type';\n    }\n    static GetAllConnectionsOfConceptUrl() {\n        return this.BASE_URL + '/api/get-link-connections';\n    }\n    static GetAllAiData() {\n        return this.BASE_URL + '/api/get-preloaded-concepts';\n        // return this.AI_URL + '/api/get_ranked_type_id?inpage=300' || process.env.AI_URL ||  'https://ai.freeschema.com/api/get_ranked_type_id?inpage=300';\n    }\n    static GetAllPrefetchConnectionsUrl() {\n        return this.BASE_URL + '/api/get_all_connections_of_user?inpage=500';\n    }\n    static GetAllLinkerConnectionOfConceptUrl() {\n        return this.BASE_URL + '/api/get-all-linkers-from-concept';\n    }\n    static GetAllLinkerConnectionToConceptUrl() {\n        return this.BASE_URL + '/api/get-all-linkers-to-concept';\n    }\n    static DeleteConceptUrl() {\n        return this.BASE_URL + '/api/delete_concept';\n    }\n    static RecursiveSearchUrl() {\n        return this.BASE_URL + '/api/recursivesearch-concept-connection';\n    }\n    static SearchLinkMultipleAllApiUrl() {\n        return this.BASE_URL + '/api/Connection/search-link-multiple-all-ccs';\n    }\n    static MakeTheNameInBackendUrl() {\n        return this.BASE_URL + '/api/make-name-from-frontend';\n    }\n    static SearchAllTypeWithLinker() {\n        return this.BASE_URL + '/api/search-all-with-linker-ccs';\n    }\n    static LoginUrl() {\n        return this.BASE_URL + '/api/auth/login';\n    }\n    static SignupUrl() {\n        return this.BASE_URL + '/api/auth/signup';\n    }\n    static GetCompositionConnectionBetweenTwoConceptsUrl() {\n        return this.BASE_URL + '/api/get-composition-connection-between-two-concepts';\n    }\n    static SearchCompositionsUrl() {\n        return this.BASE_URL + '/api/search-compositions';\n    }\n    static SearchLinkMultipleAll() {\n        return this.BASE_URL + '/api/Connection/search-link-multiple-all';\n    }\n    static CreateSessionId() {\n        return this.BASE_URL + '/api/create-session-id-remote';\n    }\n    static CreateSessionVisitUrl() {\n        return this.BASE_URL + '/api/create-remote-session-visit';\n    }\n    //////////////////////////////////////////////////////////////////////////////\n    /////////////////////Api for viewing internal data //////////////////////////\n    static ViewInternalDataUrl() {\n        return this.BASE_URL + '/api/view-api-internal-data-ccs-id-bulk';\n    }\n    static SearchInternalWithAuthenticatedCcsUrl() {\n        return this.BASE_URL + '/api/search-composition-internal-authenticated-ccs';\n    }\n    static SearchInternalWithCcsUrl() {\n        return this.BASE_URL + '/api/search-composition-internal-authenticated-ccs';\n    }\n    static CreateGhostConceptApiUrl() {\n        return BaseUrl.NODE_URL + '/api/v1/local-concepts';\n    }\n    static CreateGhostConnectionApiUrl() {\n        return BaseUrl.NODE_URL + '/api/v1/local-connections';\n    }\n    static GetRealConceptById() {\n        return BaseUrl.NODE_URL + '/api/v1/local-concepts-translate';\n    }\n    //////////////////////////////////////////////////////////////////////////////\n    //////////////// API For Reserved Ids ///////////////////////////////////////\n    static GetReservedIdUrl() {\n        return this.BASE_URL + '/api/get_reserved_ids';\n    }\n    static GetReservedConnectionIdUrl() {\n        return this.BASE_URL + '/api/get_reserved_connection_ids';\n    }\n    /////////////////////////////////////////////////////////////////////////////\n    ////////////////API For Creating Data //////////////////////////////////////\n    static CreateTheTextDataUrl() {\n        return this.BASE_URL + '/api/create_text_data';\n    }\n    static CreateTheCharacterDataUrl() {\n        return this.BASE_URL + '/api/create_character_data';\n    }\n    static CreateTheConceptUrl() {\n        return this.BASE_URL + '/api/create_the_concept';\n    }\n    static CreateTheConnectionUrl() {\n        return this.BASE_URL + '/api/create_the_connection';\n    }\n    static CreateTheConnectionNewUrl() {\n        return this.BASE_URL + '/api/create_the_connection_new';\n    }\n    static MakeTheTypeConceptUrl() {\n        return this.BASE_URL + '/api/make_the_type_concept';\n    }\n    ////////////////////////////////////////////////////////////////////////\n    /////////////////////API FOR Deleting Connection //////////////////////\n    static DeleteTheConnectionUrl() {\n        return this.BASE_URL + '/api/delete_connection';\n    }\n}\nBaseUrl.BASE_URL = \"https://localhost:7053/\";\nBaseUrl.AI_URL = \"https://ai.freeschema.com\";\nBaseUrl.MQTT_URL = '192.168.1.249';\nBaseUrl.NODE_URL = \"http://localhost:5001\";\nBaseUrl.BASE_APPLICATION = \"\";\nBaseUrl.BASE_RANDOMIZER = 999;\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"./IdentifierFlags\";\nimport { Node } from \"./Node\";\nexport class BinaryCharacterTree {\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isCharacterLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(BinaryCharacterTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static addNodeToTree(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.characterRoot == null) {\n                this.characterRoot = node;\n                return this.characterRoot;\n            }\n            else {\n                this.characterRoot = this.characterRoot.addCharacterNode(node, this.characterRoot, this.characterRoot.height);\n            }\n            return this.characterRoot;\n        });\n    }\n    static removeNodeByCharacter(character, id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.characterRoot) {\n                this.characterRoot.removeNodeWithVariants(this.characterRoot, character, id);\n            }\n        });\n    }\n    static countNumberOfNodes() {\n        if (this.characterRoot) {\n            return this.characterRoot.countNodeBelow(this.characterRoot);\n        }\n        return 0;\n    }\n    static addConceptToTree(concept) {\n        if (concept.characterValue != \"\") {\n            var node = new Node(concept.characterValue, concept, null, null);\n            this.addNodeToTree(node);\n        }\n    }\n    static getNodeFromTree(value) {\n        if (this.characterRoot) {\n            var Node = this.characterRoot.getCharacterFromNode(value, this.characterRoot);\n            return Node;\n        }\n        return this.characterRoot;\n    }\n    static getNodeFromTreeUpdated(value) {\n        if (this.characterRoot) {\n            var Node = this.characterRoot.getCharacterFromNode(value, this.characterRoot);\n            return Node;\n        }\n        return this.characterRoot;\n    }\n    static getCharacterAndTypeFromTree(value, typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // try{\n            //     var data = await this.waitForDataToLoad();\n            // }\n            // catch(exception){\n            //     return null;\n            // }\n            if (this.characterRoot) {\n                var Node = this.characterRoot.getFromNodeWithCharacterAndType(value, typeId, this.characterRoot);\n                return Node;\n            }\n            return this.characterRoot;\n        });\n    }\n    static getCharacterAndCategoryFromTree(value, categoryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // try{\n            //     var data = await this.waitForDataToLoad();\n            // }\n            // catch(exception){\n            //     return null;\n            // }\n            if (this.characterRoot) {\n                var Node = this.characterRoot.getFromNodeWithCharacterAndCategory(value, categoryId, this.characterRoot);\n                return Node;\n            }\n            return this.characterRoot;\n        });\n    }\n    static removeConceptCharacter(id) {\n        if (this.characterRoot) {\n            this.characterRoot = this.characterRoot.removeNode(this.characterRoot, id);\n        }\n    }\n}\nBinaryCharacterTree.characterRoot = null;\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BinaryCharacterTree } from \"./BinaryCharacterTree\";\nimport { Node } from \"./Node\";\nimport { IdentifierFlags } from \"./IdentifierFlags\";\nexport class BinaryTree {\n    static addNodeToTree(node) {\n        if (this.root == null) {\n            this.root = node;\n            return this.root;\n        }\n        else {\n            this.root = this.root.addNode(node, this.root, this.root.height);\n        }\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isDataLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(BinaryTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static addConceptToTree(concept) {\n        let node = new Node(concept.id, concept, null, null);\n        let characterNode = new Node(concept.characterValue, concept, null, null);\n        BinaryCharacterTree.addNodeToTree(characterNode);\n        this.addNodeToTree(node);\n    }\n    static getNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                let Node = this.root.getFromNode(id, this.root);\n                return Node;\n            }\n            return null;\n        });\n    }\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                let event = new Event(`${id}`);\n                console.log(\"this is the fired event after delete\", event);\n                dispatchEvent(event);\n                this.root = this.root.removeNode(this.root, id);\n            }\n        });\n    }\n    static getConceptListFromIds(ids, connectionArray, remainingIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                this.root.checkIfIdsInNode(this.root, ids, connectionArray, remainingIds);\n            }\n        });\n    }\n    static countNumberOfNodes() {\n        if (this.root) {\n            return this.root.countNodeBelow(this.root);\n        }\n        return 0;\n    }\n}\nBinaryTree.root = null;\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetTheConcept } from \"../app\";\nimport { CreateDefaultConcept } from \"../Services/CreateDefaultConcept\";\nimport { IdentifierFlags } from \"./IdentifierFlags\";\nimport { TypeNode } from \"./TypeNode\";\nexport class BinaryTypeTree {\n    // old method having concept as the value.\n    // static async addNodeToTree(node:Node){\n    //     if(this.typeRoot == null){\n    //         this.typeRoot = node;\n    //         return this.typeRoot;\n    //     }\n    //     else{\n    //          let event = new CustomEvent(`${node.value.typeId}`, {detail: node.value.id});\n    //         // console.log(\"this is the fired event\", event);\n    //          dispatchEvent(event);\n    //         this.typeRoot = this.typeRoot.addTypeNode(node,this.typeRoot,this.typeRoot.height);\n    //     }\n    //     return this.typeRoot;\n    // }\n    // new method with just ids \n    static addType(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root == null) {\n                this.root = node;\n                return this.root;\n            }\n            else {\n                let event = new CustomEvent(`${node.key}`, { detail: node.value[0] });\n                // console.log(\"this is the fired event\", event);\n                dispatchEvent(event);\n                // console.log(\"this is the fired event\", event);\n                this.root = this.root.addType(this.root, node.key, node.value[0]);\n            }\n            return this.root;\n        });\n    }\n    static addConceptToTree(concept) {\n        if (concept.typeId != 0) {\n            /// old type \n            // var node: Node = new Node(concept.typeId, concept, null, null);\n            // this.addNodeToTree(node);\n            // new functionality\n            let typeNode = new TypeNode(concept.typeId, concept.id);\n            this.addType(typeNode);\n        }\n    }\n    static removeTypeConcept(typeId, id) {\n        // old mehtod\n        // if(this.typeRoot){\n        //     this.typeRoot = this.typeRoot.removeNodeWithVariants(this.typeRoot,typeId,id);\n        // }\n        // new method\n        if (this.root) {\n            this.root = this.root.removeNodeWithVariants(this.root, typeId, id);\n        }\n    }\n    // static getNodeFromTree(id:number){\n    //     // old method\n    //     if(this.typeRoot){\n    //         var Node = this.typeRoot.getFromNode(id, this.typeRoot);\n    //         return Node;\n    //     }\n    //     return this.typeRoot;\n    // }\n    static getNodeFromTreeNew(id) {\n        // new method\n        if (this.root) {\n            let node = this.root.getFromNode(id, this.root);\n            return node;\n        }\n        return this.root;\n    }\n    /// old method\n    // static getTypeVariantsFromTree(typeId:number){\n    //         let Node = this.getNodeFromTree(typeId);\n    //         var concepts : Concept[] = [];\n    //         if(Node){\n    //             concepts.push(Node?.value);\n    //             for(let i=0; i< Node.variants.length; i++){\n    //                 concepts.push(Node.variants[i].value);\n    //             }\n    //         return concepts;\n    //     }\n    // }\n    //new method\n    static getTypeVariantsFromTreeNew(typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let node = this.getNodeFromTreeNew(typeId);\n            let conceptIds = [];\n            let concepts = [];\n            if (node) {\n                conceptIds = node.value;\n                for (let i = 0; i < conceptIds.length; i++) {\n                    concepts.push(yield GetTheConcept(conceptIds[i]));\n                }\n            }\n            return concepts;\n        });\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isTypeLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(BinaryTypeTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    // static async getTypeVariantsFromTreeWithUserId(typeId:number, userId:number){\n    //     var concepts : Concept[] = [];\n    //         var Node = this.getNodeFromTree(typeId);\n    //         if(Node){\n    //             console.log(\"this is the tree to find\", Node.value);\n    //             if(Node.value.userId == userId ){\n    //                 concepts.push(Node?.value);\n    //             }\n    //             for(let i=0; i< Node.variants.length; i++){\n    //                 if(Node.variants[i].value.userId == userId ){\n    //                     var isPresent = false;\n    //                     for(let j=0; j<concepts.length;j++){\n    //                         if(concepts[j].id == Node.variants[i].value.id){\n    //                             isPresent = true;\n    //                         }\n    //                     }\n    //                     if(!isPresent){\n    //                         concepts.push(Node.variants[i].value);\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     return concepts;\n    // }\n    // new method\n    static getTypeVariantsFromTreeWithUserIdNew(typeId, userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let concepts = [];\n            let allConcepts = yield this.getTypeVariantsFromTreeNew(typeId);\n            console.log(\"these are all the concepts\", allConcepts);\n            for (let i = 0; i < allConcepts.length; i++) {\n                if (allConcepts[i].userId == userId) {\n                    concepts.push(allConcepts[i]);\n                }\n            }\n            return concepts;\n        });\n    }\n    // static async getTypeVariantsWithCharacterValue( characterValue:string,typeId:number,){\n    //     let concept = CreateDefaultConcept();\n    //         var Node = this.getNodeFromTree(typeId);\n    //         if(Node){\n    //             if(Node.value.characterValue == characterValue ){\n    //                 concept = Node.value;\n    //             }\n    //             for(let i=0; i< Node.variants.length; i++){\n    //                 if(Node.variants[i].value.characterValue == characterValue ){\n    //                     concept = Node.variants[i].value;\n    //                 }\n    //             }\n    //         }\n    //     return concept;\n    // }\n    //new method\n    static getTypeVariantsWithCharacterValueNew(characterValue, typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let allConcepts = yield this.getTypeVariantsFromTreeNew(typeId);\n            console.log(\"this is all the concepts for character\", allConcepts);\n            let concept = CreateDefaultConcept();\n            for (let i = 0; i < allConcepts.length; i++) {\n                if (allConcepts[i].characterValue == characterValue) {\n                    concept = allConcepts[i];\n                }\n            }\n            return concept;\n        });\n    }\n    static countNumberOfNodes() {\n        if (this.typeRoot) {\n            return this.typeRoot.countNodeBelow(this.typeRoot);\n        }\n        return 0;\n    }\n}\nBinaryTypeTree.typeRoot = null;\nBinaryTypeTree.root = null;\n", "import { TheCharacter } from \"./TheCharacter\";\nexport class CharacterRepository {\n    constructor() {\n        this.name = \"character Repository\";\n    }\n    static AddCharacter(character) {\n        this.characterData[character.id] = character;\n    }\n    static GetCharacter(value) {\n        var theCharacter = new TheCharacter(0, \"0\", 0, 0, 0, 0, 0, 0, \"0\", false);\n        for (var i = 0; i < this.characterData.length; i++) {\n            if (this.characterData[i].data == value) {\n                theCharacter = this.characterData[i];\n            }\n        }\n        return theCharacter;\n    }\n}\nCharacterRepository.characterData = [];\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { recursiveFetchNew } from '../../Services/Composition/BuildComposition';\nimport { CreateDefaultConcept } from '../../Services/CreateDefaultConcept';\nimport { publishMessage } from '../../Services/Mqtt/publishMessage';\nexport class Composition {\n    constructor() {\n        // we can build a composition using this class\n        this.id = 0;\n        this.mainConcept = CreateDefaultConcept();\n        this.connections = [];\n        this.concepts = [];\n        this.subcompositions = [];\n        this.cached = {};\n    }\n    updateCache() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.mainConcept.id == 0)\n                for (let i = 0; i < this.concepts.length; i++) {\n                    if (this.concepts[i].id == this.id) {\n                        this.mainConcept = this.concepts[i];\n                    }\n                }\n            let visitedConcepts = [];\n            this.cached = yield recursiveFetchNew(this.id, this.connections, this.concepts, this.subcompositions, visitedConcepts);\n        });\n    }\n    UpdateAcrossDistributedSystem() {\n        var _a;\n        try {\n            if (this.id != 0) {\n                publishMessage('compositionUpdate', (_a = this.id) === null || _a === void 0 ? void 0 : _a.toString());\n            }\n        }\n        catch (ex) {\n            console.log('Error while publishing message', ex);\n        }\n    }\n    isUpdating() {\n        this.UpdateAcrossDistributedSystem();\n    }\n    GetDataCache() {\n        var _a, _b, _c;\n        const returnOutput = {};\n        const mainString = (_c = (_b = (_a = this.mainConcept) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.characterValue) !== null && _c !== void 0 ? _c : '';\n        returnOutput[mainString] = this.cached;\n        const FinalReturn = {};\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = this.id;\n        return FinalReturn;\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CompositionNode } from './CompositionNode';\nexport class CompositionBinaryTree {\n    static addNodeToTree(node) {\n        if (this.root == null) {\n            this.root = node;\n            return this.root;\n        }\n        else {\n            this.root = this.root.addNode(node, this.root, this.root.height);\n        }\n    }\n    static addCompositionToTree(composition) {\n        const node = new CompositionNode(composition.id, composition, null, null);\n        this.addNodeToTree(node);\n    }\n    static getNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                const Node = this.root.getFromNode(id, this.root);\n                return Node;\n            }\n            return null;\n        });\n    }\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                this.root = this.root.removeNode(this.root, id);\n            }\n        });\n    }\n    static countNumberOfNodes() {\n        if (this.root) {\n            return this.root.countNodeBelow(this.root);\n        }\n        return 0;\n    }\n}\n// this is a binary tree to hold compositions in it\nCompositionBinaryTree.root = null;\n", "import { CompositionBinaryTree } from './CompositionBinaryTree';\nexport class CompositionNode {\n    constructor(key, value, leftNode, rightNode) {\n        this.expiryTime = new Date(Date.now() + 10 * 60 * 1000);\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n    }\n    isValid() {\n        const currentTime = new Date(Date.now());\n        if (this.expiryTime < currentTime) {\n            CompositionBinaryTree.removeNodeFromTree(this.key);\n            return false;\n        }\n        return true;\n    }\n    saveToCache(data) {\n        this.value.cached = data;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        const LeftNode = node.leftNode;\n        const RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        // else if (node.key == passedNode.key && node.key != \"\"){\n        //     node.currentNode = passedNode;\n        // }\n        else {\n            this.isValid();\n            node = passedNode;\n            return node;\n        }\n        node.height =\n            1 +\n                Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        const balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    return this.rightRotate(node);\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    return this.rightRotate(node);\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    return this.leftRotate(node);\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    return this.leftRotate(node);\n                }\n            }\n        }\n        this.isValid();\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            const x = y.leftNode;\n            if (x) {\n                const T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height =\n                    Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height =\n                    Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            const y = x.rightNode;\n            if (y) {\n                const T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key && node.isValid()) {\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        if (passedNode.leftNode == null) {\n            const temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            const temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            const immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    countNodeBelow(root) {\n        if (root == null) {\n            return 0;\n        }\n        //recursive call to left child and right child and\n        // add the result of these with 1 ( 1 for counting the root)\n        return (1 +\n            this.countNodeBelow(root.leftNode) +\n            this.countNodeBelow(root.rightNode));\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n", "import { BaseUrl } from \"../app\";\nexport class Concept {\n    constructor(id, userId, typeId, categoryId, referentId, characterValue, accessId, isNew = false, entryTimeStamp, updatedTimeStamp, typeCharacter) {\n        this.count = 0;\n        this.typeCharacter = \"\";\n        this.isComposition = false;\n        this.isTemp = false;\n        this.isSynced = false;\n        this.applicationId = BaseUrl.BASE_RANDOMIZER;\n        this.x = 0;\n        this.y = 0;\n        this.id = id;\n        this.userId = userId;\n        this.typeId = typeId;\n        this.ghostId = id;\n        this.categoryId = categoryId;\n        this.referentId = referentId;\n        this.characterValue = `${characterValue}`;\n        this.accessId = accessId;\n        this.typeCharacter = typeCharacter;\n        this.type = null;\n        this.isNew = isNew;\n        this.entryTimeStamp = entryTimeStamp;\n        this.updatedTimeStamp = updatedTimeStamp;\n        // ConceptsData.AddConcept(this);\n    }\n    getType() {\n        console.log(this.typeId);\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { removeFromDatabase, UpdateToDatabase } from \"../Database/indexeddb\";\nimport { BinaryTree } from \"./BinaryTree\";\nimport { BinaryCharacterTree } from \"./BinaryCharacterTree\";\nimport { BinaryTypeTree } from \"./BinaryTypeTree\";\nimport { CreateDefaultConcept } from \"../Services/CreateDefaultConcept\";\nexport class ConceptsData {\n    constructor() {\n        this.name = \"conceptsArray\";\n    }\n    static CheckContains(concept) {\n        var contains = false;\n        for (var i = 0; i < this.conceptsArray.length; i++) {\n            if (this.conceptsArray[i].id == concept.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static AddNpc(id) {\n        if (!this.NPC.includes(id)) {\n            if (this.NPC.length > 10) {\n                this.NPC = [];\n            }\n            this.NPC.push(id);\n        }\n    }\n    static GetNpc(id) {\n        if (this.NPC.includes(id)) {\n            return true;\n        }\n        return false;\n    }\n    static AddConceptToStorage(concept) {\n        if (concept.id > 0) {\n            UpdateToDatabase(\"concept\", concept);\n        }\n    }\n    static GetConceptBulkData(ids, connectionArray, remainingIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield BinaryTree.getConceptListFromIds(ids, connectionArray, remainingIds);\n        });\n    }\n    static AddConcept(concept) {\n        if (concept.id > 0) {\n            // console.log(\"added the concept to the tree\", concept);\n            //var contains = this.CheckContains(concept);\n            // this.conceptDictionary[concept.id] = concept;\n            //    if(contains){\n            //   this.RemoveConcept(concept);\n            //  }\n            //UpdateToDatabase(\"concept\",concept);\n            //IndexDbUpdate.UpdateConceptIndexDb(concept);\n            console.log(\"this is the added concept\", concept);\n            BinaryTree.addConceptToTree(concept);\n            BinaryTypeTree.addConceptToTree(concept);\n            //BinaryCharacterTree.addConceptToTree(concept);\n        }\n    }\n    static AddConceptToMemory(concept) {\n        if (concept.id > 0) {\n            //var contains = this.CheckContains(concept);\n            // this.conceptDictionary[concept.id] = concept;\n            //    if(contains){\n            //   this.RemoveConcept(concept);\n            //  }\n            BinaryTree.addConceptToTree(concept);\n            BinaryTypeTree.addConceptToTree(concept);\n            // BinaryCharacterTree.addConceptToTree(concept);\n        }\n    }\n    static AddConceptTemporary(concept) {\n        var contains = this.CheckContains(concept);\n        this.conceptDictionary[concept.id] = concept;\n        if (contains) {\n            this.RemoveConcept(concept);\n        }\n        this.conceptsArray.push(concept);\n    }\n    static RemoveConcept(concept) {\n        for (var i = 0; i < this.conceptsArray.length; i++) {\n            if (this.conceptsArray[i].id == concept.id) {\n                this.conceptsArray.splice(i, 1);\n            }\n        }\n        removeFromDatabase(\"concept\", concept.id);\n    }\n    static GetConcept(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var myConcept = CreateDefaultConcept();\n            var node = yield BinaryTree.getNodeFromTree(id);\n            if (node === null || node === void 0 ? void 0 : node.value) {\n                var returnedConcept = node.value;\n                if (returnedConcept) {\n                    myConcept = returnedConcept;\n                    // if(myConcept.count > IndexDbUpdate.MIN_USE_FOR_INDEX_DB){\n                    //     IndexDbUpdate.UpdateConceptIndexDb(myConcept);\n                    // }\n                }\n            }\n            return myConcept;\n        });\n    }\n    static GetConceptByCharacter(characterValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultConcept();\n            var Node = BinaryCharacterTree.getNodeFromTree(characterValue);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptByCharacterUpdated(characterValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultConcept();\n            var Node = BinaryCharacterTree.getNodeFromTree(characterValue);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptByCharacterAndTypeLocal(character_value, typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultConcept();\n            //var Node = await BinaryCharacterTree.getCharacterAndTypeFromTree(character_value,typeId);\n            concept = yield BinaryTypeTree.getTypeVariantsWithCharacterValueNew(character_value, typeId);\n            // if(Node){\n            //     concept =  Node.value;\n            //     console.log(\"found the output\");\n            //     console.log(concept);\n            // }\n            return concept;\n        });\n    }\n    static GetConceptByCharacterAndCategoryLocal(character_value, categoryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultConcept();\n            var Node = yield BinaryCharacterTree.getCharacterAndCategoryFromTree(character_value, categoryId);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptsByTypeId(typeId) {\n        var myConcept;\n        let ConceptList = [];\n        myConcept = null;\n        for (var i = 0; i < this.conceptsArray.length; i++) {\n            if (this.conceptsArray[i].typeId == typeId) {\n                ConceptList.push(this.conceptsArray[i]);\n            }\n        }\n        return ConceptList;\n    }\n    static GetConceptsByTypeIdAndUser(typeId, userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let ConceptList = [];\n            ConceptList = yield BinaryTypeTree.getTypeVariantsFromTreeWithUserIdNew(typeId, userId);\n            return ConceptList;\n        });\n    }\n    static GetBinaryCharacterTree() {\n        return BinaryCharacterTree.characterRoot;\n    }\n    getName() {\n        return this.name;\n    }\n}\nConceptsData.conceptsArray = [];\nConceptsData.NPC = [];\nConceptsData.conceptDictionary = [];\n", "import { CreateDefaultConcept } from \"../Services/CreateDefaultConcept\";\nimport { BaseUrl } from \"./BaseUrl\";\nexport class Connection {\n    constructor(id = 0, ofTheConceptId, toTheConceptId, userId, typeId, orderId, accessId) {\n        this.count = 0;\n        this.isTemp = false;\n        this.toUpdate = false;\n        this.applicationId = BaseUrl.BASE_RANDOMIZER;\n        this.type = CreateDefaultConcept();\n        this.ofConcept = CreateDefaultConcept();\n        this.toConcept = CreateDefaultConcept();\n        this.id = id;\n        this.ofTheConceptId = ofTheConceptId;\n        this.toTheConceptId = toTheConceptId;\n        this.userId = userId;\n        this.typeId = typeId;\n        this.ghostId = id;\n        this.orderId = orderId;\n        this.accessId = accessId;\n        this.entryTimeStamp = new Date();\n        this.terminationDateTime = new Date();\n        this.localSyncTime = new Date();\n        this.typeCharacter = \"\";\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"../IdentifierFlags\";\nimport { ConnectionNode } from \"./ConnectionNode\";\nexport class ConnectionBinaryTree {\n    static addNodeToTree(node) {\n        if (this.connectionroot == null) {\n            this.connectionroot = node;\n            return this.connectionroot;\n        }\n        else {\n            this.connectionroot = this.connectionroot.addNode(node, this.connectionroot, this.connectionroot.height);\n        }\n    }\n    static addConnectionToTree(connection) {\n        let node = new ConnectionNode(connection.id, connection, null, null);\n        this.addNodeToTree(node);\n    }\n    static traverse() {\n        var _a;\n        return (_a = this.connectionroot) === null || _a === void 0 ? void 0 : _a.traverse(this.connectionroot);\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isConnectionLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(ConnectionBinaryTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connectionroot) {\n                this.connectionroot = this.connectionroot.removeNode(this.connectionroot, id);\n            }\n        });\n    }\n    static getNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connectionroot) {\n                let Node = this.connectionroot.getFromNode(id, this.connectionroot);\n                return Node;\n            }\n            return this.connectionroot;\n        });\n    }\n    static getConnectionListFromIds(ids, connectionArray, remainingIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connectionroot) {\n                this.connectionroot.checkIfIdsInNode(this.connectionroot, ids, connectionArray, remainingIds);\n            }\n        });\n    }\n}\nConnectionBinaryTree.connectionroot = null;\n", "export class ConnectionNode {\n    constructor(key, value, leftNode, rightNode) {\n        this.variants = [];\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n        this.currentNode = null;\n    }\n    addCurrentNode(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        if (passedNode.value.typeId != node.value.typeId) {\n            node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        }\n        return node;\n    }\n    addCurrentNodeType(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        let contains = false;\n        if (passedNode.value.id == node.value.id) {\n            contains = true;\n        }\n        for (let i = 0; i < node.variants.length; i++) {\n            if (node.variants[i].value.id == passedNode.value.id) {\n                contains = true;\n            }\n        }\n        if (!contains) {\n            node.variants.push(passedNode);\n        }\n        //node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        return node;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        let LeftNode = node.leftNode;\n        let RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        // else if (node.key == passedNode.key && node.key != \"\"){\n        //     node.currentNode = passedNode;\n        // }\n        else {\n            return node;\n        }\n        node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        let balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    return this.rightRotate(node);\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    return this.rightRotate(node);\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    return this.leftRotate(node);\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    return this.leftRotate(node);\n                }\n            }\n        }\n        return node;\n    }\n    addTypeNode(passedNode, node, height) {\n        let debugFlag = false;\n        if (passedNode.value.typeId != 0) {\n            // if(passedNode.value.characterValue == \"Default\"){\n            //     console.log(\"default here\");\n            //     debugFlag = true;\n            // }\n            if (node == null) {\n                if (debugFlag) {\n                    console.log(\"equal here\", node);\n                }\n                node = passedNode;\n                return node;\n            }\n            let LeftNode = node.leftNode;\n            let RightNode = node.rightNode;\n            if (node.key > passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"left  here\", node);\n                }\n                node.leftNode = this.addTypeNode(passedNode, LeftNode, height);\n            }\n            else if (node.key < passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"right here\", node, RightNode);\n                }\n                node.rightNode = this.addTypeNode(passedNode, RightNode, height);\n            }\n            else {\n                if (debugFlag) {\n                    console.log(\"else here\", node, passedNode);\n                }\n                if (node.key == passedNode.key && node.key != 0) {\n                    node.addCurrentNodeType(passedNode, node);\n                }\n                return node;\n            }\n            node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n            if (debugFlag) {\n                console.log(\"height here\", node.height);\n            }\n            let balancingFactor = this.getBalanceFactor(node);\n            if (debugFlag) {\n                console.log(\"balancingFactor here\", balancingFactor);\n            }\n            if (balancingFactor > 1) {\n                if (node.leftNode) {\n                    if (passedNode.key < node.leftNode.key) {\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 1 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key > node.leftNode.key) {\n                        node.leftNode = this.leftRotate(node.leftNode);\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 2 \", returner);\n                        }\n                        return returner;\n                    }\n                }\n            }\n            if (balancingFactor < -1) {\n                if (node.rightNode) {\n                    if (passedNode.key > node.rightNode.key) {\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 3 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key < node.rightNode.key) {\n                        node.rightNode = this.rightRotate(node.rightNode);\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here4 \", returner, node);\n                        }\n                        return returner;\n                    }\n                }\n            }\n        }\n        else {\n            if (debugFlag) {\n                console.log(\"what here\", node);\n            }\n        }\n        if (debugFlag) {\n            console.log(\"returning here 6\", node);\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                if (node.value.count) {\n                    node.value.count++;\n                }\n                else {\n                    node.value.count = 1;\n                }\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getCharacterFromNode(value, node) {\n        if (node) {\n            if (value == node.key) {\n                return node;\n            }\n            else if (value < node.key) {\n                return this.getCharacterFromNode(value, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getCharacterFromNode(value, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    checkIfIdsInNode(node, ids, connectionArray, remainingIds) {\n        if (node) {\n            if (ids.includes(node.key)) {\n                connectionArray.push(node.value);\n                //remainingIds[node.key] = true;\n                let index = ids.indexOf(node.key);\n                ids.splice(index, 1);\n            }\n            if (node.leftNode) {\n                this.checkIfIdsInNode(node.leftNode, ids, connectionArray, remainingIds);\n            }\n            if (node.rightNode) {\n                this.checkIfIdsInNode(node.rightNode, ids, connectionArray, remainingIds);\n            }\n        }\n    }\n    traverse(node) {\n        let count = 0;\n        if (node) {\n            count = count + 1;\n            if (node === null || node === void 0 ? void 0 : node.leftNode) {\n                count += this.traverse(node.leftNode);\n            }\n            if (node.rightNode) {\n                count += this.traverse(node.rightNode);\n            }\n        }\n        return count;\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        // if(passedNode.variants.length > 0){\n        //     if(passedNode.value.id == id ){\n        //     }\n        //     let newNode = passedNode.variants[0];\n        //     if(newNode){\n        //         passedNode.value = newNode.value;\n        //         passedNode.key = newNode.key;\n        //         passedNode.currentNode = newNode.currentNode;\n        //         return passedNode;\n        //     }\n        // }\n        /**\n         * This is dispatched incase the connection is deleted and others are listening\n         */\n        let event = new Event(`${passedNode.value.ofTheConceptId}`);\n        dispatchEvent(event);\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    removeNodeWithVariants(passedNode, typeIdentifier, conceptId) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > typeIdentifier) {\n            passedNode.leftNode = this.removeNodeWithVariants(passedNode.leftNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        else if (passedNode.key < typeIdentifier) {\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        if (passedNode.variants.length > 0) {\n            //condition if the main node is equal to the value\n            if (passedNode.value.id == conceptId) {\n                let newNode = passedNode.variants[0];\n                if (newNode) {\n                    passedNode.value = newNode.value;\n                    passedNode.key = newNode.key;\n                    passedNode.currentNode = newNode.currentNode;\n                    passedNode.variants.splice(0, 1);\n                    return passedNode;\n                }\n            }\n            else {\n                // in the condition that the main node is not equal to the checking value \n                for (let i = 0; i < passedNode.variants.length; i++) {\n                    if (conceptId == passedNode.variants[i].value.id) {\n                        passedNode.variants.splice(i, 1);\n                        return passedNode;\n                    }\n                }\n            }\n        }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, immediateSuccessor.key, conceptId);\n            return passedNode;\n        }\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n", "import { NodePrimitive } from \"./NodePrimitive\";\nexport class ConnectionOfNode extends NodePrimitive {\n    constructor(key, value, leftNode, rightNode) {\n        super(key, value, leftNode, rightNode);\n        this.key = \"\";\n        this.value = [];\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        let LeftNode = node.leftNode;\n        let RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        else {\n            return node;\n        }\n        node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        let balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    let returner = this.rightRotate(node);\n                    return returner;\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    let returner = this.rightRotate(node);\n                    return returner;\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    let returner = this.leftRotate(node);\n                    return returner;\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    let returner = this.leftRotate(node);\n                    return returner;\n                }\n            }\n        }\n        return node;\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionOfNode } from \"./ConnectionOfNode\";\n/**\n * This is a binary tree that is used to store the reference to the main connection of the concept.\n */\nexport class ConnectionOfTheTree {\n    static CreateCompositionKey(ofTheConceptId, typeId) {\n        return ofTheConceptId;\n    }\n    static GetConnectionByOfTheConceptAndTypeId(ofTheConceptId, typeId) {\n        let key = this.CreateCompositionKey(ofTheConceptId, typeId);\n        if (this.node) {\n            let existingNode = this.node.getFromNode(key, this.node);\n            if (existingNode) {\n                return existingNode.value;\n            }\n        }\n        return null;\n    }\n    /**\n     * This function lets you add a connection by composite key with of the concept id and type id.\n     * This function checks if the connection already exists and then updates in the case that it does not\n     * If the connection of the concept id and type id combination is encountered first time then a node is created.\n     * @param connection connection that needs to be added.\n     */\n    static addConnection(connection) {\n        if (connection.id > 0) {\n            let key = this.CreateCompositionKey(connection.ofTheConceptId, connection.typeId);\n            if (this.node) {\n                let event = new Event(`${key}`);\n                // console.log(\"dispatched the of the concecpt event\", event);\n                dispatchEvent(event);\n                let existingNode = this.node.getFromNode(key, this.node);\n                if (existingNode) {\n                    let connectionList = existingNode === null || existingNode === void 0 ? void 0 : existingNode.value;\n                    if (connectionList.length == 0) {\n                        existingNode.value = [];\n                    }\n                    if (!connectionList.includes(connection.id)) {\n                        connectionList.push(connection.id);\n                    }\n                }\n                else {\n                    let list = [];\n                    list.push(connection.id);\n                    let connectionNode = new ConnectionOfNode(key, list, null, null);\n                    this.addNodeToTree(connectionNode);\n                }\n            }\n            else {\n                let list = [];\n                list.push(connection.id);\n                let connectionNode = new ConnectionOfNode(key, list, null, null);\n                this.addNodeToTree(connectionNode);\n            }\n        }\n        else {\n            console.log(\"cannot insert key id with  n 0 to the connection tree\", connection);\n        }\n    }\n    /**\n     * This is a function to add the connectionNode to the existing tree\n     * @param connectionOfNode This is the node that needs to be added to the tree.\n     * @returns ConnectionOfNode\n     */\n    static addNodeToTree(connectionOfNode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.node == null) {\n                this.node = connectionOfNode;\n                return this.node;\n            }\n            else {\n                this.node = this.node.addNode(connectionOfNode, this.node, this.node.height);\n            }\n            return this.node;\n        });\n    }\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.node) {\n                this.node = this.node.removeNode(this.node, id);\n            }\n        });\n    }\n}\nConnectionOfTheTree.node = null;\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"../IdentifierFlags\";\nimport { ConnectionNode } from \"./ConnectionNode\";\nexport class ConnectionTypeTree {\n    static addNodeToTree(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connectionTypeRoot == null) {\n                this.connectionTypeRoot = node;\n                return this.connectionTypeRoot;\n            }\n            else {\n                this.connectionTypeRoot = this.connectionTypeRoot.addTypeNode(node, this.connectionTypeRoot, this.connectionTypeRoot.height);\n            }\n            return this.connectionTypeRoot;\n        });\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isConnectionTypeLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(ConnectionTypeTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static addConnectionToTree(connection) {\n        if (connection.typeId != 0) {\n            let node = new ConnectionNode(connection.typeId, connection, null, null);\n            this.addNodeToTree(node);\n        }\n    }\n    static removeTypeConcept(typeId, id) {\n        if (this.connectionTypeRoot) {\n            this.connectionTypeRoot = this.connectionTypeRoot.removeNodeWithVariants(this.connectionTypeRoot, typeId, id);\n        }\n    }\n    static getNodeFromTree(id) {\n        if (this.connectionTypeRoot) {\n            let Node = this.connectionTypeRoot.getFromNode(id, this.connectionTypeRoot);\n            return Node;\n        }\n        return this.connectionTypeRoot;\n    }\n    static getTypeVariantsFromTree(typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let connection = [];\n            // try{\n            //     let data = await this.waitForDataToLoad();\n            // }\n            // catch(exception){\n            //     return connection;\n            // }\n            let Node = this.getNodeFromTree(typeId);\n            if (Node) {\n                connection.push(Node === null || Node === void 0 ? void 0 : Node.value);\n                for (let i = 0; i < Node.variants.length; i++) {\n                    connection.push(Node.variants[i].value);\n                }\n                return connection;\n            }\n        });\n    }\n    static getTypeVariantsFromTreeWithUserId(typeId, userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concepts = [];\n            var Node = this.getNodeFromTree(typeId);\n            if (Node) {\n                if (Node.value.userId == userId) {\n                    concepts.push(Node === null || Node === void 0 ? void 0 : Node.value);\n                }\n                for (let i = 0; i < Node.variants.length; i++) {\n                    if (Node.variants[i].value.userId == userId) {\n                        concepts.push(Node.variants[i].value);\n                    }\n                }\n            }\n            return concepts;\n        });\n    }\n}\nConnectionTypeTree.connectionTypeRoot = null;\n", "export class NodePrimitive {\n    constructor(key, value, leftNode, rightNode) {\n        this.key = \"\";\n        this.value = [];\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        // if(passedNode.variants.length > 0){\n        //     if(passedNode.value.id == id ){\n        //     }\n        //     var newNode = passedNode.variants[0];\n        //     if(newNode){\n        //         passedNode.value = newNode.value;\n        //         passedNode.key = newNode.key;\n        //         passedNode.currentNode = newNode.currentNode;\n        //         return passedNode;\n        //     }\n        // }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { removeFromDatabase, UpdateToDatabase } from \"../Database/indexeddb\";\nimport { Connection } from \"./Connection\";\nimport { ConnectionBinaryTree } from \"./ConnectionBinaryTree/ConnectionBinaryTree\";\nimport { ConnectionOfTheTree } from \"./ConnectionBinaryTree/ConnectionOfTheTree\";\nimport { ConnectionTypeTree } from \"./ConnectionBinaryTree/ConnectionTypeTree\";\nexport class ConnectionData {\n    constructor() {\n        this.name = \"Connection Array\";\n    }\n    static CheckContains(connection) {\n        let contains = false;\n        for (let i = 0; i < this.connectionArray.length; i++) {\n            if (this.connectionArray[i].id == connection.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static AddConnectionToStorage(connection) {\n        UpdateToDatabase(\"connection\", connection);\n    }\n    static AddConnection(connection) {\n        //    var contains = this.CheckContains(connection);\n        //     if(contains){\n        //         this.RemoveConnection(connection);\n        //     }\n        //     if(connection.id != 0 || connection.isTemp){\n        //         storeToDatabase(\"connection\",connection);\n        //     }\n        //     this.connectionArray.push(connection);\n        // if(!connection.isTemp){\n        //UpdateToDatabase(\"connection\", connection);\n        ConnectionBinaryTree.addConnectionToTree(connection);\n        ConnectionTypeTree.addConnectionToTree(connection);\n        ConnectionOfTheTree.addConnection(connection);\n    }\n    static AddConnectionToMemory(connection) {\n        if (!connection.isTemp) {\n            ConnectionBinaryTree.addConnectionToTree(connection);\n            ConnectionTypeTree.addConnectionToTree(connection);\n            ConnectionOfTheTree.addConnection(connection);\n        }\n    }\n    static AddToDictionary(connection) {\n        this.connectionDictionary[connection.id] = connection;\n    }\n    static RemoveConnection(connection) {\n        //    for(var i=0; i<this.connectionArray.length; i++){\n        //     if(this.connectionArray[i].id == connection.id){\n        //         this.connectionArray.splice(i, 1);\n        //     }\n        //    }\n        if (connection.id != 0) {\n            removeFromDatabase(\"connection\", connection.id);\n            ConnectionBinaryTree.removeNodeFromTree(connection.id);\n            ConnectionTypeTree.removeTypeConcept(connection.typeId, connection.id);\n            ConnectionOfTheTree.removeNodeFromTree(connection.id);\n        }\n    }\n    static GetConnectionTypeOfTree() {\n        ConnectionOfTheTree.node;\n    }\n    static GetConnectionByOfTheConceptAndType(ofTheConceptId, typeId) {\n        let connections = ConnectionOfTheTree.GetConnectionByOfTheConceptAndTypeId(ofTheConceptId, typeId);\n        if (connections) {\n            return connections;\n        }\n        return [];\n    }\n    static GetConnectionTree() {\n        return ConnectionBinaryTree.connectionroot;\n    }\n    static GetConnectionTypeTree() {\n        return ConnectionTypeTree.connectionTypeRoot;\n    }\n    static GetConnectionBulkData(ids, connectionArray, remainingIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield ConnectionBinaryTree.getConnectionListFromIds(ids, connectionArray, remainingIds);\n        });\n    }\n    static GetConnection(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //    var  myConcept: Connection|null;\n            //    myConcept = null;\n            //     for(var i=0; i<this.connectionArray.length; i++){\n            //         if(this.connectionArray[i].id == id){\n            //             myConcept = this.connectionArray[i];\n            //         }\n            //     }\n            //     return myConcept;\n            let myConnection = new Connection(0, 0, 0, 0, 0, 0, 0);\n            let node = yield ConnectionBinaryTree.getNodeFromTree(id);\n            if (node === null || node === void 0 ? void 0 : node.value) {\n                let returnedConcept = node.value;\n                if (returnedConcept) {\n                    myConnection = returnedConcept;\n                    //if(myConnection.count > IndexDbUpdate.MIN_USE_FOR_INDEX_DB){\n                    // IndexDbUpdate.UpdateConnectionIndexDb(myConnection);\n                    //}\n                }\n            }\n            // if(myConcept.id == 0 || myConcept == null){\n            //     for(var i=0; i<this.conceptsArray.length; i++){\n            //         if(this.conceptsArray[i].id == id){\n            //             myConcept = this.conceptsArray[i];\n            //         }\n            //     }\n            // }\n            return myConnection;\n        });\n    }\n    static GetConnectionsOfCompositionLocal(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let connections = [];\n            let node = yield ConnectionTypeTree.getNodeFromTree(id);\n            if (node === null || node === void 0 ? void 0 : node.value) {\n                let returnedConnection = node.value;\n                if (returnedConnection) {\n                    let myConnection = returnedConnection;\n                    connections.push(myConnection);\n                    for (let i = 0; i < node.variants.length; i++) {\n                        connections.push(node.variants[i].value);\n                    }\n                }\n            }\n            // if(myConcept.id == 0 || myConcept == null){\n            //     for(var i=0; i<this.conceptsArray.length; i++){\n            //         if(this.conceptsArray[i].id == id){\n            //             myConcept = this.conceptsArray[i];\n            //         }\n            //     }\n            // }\n            return connections;\n        });\n    }\n    static GetConnectionsOfConcept(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let connectionIds = [];\n            let connections = [];\n            connectionIds = ConnectionData.GetConnectionByOfTheConceptAndType(id, id);\n            for (let i = 0; i < connectionIds.length; i++) {\n                let conn = yield ConnectionBinaryTree.getNodeFromTree(connectionIds[i]);\n                if (conn) {\n                    connections.push(conn.value);\n                }\n            }\n            return connections;\n        });\n    }\n    getName() {\n        return this.name;\n    }\n}\nConnectionData.connectionArray = [];\nConnectionData.connectionDictionary = [];\n", "export class FilterSearch {\n    constructor() {\n        this.type = \"\";\n        this.search = \"\";\n        this.logicoperator = \"=\";\n        this.index = 0;\n        this.composition = true;\n    }\n}\n", "export class IdentifierFlags {\n}\nIdentifierFlags.isTypeLoaded = false;\nIdentifierFlags.isCharacterLoaded = false;\nIdentifierFlags.isDataLoaded = false;\nIdentifierFlags.isLocalDataLoaded = false;\nIdentifierFlags.isLocalCharacterLoaded = false;\nIdentifierFlags.isLocalTypeLoaded = false;\nIdentifierFlags.isConnectionLoaded = false;\nIdentifierFlags.isConnectionTypeLoaded = false;\nIdentifierFlags.isLocalConnectionLoaded = false;\n", "import { BaseUrl } from \"../BaseUrl\";\nexport class LConcept {\n    constructor(id, userId, typeId, categoryId, accessId, characterValue, typeCharacter, isNew = false, entryTimeStamp, updatedTimeStamp, referentId) {\n        this.structureType = \"lconcept\";\n        this.isComposition = false;\n        this.isTemp = false;\n        this.isSynced = false;\n        this.applicationId = BaseUrl.BASE_RANDOMIZER;\n        this.id = id;\n        this.userId = userId;\n        this.typeId = typeId;\n        this.ghostId = id;\n        this.categoryId = categoryId;\n        this.characterValue = characterValue;\n        this.accessId = accessId;\n        this.type = null;\n        this.isNew = isNew;\n        this.typeCharacter = typeCharacter;\n        this.entryTimeStamp = entryTimeStamp;\n        this.updatedTimeStamp = updatedTimeStamp;\n        this.isSynced = false;\n        this.referentId = referentId;\n        // ConceptsData.AddConcept(this);\n    }\n    getType() {\n        console.log(this.typeId);\n    }\n}\n", "import { CreateDefaultConcept } from \"../../app\";\nimport { BaseUrl } from \"../BaseUrl\";\nexport class LConnection {\n    constructor(id, ofTheConceptId, toTheConceptId, typeId, orderId, accessId) {\n        this.isTemp = false;\n        this.applicationId = BaseUrl.BASE_RANDOMIZER;\n        this.type = CreateDefaultConcept();\n        this.id = id;\n        this.ofTheConceptId = ofTheConceptId;\n        this.toTheConceptId = toTheConceptId;\n        this.typeId = typeId;\n        this.ghostId = id;\n        this.orderId = orderId;\n        this.typeCharacter = \"\";\n        this.accessId = accessId;\n        this.typeCharacter = \"\";\n        this.entryTimeStamp = new Date();\n        this.terminationDateTime = new Date();\n        this.localSyncTime = new Date();\n    }\n}\n", "export class LNode {\n    constructor(key, value, leftNode, rightNode) {\n        this.variants = [];\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n        this.currentNode = null;\n    }\n    addCurrentNode(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        if (passedNode.value.typeId != node.value.typeId) {\n            node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        }\n        return node;\n    }\n    addCurrentNodeType(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        var contains = false;\n        for (let i = 0; i < node.variants.length; i++) {\n            if (node.variants[i].value.id == passedNode.value.id) {\n                contains = true;\n            }\n        }\n        if (!contains) {\n            node.variants.push(passedNode);\n        }\n        //node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        return node;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        var LeftNode = node.leftNode;\n        var RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        // else if (node.key == passedNode.key && node.key != \"\"){\n        //     node.currentNode = passedNode;\n        // }\n        else {\n            return node;\n        }\n        node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        let balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    return this.rightRotate(node);\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    return this.rightRotate(node);\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    return this.leftRotate(node);\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    return this.leftRotate(node);\n                }\n            }\n        }\n        return node;\n    }\n    addCharacterNode(passedNode, node, height) {\n        var debugFlag = false;\n        if (passedNode.value.characterValue != \"\") {\n            // if(passedNode.value.characterValue == \"Default\"){\n            //     console.log(\"default here\");\n            //     debugFlag = true;\n            // }\n            if (node == null) {\n                if (debugFlag) {\n                    console.log(\"equal here\", node);\n                }\n                node = passedNode;\n                return node;\n            }\n            // if (node.key == passedNode.key && node.key != \"\" ){\n            //     if(passedNode.value.characterValue == \"Default\"){\n            //         console.log(\"equal\");\n            //     }\n            //     node.currentNode = passedNode;\n            //     return node;\n            // }\n            var LeftNode = node.leftNode;\n            var RightNode = node.rightNode;\n            if (node.key > passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"left  here\", node);\n                }\n                node.leftNode = this.addCharacterNode(passedNode, LeftNode, height);\n            }\n            else if (node.key < passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"right here\", node, RightNode);\n                }\n                node.rightNode = this.addCharacterNode(passedNode, RightNode, height);\n            }\n            // else if (node.key == passedNode.key && node.key != \"\"){\n            //     node.currentNode = passedNode;\n            // }\n            else {\n                if (debugFlag) {\n                    console.log(\"else here\", node, passedNode);\n                }\n                if (node.key == passedNode.key && node.key != \"\" && node.value.id != passedNode.value.id) {\n                    // node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n                    node.addCurrentNodeType(passedNode, node);\n                }\n                return node;\n            }\n            node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n            if (debugFlag) {\n                console.log(\"height here\", node.height);\n            }\n            let balancingFactor = this.getBalanceFactor(node);\n            if (debugFlag) {\n                console.log(\"balancingFactor here\", balancingFactor);\n            }\n            if (balancingFactor > 1) {\n                if (node.leftNode) {\n                    if (passedNode.key < node.leftNode.key) {\n                        var returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 1 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key > node.leftNode.key) {\n                        node.leftNode = this.leftRotate(node.leftNode);\n                        var returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 2 \", returner);\n                        }\n                        return returner;\n                    }\n                }\n            }\n            if (balancingFactor < -1) {\n                if (node.rightNode) {\n                    if (passedNode.key > node.rightNode.key) {\n                        var returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 3 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key < node.rightNode.key) {\n                        node.rightNode = this.rightRotate(node.rightNode);\n                        var returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here4 \", returner, node);\n                        }\n                        return returner;\n                    }\n                }\n            }\n        }\n        else {\n            if (debugFlag) {\n                console.log(\"what here\", node);\n            }\n        }\n        if (debugFlag) {\n            console.log(\"returning here 6\", node);\n        }\n        return node;\n    }\n    addTypeNode(passedNode, node, height) {\n        var debugFlag = false;\n        if (passedNode.value.typeId != 0) {\n            // if(passedNode.value.characterValue == \"Default\"){\n            //     console.log(\"default here\");\n            //     debugFlag = true;\n            // }\n            if (node == null) {\n                if (debugFlag) {\n                    console.log(\"equal here\", node);\n                }\n                node = passedNode;\n                return node;\n            }\n            var LeftNode = node.leftNode;\n            var RightNode = node.rightNode;\n            if (node.key > passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"left  here\", node);\n                }\n                node.leftNode = this.addTypeNode(passedNode, LeftNode, height);\n            }\n            else if (node.key < passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"right here\", node, RightNode);\n                }\n                node.rightNode = this.addTypeNode(passedNode, RightNode, height);\n            }\n            else {\n                if (debugFlag) {\n                    console.log(\"else here\", node, passedNode);\n                }\n                if (node.key == passedNode.key && node.key != 0 && node.value.id != passedNode.value.id) {\n                    node.addCurrentNodeType(passedNode, node);\n                }\n                return node;\n            }\n            node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n            if (debugFlag) {\n                console.log(\"height here\", node.height);\n            }\n            let balancingFactor = this.getBalanceFactor(node);\n            if (debugFlag) {\n                console.log(\"balancingFactor here\", balancingFactor);\n            }\n            if (balancingFactor > 1) {\n                if (node.leftNode) {\n                    if (passedNode.key < node.leftNode.key) {\n                        var returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 1 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key > node.leftNode.key) {\n                        node.leftNode = this.leftRotate(node.leftNode);\n                        var returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 2 \", returner);\n                        }\n                        return returner;\n                    }\n                }\n            }\n            if (balancingFactor < -1) {\n                if (node.rightNode) {\n                    if (passedNode.key > node.rightNode.key) {\n                        var returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 3 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key < node.rightNode.key) {\n                        node.rightNode = this.rightRotate(node.rightNode);\n                        var returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here4 \", returner, node);\n                        }\n                        return returner;\n                    }\n                }\n            }\n        }\n        else {\n            if (debugFlag) {\n                console.log(\"what here\", node);\n            }\n        }\n        if (debugFlag) {\n            console.log(\"returning here 6\", node);\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    updateNodeSyncStatus(id, value, node) {\n        if (node) {\n            if (id == node.key) {\n                let lconcept = node.value;\n                lconcept.isSynced = value;\n                node.value = lconcept;\n                return node;\n            }\n            else if (id < node.key) {\n                return this.updateNodeSyncStatus(id, value, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.updateNodeSyncStatus(id, value, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getCharacterFromNode(value, node) {\n        if (node) {\n            if (value == node.key) {\n                return node;\n            }\n            else if (value < node.key) {\n                return this.getCharacterFromNode(value, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getCharacterFromNode(value, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getFromNodeWithCharacterAndType(value, typeId, node) {\n        value = `${value}`;\n        if (node) {\n            if (value == node.key) {\n                if (value == node.value.characterValue && typeId == node.value.typeId) {\n                    return node;\n                }\n                else {\n                    for (let i = 0; i < node.variants.length; i++) {\n                        if (node.variants[i].value.typeId == typeId) {\n                            return node.variants[i];\n                        }\n                    }\n                    // return this.getFromNodeWithCharacterAndType(value, typeId, node.currentNode);\n                }\n            }\n            else if (value < node.key) {\n                return this.getFromNodeWithCharacterAndType(value, typeId, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getFromNodeWithCharacterAndType(value, typeId, node.rightNode);\n            }\n            return null;\n        }\n        return node;\n    }\n    getFromNodeWithCharacterAndCategory(value, categoryId, node) {\n        value = `${value}`;\n        if (node) {\n            if (value == node.key) {\n                if (value == node.value.characterValue && categoryId == node.value.categoryId) {\n                    return node;\n                }\n                else {\n                    for (let i = 0; i < node.variants.length; i++) {\n                        if (node.variants[i].value.categoryId == categoryId) {\n                            return node.variants[i];\n                        }\n                    }\n                    // return this.getFromNodeWithCharacterAndType(value, typeId, node.currentNode);\n                }\n            }\n            else if (value < node.key) {\n                return this.getFromNodeWithCharacterAndCategory(value, categoryId, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getFromNodeWithCharacterAndCategory(value, categoryId, node.rightNode);\n            }\n            return null;\n        }\n        return node;\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        // if(passedNode.variants.length > 0){\n        //     if(passedNode.value.id == id ){\n        //     }\n        //     var newNode = passedNode.variants[0];\n        //     if(newNode){\n        //         passedNode.value = newNode.value;\n        //         passedNode.key = newNode.key;\n        //         passedNode.currentNode = newNode.currentNode;\n        //         return passedNode;\n        //     }\n        // }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            var immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    removeNodeWithVariants(passedNode, typeIdentifier, conceptId) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > typeIdentifier) {\n            passedNode.leftNode = this.removeNodeWithVariants(passedNode.leftNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        else if (passedNode.key < typeIdentifier) {\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        if (passedNode.variants.length > 0) {\n            //condition if the main node is equal to the value\n            if (passedNode.value.id == conceptId) {\n                var newNode = passedNode.variants[0];\n                if (newNode) {\n                    passedNode.value = newNode.value;\n                    passedNode.key = newNode.key;\n                    passedNode.currentNode = newNode.currentNode;\n                    passedNode.variants.splice(0, 1);\n                    return passedNode;\n                }\n            }\n            else {\n                // in the condition that the main node is not equal to the checking value \n                for (let i = 0; i < passedNode.variants.length; i++) {\n                    if (conceptId == passedNode.variants[i].value.id) {\n                        passedNode.variants.splice(i, 1);\n                        return passedNode;\n                    }\n                }\n            }\n        }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            var immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, immediateSuccessor.key, conceptId);\n            return passedNode;\n        }\n    }\n    countNodeBelow(root) {\n        if (root == null) {\n            return 0;\n        }\n        //recursive call to left child and right child and\n        // add the result of these with 1 ( 1 for counting the root)\n        return 1 + this.countNodeBelow(root.leftNode) + this.countNodeBelow(root.rightNode);\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"./../IdentifierFlags\";\nimport { LNode } from \"./../Local/LNode\";\nexport class LocalBinaryCharacterTree {\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isLocalCharacterLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(LocalBinaryCharacterTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static addNodeToTree(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.LocalCharacterRoot == null) {\n                this.LocalCharacterRoot = node;\n                return this.LocalCharacterRoot;\n            }\n            else {\n                this.LocalCharacterRoot = this.LocalCharacterRoot.addCharacterNode(node, this.LocalCharacterRoot, this.LocalCharacterRoot.height);\n            }\n            return this.LocalCharacterRoot;\n        });\n    }\n    static addConceptToTree(concept) {\n        if (concept.characterValue != \"\") {\n            var node = new LNode(concept.characterValue, concept, null, null);\n            this.addNodeToTree(node);\n        }\n    }\n    static getNodeFromTree(value) {\n        if (this.LocalCharacterRoot) {\n            var Node = this.LocalCharacterRoot.getCharacterFromNode(value, this.LocalCharacterRoot);\n            return Node;\n        }\n        return this.LocalCharacterRoot;\n    }\n    static getCharacterAndTypeFromTree(value, typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return null;\n            }\n            if (this.LocalCharacterRoot) {\n                var Node = this.LocalCharacterRoot.getFromNodeWithCharacterAndType(value, typeId, this.LocalCharacterRoot);\n                return Node;\n            }\n            return this.LocalCharacterRoot;\n        });\n    }\n    static getCharacterAndCategoryFromTree(value, categoryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return null;\n            }\n            if (this.LocalCharacterRoot) {\n                var Node = this.LocalCharacterRoot.getFromNodeWithCharacterAndCategory(value, categoryId, this.LocalCharacterRoot);\n                return Node;\n            }\n            return this.LocalCharacterRoot;\n        });\n    }\n    static removeConceptType(character, id) {\n        if (this.LocalCharacterRoot) {\n            this.LocalCharacterRoot = this.LocalCharacterRoot.removeNodeWithVariants(this.LocalCharacterRoot, character, id);\n        }\n    }\n}\nLocalBinaryCharacterTree.LocalCharacterRoot = null;\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"../IdentifierFlags\";\nimport { LNode } from \"./../Local/LNode\";\nexport class LocalBinaryTree {\n    static addNodeToTree(node) {\n        if (this.root == null) {\n            this.root = node;\n            return this.root;\n        }\n        else {\n            this.root = this.root.addNode(node, this.root, this.root.height);\n        }\n    }\n    static addConceptToTree(concept) {\n        var node = new LNode(concept.id, concept, null, null);\n        var characterNode = new LNode(concept.characterValue, concept, null, null);\n        this.addNodeToTree(node);\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isLocalDataLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(LocalBinaryTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static getNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return null;\n            }\n            if (this.root) {\n                var Node = this.root.getFromNode(id, this.root);\n                return Node;\n            }\n            return null;\n        });\n    }\n    static getCharacterAndTypeFromTree(value, typeId) {\n        if (this.root) {\n            var Node = this.root.getFromNodeWithCharacterAndType(value, typeId, this.root);\n            return Node;\n        }\n        return this.root;\n    }\n    static updateSyncStatus(id) {\n        if (this.root) {\n            var Node = this.root.updateNodeSyncStatus(id, true, this.root);\n            return Node;\n        }\n        return this.root;\n    }\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                this.root = this.root.removeNode(this.root, id);\n            }\n        });\n    }\n}\nLocalBinaryTree.root = null;\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"./../IdentifierFlags\";\nimport { LNode } from \"./LNode\";\nexport class LocalBinaryTypeTree {\n    static addNodeToTree(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.LocalTypeRoot == null) {\n                this.LocalTypeRoot = node;\n                return this.LocalTypeRoot;\n            }\n            else {\n                this.LocalTypeRoot = this.LocalTypeRoot.addTypeNode(node, this.LocalTypeRoot, this.LocalTypeRoot.height);\n            }\n            return this.LocalTypeRoot;\n        });\n    }\n    static addConceptToTree(concept) {\n        if (concept.typeId != 0) {\n            var node = new LNode(concept.typeId, concept, null, null);\n            this.addNodeToTree(node);\n        }\n    }\n    static removeConceptType(typeId, id) {\n        if (this.LocalTypeRoot) {\n            this.LocalTypeRoot = this.LocalTypeRoot.removeNodeWithVariants(this.LocalTypeRoot, typeId, id);\n        }\n    }\n    static getNodeFromTree(id) {\n        if (this.LocalTypeRoot) {\n            var Node = this.LocalTypeRoot.getFromNode(id, this.LocalTypeRoot);\n            return Node;\n        }\n        return this.LocalTypeRoot;\n    }\n    static getTypeVariantsFromTree(typeId) {\n        var Node = this.getNodeFromTree(typeId);\n        var concepts = [];\n        if (Node) {\n            concepts.push(Node === null || Node === void 0 ? void 0 : Node.value);\n            for (let i = 0; i < Node.variants.length; i++) {\n                concepts.push(Node.variants[i].value);\n            }\n            return concepts;\n        }\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isLocalTypeLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(LocalBinaryTypeTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static getTypeVariantsFromTreeWithUserId(typeId, userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concepts = [];\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return concepts;\n            }\n            var Node = this.getNodeFromTree(typeId);\n            if (Node) {\n                console.log(\"this is the node to type\", Node);\n                if (Node.value.userId == userId || Node.value.userId == 999) {\n                    concepts.push(Node === null || Node === void 0 ? void 0 : Node.value);\n                }\n                for (let i = 0; i < Node.variants.length; i++) {\n                    if (Node.variants[i].value.userId == userId || Node.value.userId == 999) {\n                        concepts.push(Node.variants[i].value);\n                    }\n                }\n            }\n            return concepts;\n        });\n    }\n}\nLocalBinaryTypeTree.LocalTypeRoot = null;\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { removeFromDatabase, UpdateToDatabase } from \"../../Database/indexdblocal\";\nimport { LocalBinaryTree } from \"./LocalBinaryTree\";\nimport { LocalBinaryCharacterTree } from \"./LocalBinaryCharacterTree\";\nimport { LocalBinaryTypeTree } from \"./LocalBinaryTypeTree\";\nimport { CreateDefaultLConcept } from \"../../Services/Local/CreateDefaultLConcept\";\nimport { ConceptsData } from \"../ConceptData\";\nimport { LocalGhostIdTree } from \"./LocalGhostIdTree\";\nexport class LocalConceptsData {\n    constructor() {\n        this.name = \"conceptsArray\";\n    }\n    static AddConcept(concept) {\n        if (concept.id != 0) {\n            UpdateToDatabase(\"localconcept\", concept);\n            LocalBinaryTree.addConceptToTree(concept);\n            LocalBinaryCharacterTree.addConceptToTree(concept);\n            LocalBinaryTypeTree.addConceptToTree(concept);\n            this.localconceptsArray.push(concept);\n        }\n    }\n    static AddPermanentConcept(concept) {\n        if (concept.id != 0) {\n            LocalBinaryTree.removeNodeFromTree(concept.ghostId);\n            LocalBinaryCharacterTree.removeConceptType(concept.characterValue, concept.ghostId);\n            LocalBinaryTypeTree.removeConceptType(concept.typeId, concept.ghostId);\n            LocalGhostIdTree.addConceptToTree(concept);\n            let removeData = removeFromDatabase(\"localconcept\", concept.ghostId);\n            ConceptsData.AddConcept(concept);\n        }\n    }\n    static RemoveConcept(concept) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (concept.id != 0) {\n                    LocalBinaryTree.removeNodeFromTree(concept.ghostId);\n                    LocalBinaryCharacterTree.removeConceptType(concept.characterValue, concept.ghostId);\n                    LocalBinaryTypeTree.removeConceptType(concept.typeId, concept.ghostId);\n                    yield removeFromDatabase(\"localconcept\", concept.ghostId);\n                }\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n    }\n    static AddConceptToMemory(concept) {\n        if (concept.id != 0) {\n            LocalBinaryTree.addConceptToTree(concept);\n            LocalBinaryCharacterTree.addConceptToTree(concept);\n            LocalBinaryTypeTree.addConceptToTree(concept);\n        }\n    }\n    static GetConcept(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var myConcept = CreateDefaultLConcept();\n            var node = yield LocalBinaryTree.getNodeFromTree(id);\n            if (node === null || node === void 0 ? void 0 : node.value) {\n                var returnedConcept = node.value;\n                if (returnedConcept) {\n                    myConcept = returnedConcept;\n                }\n            }\n            return myConcept;\n        });\n    }\n    static UpdateConceptSyncStatus(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            LocalBinaryTree.updateSyncStatus(id);\n        });\n    }\n    static GetConceptByGhostId(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var myConcept = CreateDefaultLConcept();\n            var node = yield LocalGhostIdTree.getNodeFromTree(id);\n            if (node === null || node === void 0 ? void 0 : node.value) {\n                var returnedConcept = node.value;\n                if (returnedConcept) {\n                    myConcept = returnedConcept;\n                }\n            }\n            return myConcept;\n        });\n    }\n    static GetConceptByCharacter(characterValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultLConcept();\n            //  for(var i=0; i<this.conceptsArray.length; i++){\n            //      if(this.conceptsArray[i].characterValue == characterValue){\n            //         concept = this.conceptsArray[i];\n            //      }\n            //  }\n            var Node = LocalBinaryCharacterTree.getNodeFromTree(characterValue);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptByCharacterAndTypeLocal(character_value, typeId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultLConcept();\n            // let conceptList:Concept[] = await this.GetConceptsByTypeId(typeId);\n            // for(var i=0;i<conceptList.length; i++){\n            //     if(character_value == conceptList[i].characterValue){\n            //         concept = conceptList[i];\n            //     }\n            // }\n            var Node = yield LocalBinaryCharacterTree.getCharacterAndTypeFromTree(character_value, typeId);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptByCharacterAndCategoryLocal(character_value, categoryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var concept = CreateDefaultLConcept();\n            var Node = yield LocalBinaryCharacterTree.getCharacterAndCategoryFromTree(character_value, categoryId);\n            if (Node) {\n                concept = Node.value;\n            }\n            return concept;\n        });\n    }\n    static GetConceptsByTypeId(typeId) {\n        var myConcept;\n        let ConceptList = [];\n        myConcept = null;\n        for (var i = 0; i < this.localconceptsArray.length; i++) {\n            if (this.localconceptsArray[i].typeId == typeId) {\n                ConceptList.push(this.localconceptsArray[i]);\n            }\n        }\n        return ConceptList;\n    }\n    static GetConceptsByTypeIdAndUser(typeId, userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var myConcept;\n            let ConceptList = [];\n            // myConcept = null;\n            //  for(var i=0; i<this.conceptsArray.length; i++){\n            //      if(this.conceptsArray[i].typeId == typeId && this.conceptsArray[i].userId == userId){\n            //          ConceptList.push(this.conceptsArray[i]);\n            //      }\n            //  }\n            ConceptList = yield LocalBinaryTypeTree.getTypeVariantsFromTreeWithUserId(typeId, userId);\n            return ConceptList;\n        });\n    }\n    getName() {\n        return this.name;\n    }\n}\nLocalConceptsData.localconceptsArray = [];\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { UpdateToDatabase } from \"../../Database/indexdblocal\";\nimport { removeFromDatabase } from \"../../Database/indexdblocal\";\nimport { ConvertFromLConnectionToConnection } from \"../../Services/Local/ConvertFromLConnectionToConnection\";\nimport { ConnectionData } from \"../ConnectionData\";\nimport { IdentifierFlags } from \"../IdentifierFlags\";\nexport class LocalConnectionData {\n    constructor() {\n        this.name = \"Connection Array\";\n    }\n    static CheckContains(connection) {\n        var contains = false;\n        for (var i = 0; i < this.connectionArray.length; i++) {\n            if (this.connectionArray[i].id == connection.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static AddConnection(connection) {\n        var contains = this.CheckContains(connection);\n        if (contains) {\n            this.RemoveConnection(connection);\n        }\n        if (connection.id != 0) {\n            UpdateToDatabase(\"localconnection\", connection);\n        }\n        this.connectionArray.push(connection);\n    }\n    static AddConnectionToMemory(connection) {\n        var contains = this.CheckContains(connection);\n        if (contains) {\n            this.RemoveConnection(connection);\n        }\n        this.connectionArray.push(connection);\n    }\n    static AddToDictionary(connection) {\n        this.connectionDictionary[connection.id] = connection;\n    }\n    static RemoveConnection(connection) {\n        console.log(\"this is removing\", connection);\n        for (var i = 0; i < this.connectionArray.length; i++) {\n            if (this.connectionArray[i].id == connection.id) {\n                this.connectionArray.splice(i, 1);\n            }\n        }\n        if (connection.id != 0) {\n            //  removeFromDatabase(\"connection\",connection.id);\n        }\n    }\n    static AddPermanentConnection(connection) {\n        if (connection.id > 0) {\n            removeFromDatabase(\"localconnection\", connection.ghostId);\n            ConnectionData.AddConnection(ConvertFromLConnectionToConnection(connection));\n        }\n    }\n    static GetConnection(id) {\n        var myConcept;\n        myConcept = null;\n        for (var i = 0; i < this.connectionArray.length; i++) {\n            if (this.connectionArray[i].id == id) {\n                myConcept = this.connectionArray[i];\n            }\n        }\n        return myConcept;\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isLocalConnectionLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(LocalConnectionData.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static GetConnectionsOfCompositionLocal(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var connectionList = [];\n            try {\n                var data = yield this.waitForDataToLoad();\n                for (var i = 0; i < this.connectionArray.length; i++) {\n                    if (this.connectionArray[i].typeId == id) {\n                        connectionList.push(this.connectionArray[i]);\n                    }\n                }\n                return connectionList;\n            }\n            catch (exception) {\n                return connectionList;\n            }\n        });\n    }\n    static GetConnectionOfCompositionAndTypeLocal(typeId, ofTheConceptId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var connectionList = [];\n            try {\n                var data = yield this.waitForDataToLoad();\n                console.log(\"this is the connections\", this.connectionArray, typeId, ofTheConceptId);\n                for (var i = 0; i < this.connectionArray.length; i++) {\n                    if (this.connectionArray[i].typeId == typeId && this.connectionArray[i].ofTheConceptId == ofTheConceptId) {\n                        connectionList.push(this.connectionArray[i]);\n                    }\n                }\n                return connectionList;\n            }\n            catch (exception) {\n                return connectionList;\n            }\n        });\n    }\n    getName() {\n        return this.name;\n    }\n}\nLocalConnectionData.connectionArray = [];\nLocalConnectionData.connectionDictionary = [];\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"../IdentifierFlags\";\nimport { LNode } from \"./../Local/LNode\";\nexport class LocalGhostIdTree {\n    static addNodeToTree(node) {\n        if (this.root == null) {\n            this.root = node;\n            return this.root;\n        }\n        else {\n            this.root = this.root.addNode(node, this.root, this.root.height);\n        }\n    }\n    static addConceptToTree(concept) {\n        var node = new LNode(concept.ghostId, concept, null, null);\n        this.addNodeToTree(node);\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isLocalDataLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(LocalGhostIdTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static getNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return null;\n            }\n            if (this.root) {\n                var Node = this.root.getFromNode(id, this.root);\n                return Node;\n            }\n            return null;\n        });\n    }\n    static removeNodeFromTree(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.root) {\n                this.root = this.root.removeNode(this.root, id);\n            }\n        });\n    }\n}\nLocalGhostIdTree.root = null;\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { PopulateTheLocalConceptsToMemory, PopulateTheLocalConnectionToMemory } from \"../../Services/Local/CreateLocalBinaryTreeFromData\";\nexport class LocalId {\n    static AddConceptId(id) {\n        this.localId = id.value;\n        //UpdateToDatabase(\"localid\", id);\n    }\n    /**\n     *\n     * This function will get the local concept id from the indexdb\n     * @returns the local concept id\n     */\n    static getConceptId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (this.localId) {\n                    if (this.ReservedLocalId.length < 5) {\n                        yield PopulateTheLocalConceptsToMemory().then(() => {\n                            let finalLocalId = this.localId;\n                            for (let j = 1; j < 10; j++) {\n                                let localId = this.localId - j;\n                                this.ReservedLocalId.push(localId);\n                                finalLocalId = localId;\n                            }\n                            // this.AddConceptId({\"id\":0, \"value\": finalLocalId})\n                        }).catch((event) => {\n                            console.log(\" getid: cannot get the id from indexdb\");\n                            return -Math.floor(Math.random() * 100000000);\n                        });\n                        let id = this.ReservedLocalId[0];\n                        this.ReservedLocalId.shift();\n                        return id;\n                    }\n                    else {\n                        let id = this.ReservedLocalId[0];\n                        this.ReservedLocalId.shift();\n                        return id;\n                    }\n                }\n                else {\n                    yield PopulateTheLocalConceptsToMemory().then(() => {\n                        let finalLocalId = this.localId;\n                        for (let j = 1; j < 10; j++) {\n                            let localId = this.localId - j;\n                            this.ReservedLocalId.push(localId);\n                            finalLocalId = localId;\n                        }\n                        //this.AddConceptId({\"id\":0, \"value\": finalLocalId});\n                    });\n                    return this.getConceptId();\n                }\n            }\n            catch (error) {\n                console.log(\" getid: this is the eror in concept\", error);\n                return -Math.floor(Math.random() * 100000000);\n            }\n        });\n    }\n    /**\n     *\n     * @param object This is the object that needs to be updated\n     */\n    static AddConnectionId(object) {\n        this.localConnectionId = object.value;\n        //UpdateToDatabase(\"localid\", id);\n    }\n    static getConnectionId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (this.localConnectionId) {\n                    if (this.ReservedConnectionId.length < 5) {\n                        yield PopulateTheLocalConnectionToMemory().then(() => {\n                            let finalLocalId = this.localConnectionId;\n                            for (let j = 1; j < 10; j++) {\n                                let localConId = this.localConnectionId - j;\n                                this.ReservedConnectionId.push(localConId);\n                                finalLocalId = localConId;\n                            }\n                        }).catch((event) => {\n                            console.log(\"this is the new event\", event);\n                            return -Math.floor(Math.random() * 100000000);\n                        });\n                        let id = this.ReservedConnectionId[0];\n                        this.ReservedConnectionId.shift();\n                        return id;\n                    }\n                    else {\n                        let id = this.ReservedConnectionId[0];\n                        this.ReservedConnectionId.shift();\n                        return id;\n                    }\n                }\n                else {\n                    yield PopulateTheLocalConnectionToMemory().then(() => {\n                        let finalLocalId = this.localConnectionId;\n                        for (let j = 1; j < 10; j++) {\n                            let localConId = this.localConnectionId - j;\n                            this.ReservedConnectionId.push(localConId);\n                            finalLocalId = localConId;\n                        }\n                        //this.AddConnectionId({\"id\":1, \"value\": finalLocalId})\n                    });\n                    return this.getConnectionId();\n                }\n            }\n            catch (error) {\n                return -Math.floor(Math.random() * 100000000);\n            }\n        });\n    }\n}\nLocalId.ReservedLocalId = [];\nLocalId.ReservedConnectionId = [];\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTheGhostConceptApi } from \"../../Api/Create/CreateTheGhostConceptApi\";\nimport { UpdateToDatabase } from \"../../Database/indexdblocal\";\nimport { LocalConceptsData } from \"./LocalConceptData\";\nimport { CreateDefaultLConcept } from \"../../app\";\nimport { LocalConnectionData } from \"./LocalConnectionData\";\nexport class LocalSyncData {\n    static CheckContains(concept) {\n        var contains = false;\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (this.conceptsSyncArray[i].id == concept.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static SyncDataDelete(id) {\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (id == this.conceptsSyncArray[i].id) {\n                this.conceptsSyncArray.splice(i, 1);\n            }\n        }\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].ofTheConceptId == id || this.connectionSyncArray[i].toTheConceptId == id || this.connectionSyncArray[i].typeId == id) {\n                this.connectionSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static CheckContainsConnection(connection) {\n        var contains = false;\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].id == connection.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static AddConcept(concept) {\n        try {\n            let contains = false;\n            let existingConcept = LocalSyncData.CheckIfTheConceptIdExists(concept.id, this.conceptsSyncArray);\n            if (existingConcept.id != 0) {\n                contains = true;\n            }\n            if (!contains) {\n                this.conceptsSyncArray.push(concept);\n            }\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    static RemoveConcept(concept) {\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (this.conceptsSyncArray[i].id == concept.id) {\n                this.conceptsSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static SyncDataOnline() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let conceptsArray = this.conceptsSyncArray.slice();\n                let connectionsArray = this.connectionSyncArray.slice();\n                this.connectionSyncArray = [];\n                this.conceptsSyncArray = [];\n                let toSyncConcepts = [];\n                for (let i = 0; i < conceptsArray.length; i++) {\n                    //if(!conceptsArray[i].isSynced){\n                    toSyncConcepts.push(conceptsArray[i]);\n                    //}\n                    // this is used to denote that the local concept has already been synced with the online db\n                    yield LocalConceptsData.UpdateConceptSyncStatus(conceptsArray[i].id);\n                }\n                //if(connectionsArray.length > 0){\n                yield this.UpdateConceptListToIncludeRelatedConcepts(connectionsArray, toSyncConcepts);\n                let result = yield CreateTheGhostConceptApi(toSyncConcepts, connectionsArray);\n                let concepts = result.concepts;\n                let connections = result.connections;\n                for (let i = 0; i < concepts.length; i++) {\n                    LocalConceptsData.AddPermanentConcept(concepts[i]);\n                }\n                for (let i = 0; i < connections.length; i++) {\n                    LocalConnectionData.AddPermanentConnection(connections[i]);\n                }\n                //}\n                return conceptsArray;\n            }\n            catch (error) {\n                throw error;\n            }\n        });\n    }\n    //  static async  SyncDataOnline(){\n    //     if(this.conceptsSyncArray.length > 0){\n    //         let conceptsArray = this.conceptsSyncArray.slice();\n    //         this.conceptsSyncArray = [];\n    //         let concepts = await CreateTheGhostConceptApi(conceptsArray);\n    //         for(let i =0 ; i< concepts.length; i++){\n    //             LocalSyncData.ghostIdMap.set(concepts[i].ghostId,concepts[i].id);\n    //             LocalConceptsData.AddPermanentConcept(concepts[i]);\n    //         }\n    //     }\n    //      if(this.connectionSyncArray.length > 0){\n    //         // for(let i =0 ; i<this.connectionSyncArray.length ; i++){\n    //         //     console.log(\"create the connection in backend\", this.connectionSyncArray[i].ofTheConceptId + \"====\" + this.connectionSyncArray[i].toTheConceptId);\n    //         // }\n    //         let connectionsArray = this.connectionSyncArray.slice();\n    //         this.ConvertGhostIdsInConnections(connectionsArray);\n    //         this.connectionSyncArray = [];\n    //         await CreateTheGhostConnectionApi(connectionsArray);\n    //     }\n    //     return \"done\";\n    //  }\n    static ConvertGhostIdsInConnections(connectionArray) {\n        var _a, _b, _c;\n        for (let i = 0; i < connectionArray.length; i++) {\n            let ofTheConceptId = connectionArray[i].ofTheConceptId;\n            let toTheConceptId = connectionArray[i].toTheConceptId;\n            let typeId = connectionArray[i].typeId;\n            let newOfTheConceptId = (_a = LocalSyncData.ghostIdMap.get(ofTheConceptId)) !== null && _a !== void 0 ? _a : ofTheConceptId;\n            let newToTheConceptId = (_b = LocalSyncData.ghostIdMap.get(toTheConceptId)) !== null && _b !== void 0 ? _b : toTheConceptId;\n            let newTypeId = (_c = LocalSyncData.ghostIdMap.get(typeId)) !== null && _c !== void 0 ? _c : typeId;\n            connectionArray[i].ofTheConceptId = newOfTheConceptId;\n            connectionArray[i].toTheConceptId = newToTheConceptId;\n            connectionArray[i].typeId = newTypeId;\n        }\n    }\n    static UpdateConceptListToIncludeRelatedConcepts(connectionArray, conceptsArray) {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < connectionArray.length; i++) {\n                let ofTheConceptId = connectionArray[i].ofTheConceptId;\n                let toTheConceptId = connectionArray[i].toTheConceptId;\n                let typeId = connectionArray[i].typeId;\n                if (ofTheConceptId < 0) {\n                    let ofTheConcept = this.CheckIfTheConceptIdExists(ofTheConceptId, conceptsArray);\n                    if (ofTheConcept.id == 0) {\n                        ofTheConcept = yield LocalConceptsData.GetConceptByGhostId(ofTheConceptId);\n                        if (ofTheConcept.id != 0) {\n                            if (ofTheConcept.id != ofTheConcept.ghostId) {\n                                connectionArray[i].ofTheConceptId = ofTheConcept.id;\n                            }\n                        }\n                        else {\n                            ofTheConcept = yield LocalConceptsData.GetConcept(ofTheConceptId);\n                            // if this has already been synced before and is a composition type then do not send it again\n                            // if(!ofTheConcept.isSynced && !ofTheConcept.isComposition){\n                            this.AddConceptIfDoesNotExist(ofTheConcept, conceptsArray);\n                            //   }\n                        }\n                    }\n                }\n                if (toTheConceptId < 0) {\n                    let toTheConcept = this.CheckIfTheConceptIdExists(toTheConceptId, conceptsArray);\n                    if (toTheConcept.id == 0) {\n                        toTheConcept = yield LocalConceptsData.GetConceptByGhostId(toTheConceptId);\n                        if (toTheConcept.id != 0) {\n                            if (toTheConcept.id != toTheConcept.ghostId) {\n                                connectionArray[i].toTheConceptId = toTheConcept.id;\n                            }\n                        }\n                        else {\n                            toTheConcept = yield LocalConceptsData.GetConcept(toTheConceptId);\n                            // if this has already been synced before and is a composition type then do not send it again\n                            //   if(!toTheConcept.isSynced && !toTheConcept.isComposition){\n                            this.AddConceptIfDoesNotExist(toTheConcept, conceptsArray);\n                            //   }\n                        }\n                    }\n                }\n                if (typeId < 0) {\n                    let type = this.CheckIfTheConceptIdExists(typeId, conceptsArray);\n                    if (type.id == 0) {\n                        type = yield LocalConceptsData.GetConceptByGhostId(typeId);\n                        if (type.id != 0) {\n                            if (type.id != type.ghostId) {\n                                connectionArray[i].typeId = type.id;\n                            }\n                        }\n                        else {\n                            type = yield LocalConceptsData.GetConcept(typeId);\n                            // if this has already been synced before and is a composition type then do not send it again\n                            //    if(!type.isSynced && !type.isComposition){\n                            this.AddConceptIfDoesNotExist(type, conceptsArray);\n                            //    }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    static AddConceptIfDoesNotExist(concept, conceptList = []) {\n        let exists = false;\n        for (let i = 0; i < conceptList.length; i++) {\n            if (concept.ghostId == conceptList[i].ghostId) {\n                exists = true;\n            }\n        }\n        if (!exists) {\n            conceptList.push(concept);\n        }\n    }\n    static CheckIfTheConceptIdExists(id, conceptList = []) {\n        let returnConcept = CreateDefaultLConcept();\n        for (let i = 0; i < conceptList.length; i++) {\n            if (id == conceptList[i].ghostId || id == conceptList[i].id) {\n                returnConcept = conceptList[i];\n            }\n        }\n        return returnConcept;\n    }\n    static AddConnection(connection) {\n        this.connectionSyncArray.push(connection);\n    }\n    static RemoveConnection(connection) {\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].id == connection.id) {\n                this.connectionSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static syncDataLocalDb() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.conceptsSyncArray.length > 0) {\n                for (let i = 0; i < this.conceptsSyncArray.length; i++) {\n                    UpdateToDatabase(\"localconcept\", this.conceptsSyncArray[i]);\n                }\n                this.conceptsSyncArray = [];\n            }\n            if (this.connectionSyncArray.length > 0) {\n                for (let i = 0; i < this.connectionSyncArray.length; i++) {\n                    UpdateToDatabase(\"localconnection\", this.connectionSyncArray[i]);\n                }\n                this.connectionSyncArray = [];\n            }\n            return \"done\";\n        });\n    }\n}\nLocalSyncData.conceptsSyncArray = [];\nLocalSyncData.connectionSyncArray = [];\nLocalSyncData.ghostIdMap = new Map();\n", "export class Node {\n    constructor(key, value, leftNode, rightNode) {\n        this.variants = [];\n        this.height = 1;\n        this.key = key;\n        this.value = value;\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n        this.currentNode = null;\n    }\n    addCurrentNode(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        if (passedNode.value.typeId != node.value.typeId) {\n            node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        }\n        return node;\n    }\n    addCurrentNodeType(passedNode, node) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        let contains = false;\n        for (let i = 0; i < node.variants.length; i++) {\n            if (node.variants[i].value.id == passedNode.value.id) {\n                contains = true;\n            }\n        }\n        if (!contains) {\n            node.variants.push(passedNode);\n        }\n        //node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n        return node;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        let LeftNode = node.leftNode;\n        let RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        // else if (node.key == passedNode.key && node.key != \"\"){\n        //     node.currentNode = passedNode;\n        // }\n        else {\n            return node;\n        }\n        node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        let balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    return this.rightRotate(node);\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    return this.rightRotate(node);\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    return this.leftRotate(node);\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    return this.leftRotate(node);\n                }\n            }\n        }\n        return node;\n    }\n    checkIfIdsInNode(node, ids, connectionArray, remainingIds) {\n        if (node) {\n            if (ids.includes(node.key)) {\n                connectionArray.push(node.value);\n                // remainingIds[node.key] = true;\n                let index = ids.indexOf(node.key);\n                ids.splice(index, 1);\n            }\n            if (node.leftNode) {\n                this.checkIfIdsInNode(node.leftNode, ids, connectionArray, remainingIds);\n            }\n            if (node.rightNode) {\n                this.checkIfIdsInNode(node.rightNode, ids, connectionArray, remainingIds);\n            }\n        }\n    }\n    addCharacterNode(passedNode, node, height) {\n        let debugFlag = false;\n        if (passedNode.value.characterValue != \"\") {\n            // if(passedNode.value.characterValue == \"Default\"){\n            //     console.log(\"default here\");\n            //     debugFlag = true;\n            // }\n            if (node == null) {\n                if (debugFlag) {\n                    console.log(\"equal here\", node);\n                }\n                node = passedNode;\n                return node;\n            }\n            // if (node.key == passedNode.key && node.key != \"\" ){\n            //     if(passedNode.value.characterValue == \"Default\"){\n            //         console.log(\"equal\");\n            //     }\n            //     node.currentNode = passedNode;\n            //     return node;\n            // }\n            let LeftNode = node.leftNode;\n            let RightNode = node.rightNode;\n            if (node.key > passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"left  here\", node);\n                }\n                node.leftNode = this.addCharacterNode(passedNode, LeftNode, height);\n            }\n            else if (node.key < passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"right here\", node, RightNode);\n                }\n                node.rightNode = this.addCharacterNode(passedNode, RightNode, height);\n            }\n            // else if (node.key == passedNode.key && node.key != \"\"){\n            //     node.currentNode = passedNode;\n            // }\n            else {\n                if (debugFlag) {\n                    console.log(\"else here\", node, passedNode);\n                }\n                if (node.key == passedNode.key && node.key != \"\" && node.value.id != passedNode.value.id) {\n                    // node.currentNode = this.addCurrentNode(passedNode, node.currentNode);\n                    node.addCurrentNodeType(passedNode, node);\n                }\n                return node;\n            }\n            node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n            if (debugFlag) {\n                console.log(\"height here\", node.height);\n            }\n            let balancingFactor = this.getBalanceFactor(node);\n            if (debugFlag) {\n                console.log(\"balancingFactor here\", balancingFactor);\n            }\n            if (balancingFactor > 1) {\n                if (node.leftNode) {\n                    if (passedNode.key < node.leftNode.key) {\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 1 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key > node.leftNode.key) {\n                        node.leftNode = this.leftRotate(node.leftNode);\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 2 \", returner);\n                        }\n                        return returner;\n                    }\n                }\n            }\n            if (balancingFactor < -1) {\n                if (node.rightNode) {\n                    if (passedNode.key > node.rightNode.key) {\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 3 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key < node.rightNode.key) {\n                        node.rightNode = this.rightRotate(node.rightNode);\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here4 \", returner, node);\n                        }\n                        return returner;\n                    }\n                }\n            }\n        }\n        else {\n            if (debugFlag) {\n                console.log(\"what here\", node);\n            }\n        }\n        if (debugFlag) {\n            console.log(\"returning here 6\", node);\n        }\n        return node;\n    }\n    addTypeNode(passedNode, node, height) {\n        let debugFlag = false;\n        if (passedNode.value.typeId != 0) {\n            // if(passedNode.value.characterValue == \"Default\"){\n            //     console.log(\"default here\");\n            //     debugFlag = true;\n            // }\n            if (node == null) {\n                if (debugFlag) {\n                    console.log(\"equal here\", node);\n                }\n                console.log(\"adding the type node to the tree\", passedNode);\n                node = passedNode;\n                return node;\n            }\n            let LeftNode = node.leftNode;\n            let RightNode = node.rightNode;\n            if (node.key > passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"left  here\", node);\n                }\n                node.leftNode = this.addTypeNode(passedNode, LeftNode, height);\n            }\n            else if (node.key < passedNode.key) {\n                if (debugFlag) {\n                    console.log(\"right here\", node, RightNode);\n                }\n                node.rightNode = this.addTypeNode(passedNode, RightNode, height);\n            }\n            else {\n                if (debugFlag) {\n                    console.log(\"else here\", node, passedNode);\n                }\n                console.log(\"adding the type node to the tree down\", passedNode);\n                if (node.key == passedNode.key && node.key != 0 && node.value.id != passedNode.value.id) {\n                    node.addCurrentNodeType(passedNode, node);\n                }\n                console.log(\"adding the type node to the tree last\", node);\n                return node;\n            }\n            node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n            if (debugFlag) {\n                console.log(\"height here\", node.height);\n            }\n            let balancingFactor = this.getBalanceFactor(node);\n            if (debugFlag) {\n                console.log(\"balancingFactor here\", balancingFactor);\n            }\n            if (balancingFactor > 1) {\n                if (node.leftNode) {\n                    if (passedNode.key < node.leftNode.key) {\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 1 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key > node.leftNode.key) {\n                        node.leftNode = this.leftRotate(node.leftNode);\n                        let returner = this.rightRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 2 \", returner);\n                        }\n                        return returner;\n                    }\n                }\n            }\n            if (balancingFactor < -1) {\n                if (node.rightNode) {\n                    if (passedNode.key > node.rightNode.key) {\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here 3 \", returner);\n                        }\n                        return returner;\n                    }\n                    else if (passedNode.key < node.rightNode.key) {\n                        node.rightNode = this.rightRotate(node.rightNode);\n                        let returner = this.leftRotate(node);\n                        if (debugFlag) {\n                            console.log(\"returning here4 \", returner, node);\n                        }\n                        return returner;\n                    }\n                }\n            }\n        }\n        else {\n            if (debugFlag) {\n                console.log(\"what here\", node);\n            }\n        }\n        if (debugFlag) {\n            console.log(\"returning here 6\", node);\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                // if(node.value.count){\n                //     node.value.count++ ;\n                // }\n                // else{\n                //     node.value.count = 1;\n                // }\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getCharacterFromNode(value, node) {\n        if (node) {\n            if (value == node.key) {\n                return node;\n            }\n            else if (value < node.key) {\n                return this.getCharacterFromNode(value, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getCharacterFromNode(value, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getCharacterFromNodeUpdated(value, node) {\n        var _a;\n        if (node) {\n            if (value == node.key || ((_a = node.value) === null || _a === void 0 ? void 0 : _a.typeId) == 51) {\n                return node;\n            }\n            else if (value < node.key) {\n                return this.getCharacterFromNode(value, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getCharacterFromNode(value, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    getFromNodeWithCharacterAndType(value, typeId, node) {\n        value = `${value}`;\n        if (node) {\n            if (value == node.key) {\n                if (value == node.value.characterValue && typeId == node.value.typeId) {\n                    return node;\n                }\n                else {\n                    for (let i = 0; i < node.variants.length; i++) {\n                        if (node.variants[i].value.typeId == typeId) {\n                            return node.variants[i];\n                        }\n                    }\n                    // return this.getFromNodeWithCharacterAndType(value, typeId, node.currentNode);\n                }\n            }\n            else if (value < node.key) {\n                return this.getFromNodeWithCharacterAndType(value, typeId, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getFromNodeWithCharacterAndType(value, typeId, node.rightNode);\n            }\n            return null;\n        }\n        return node;\n    }\n    getFromNodeWithCharacterAndCategory(value, categoryId, node) {\n        value = `${value}`;\n        if (node) {\n            if (value == node.key) {\n                if (value == node.value.characterValue && categoryId == node.value.categoryId) {\n                    return node;\n                }\n                else {\n                    for (let i = 0; i < node.variants.length; i++) {\n                        if (node.variants[i].value.categoryId == categoryId) {\n                            return node.variants[i];\n                        }\n                    }\n                    // return this.getFromNodeWithCharacterAndType(value, typeId, node.currentNode);\n                }\n            }\n            else if (value < node.key) {\n                return this.getFromNodeWithCharacterAndCategory(value, categoryId, node.leftNode);\n            }\n            else if (value > node.key) {\n                return this.getFromNodeWithCharacterAndCategory(value, categoryId, node.rightNode);\n            }\n            return null;\n        }\n        return node;\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        // if(passedNode.variants.length > 0){\n        //     if(passedNode.value.id == id ){\n        //     }\n        //     var newNode = passedNode.variants[0];\n        //     if(newNode){\n        //         passedNode.value = newNode.value;\n        //         passedNode.key = newNode.key;\n        //         passedNode.currentNode = newNode.currentNode;\n        //         return passedNode;\n        //     }\n        // }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    removeNodeWithVariants(passedNode, typeIdentifier, conceptId) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > typeIdentifier) {\n            passedNode.leftNode = this.removeNodeWithVariants(passedNode.leftNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        else if (passedNode.key < typeIdentifier) {\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, typeIdentifier, conceptId);\n            return passedNode;\n        }\n        if (passedNode.variants.length > 0) {\n            //condition if the main node is equal to the value\n            if (passedNode.value.id == conceptId) {\n                let newNode = passedNode.variants[0];\n                if (newNode) {\n                    passedNode.value = newNode.value;\n                    passedNode.key = newNode.key;\n                    passedNode.currentNode = newNode.currentNode;\n                    passedNode.variants.splice(0, 1);\n                    return passedNode;\n                }\n            }\n            else {\n                // in the condition that the main node is not equal to the checking value \n                for (let i = 0; i < passedNode.variants.length; i++) {\n                    if (conceptId == passedNode.variants[i].value.id) {\n                        passedNode.variants.splice(i, 1);\n                        return passedNode;\n                    }\n                }\n            }\n        }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.variants = immediateSuccessor.variants;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, immediateSuccessor.key, conceptId);\n            return passedNode;\n        }\n    }\n    countNodeBelow(root) {\n        if (root == null) {\n            return 0;\n        }\n        //recursive call to left child and right child and\n        // add the result of these with 1 ( 1 for counting the root)\n        return 1 + this.countNodeBelow(root.leftNode) + this.countNodeBelow(root.rightNode);\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n", "export class PatcherStructure {\n    constructor() {\n        this.compositionId = 0;\n        this.userId = 999;\n        this.sessionId = 999;\n        this.accessId = 4;\n        this.ofTheCompositionId = 0;\n        this.patchObject = {};\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetReservedConnectionIds } from \"../Api/GetReservedConnectionIds\";\nimport { GetReservedIds } from \"../Api/GetReservedIds\";\nexport class ReservedIds {\n    static getId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.ids.length < 5) {\n                var ids = yield GetReservedIds();\n            }\n            var id = this.ids[0];\n            this.ids.shift();\n            return id;\n        });\n    }\n    static AddId(id) {\n        if (!this.ids.includes(id)) {\n            this.ids.push(id);\n        }\n    }\n}\nReservedIds.ids = [];\nexport class ReservedConnectionIds {\n    static getId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connectionIds.length < 5) {\n                var connectionIds = yield GetReservedConnectionIds();\n            }\n            var id = this.connectionIds[0];\n            this.connectionIds.shift();\n            return id;\n        });\n    }\n    static AddId(id) {\n        if (!this.connectionIds.includes(id)) {\n            this.connectionIds.push(id);\n        }\n    }\n}\nReservedConnectionIds.connectionIds = [];\n", "import { BaseUrl } from \"../BaseUrl\";\n/**\n * This is a class that is used to standardize the Response that is sent by FreeSchema.\n * This is done so that we do not have to send a HttpResponse codes.\n */\nexport class FreeSchemaResponse {\n    /**\n     *\n     * @param message this is the message for the response\n     * @param ok  this is the status can be true or false boolean in case that request succeds or fails\n     * @param status this is the standard http codes 200 for ok, 500 for internal error etc.\n     * @param data  this is the standard data that can be anything.\n     */\n    constructor(message, ok, status, data) {\n        this.url = BaseUrl.BASE_URL;\n        this.message = message;\n        this.ok = ok;\n        this.status = status;\n        this.data = data;\n    }\n    /**\n     * This function gets the message of the error\n     * @returns\n     */\n    getMessage() {\n        return this.message;\n    }\n    /**\n     *\n     * @param message This allows you to set a message variable in the FreeSchemaResponse\n     * @returns\n     */\n    setMessage(message) {\n        this.message = message;\n        return this;\n    }\n    /**\n     *\n     * @returns status code of the FreeSchemaResponse\n     */\n    getStatus() {\n        return this.status;\n    }\n    /**\n     *\n     * @param status standard http error codes (200 ok , 401 unauthorized, 500 internal server error etc.)\n     * @returns\n     */\n    setStatus(status) {\n        this.status = status;\n        return this;\n    }\n    /**\n     *\n     * @returns returns the data for the request\n     */\n    getData() {\n        return this.data;\n    }\n    /**\n     *\n     * @param data any type of data can be given here\n     * @returns FreeSchemaReponse\n     */\n    setData(data) {\n        this.data = data;\n        return this;\n    }\n    /**\n     *\n     * @returns the status of the FreeSchemaReponse (either true or false)\n     */\n    getOk() {\n        return this.ok;\n    }\n    /**\n     *\n     * @param status if the status is true then the response was successful else the success was not achieved.\n     * @returns returns the FreeSchemaResponse\n     */\n    setOk(ok) {\n        this.ok = ok;\n        return this;\n    }\n    /**\n     *\n     * @returns the url that caused the error\n     */\n    getUrl() {\n        return this.url;\n    }\n    /**\n     *\n     * @param url the url from which the error or response originates\n     * @returns FreeSchemaResponse\n     */\n    setUrl(url) {\n        this.url = url;\n        return this;\n    }\n}\n", "export class Returner {\n    constructor(id, userId, referentId, isNew) {\n        this.id = id;\n        this.userId = userId;\n        this.referentId = referentId;\n        this.isNew = isNew;\n    }\n}\n", "export class SearchQuery {\n    constructor() {\n        this.composition = 0;\n        this.type = \"\";\n        this.linker = \"\";\n        this.inpage = 10;\n        this.page = 1;\n        this.listLinkers = [];\n        this.fullLinkers = [];\n        this.textSearch = \"\";\n        this.logic = \"or\";\n        this.reverse = false;\n        this.doFilter = false;\n        this.filterSearches = [];\n        this.selectors = [];\n    }\n}\n", "export class SearchStructure {\n    constructor() {\n        this.type = \"\";\n        this.search = \"\";\n        this.composition = \"\";\n        this.internalComposition = \"\";\n        this.userId = 999;\n        this.inpage = 10;\n        this.page = 1;\n    }\n}\n", "export class TokenStorage {\n}\nTokenStorage.BearerAccessToken = \"\";\n", "export class SessionData {\n    constructor() {\n        this.id = \"0\";\n        this.remote_address = \"\";\n        this.server_port = \"\";\n        this.server_address = \"\";\n        this.server_name = \"\";\n        this.server_software = \"\";\n        this.http_user_agent = \"\";\n        this.self = \"\";\n        this.port = \"\";\n        this.userId = \"\";\n        this.email = \"\";\n    }\n}\n", "export class SettingData {\n    constructor(isOnlineSync) {\n        this.id = 1;\n        this.isOnlineSync = false;\n        this.isOnlineSync = isOnlineSync;\n    }\n}\n", "export class Settings {\n}\nSettings.isUpdated = false;\nSettings.isOnlineSync = false;\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { storeToDatabase } from \"./../Database/indexeddb\";\nimport { CreateTheConceptApi } from \"../Api/Create/CreateTheConceptApi\";\nimport { CreateTheConnectionApi } from \"../Api/Create/CreateTheConnectionApi\";\nimport { ConceptsData } from \"./ConceptData\";\nimport { ConnectionData } from \"./ConnectionData\";\nexport class SyncData {\n    static CheckContains(concept) {\n        var contains = false;\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (this.conceptsSyncArray[i].id == concept.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static SyncDataDelete(id) {\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (id == this.conceptsSyncArray[i].id) {\n                this.conceptsSyncArray.splice(i, 1);\n            }\n        }\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].ofTheConceptId == id || this.connectionSyncArray[i].toTheConceptId == id || this.connectionSyncArray[i].typeId == id) {\n                this.connectionSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static CheckContainsConnection(connection) {\n        var contains = false;\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].id == connection.id) {\n                contains = true;\n            }\n        }\n        return contains;\n    }\n    static AddConcept(concept) {\n        var contains = false;\n        // ConceptsData.AddConceptTemporary(concept);\n        if (!contains) {\n            this.conceptsSyncArray.push(concept);\n        }\n    }\n    static RemoveConcept(concept) {\n        for (var i = 0; i < this.conceptsSyncArray.length; i++) {\n            if (this.conceptsSyncArray[i].id == concept.id) {\n                this.conceptsSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static AddConnection(connection) {\n        this.connectionSyncArray.push(connection);\n    }\n    static RemoveConnection(connection) {\n        for (var i = 0; i < this.connectionSyncArray.length; i++) {\n            if (this.connectionSyncArray[i].id == connection.id) {\n                this.connectionSyncArray.splice(i, 1);\n            }\n        }\n    }\n    static SyncDataOnline() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < this.conceptsSyncArray.length; i++) {\n                ConceptsData.AddConcept(this.conceptsSyncArray[i]);\n            }\n            for (let i = 0; i < this.connectionSyncArray.length; i++) {\n                ConnectionData.AddConnection(this.connectionSyncArray[i]);\n            }\n            if (this.conceptsSyncArray.length > 0) {\n                let conceptsArray = this.conceptsSyncArray.slice();\n                this.conceptsSyncArray = [];\n                CreateTheConceptApi(conceptsArray);\n            }\n            if (this.connectionSyncArray.length > 0) {\n                // for(let i =0 ; i<this.connectionSyncArray.length ; i++){\n                //     console.log(\"create the connection in backend\", this.connectionSyncArray[i].ofTheConceptId + \"====\" + this.connectionSyncArray[i].toTheConceptId);\n                // }\n                let connectionsArray = this.connectionSyncArray.slice();\n                this.connectionSyncArray = [];\n                yield CreateTheConnectionApi(connectionsArray);\n            }\n            return \"done\";\n        });\n    }\n    static syncDataLocalDb() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.conceptsSyncArray.length > 0) {\n                for (let i = 0; i < this.conceptsSyncArray.length; i++) {\n                    storeToDatabase(\"localconcept\", this.conceptsSyncArray[i]);\n                }\n                this.conceptsSyncArray = [];\n            }\n            if (this.connectionSyncArray.length > 0) {\n                for (let i = 0; i < this.connectionSyncArray.length; i++) {\n                    storeToDatabase(\"localconnection\", this.connectionSyncArray[i]);\n                }\n                this.connectionSyncArray = [];\n            }\n            return \"done\";\n        });\n    }\n}\nSyncData.conceptsSyncArray = [];\nSyncData.connectionSyncArray = [];\n", "export class TheCharacter {\n    constructor(userId, data, securityId, securityUserId, accessId, accessUserId, sessionId, sessionUserId, entryTimestamp, isNew) {\n        this.id = 0;\n        this.isNew = false;\n        this.userId = userId;\n        this.data = `${data}`;\n        this.securityId = securityId;\n        this.securityUserId = securityUserId;\n        this.accessId = accessId;\n        this.accessUserId = accessUserId;\n        this.sessionId = sessionId;\n        this.sessionUserId = sessionUserId;\n        this.isNew = isNew;\n    }\n}\n", "export class TheTexts {\n    constructor(userId, data, securityId, securityUserId, accessId, accessUserId, sessionId, sessionUserId, entryTimestamp, isNew) {\n        this.id = 0;\n        this.userId = userId;\n        this.data = data;\n        this.securityId = securityId;\n        this.securityUserId = securityUserId;\n        this.accessId = accessId;\n        this.accessUserId = accessUserId;\n        this.sessionId = sessionId;\n        this.sessionUserId = sessionUserId;\n        this.entryTimestamp = entryTimestamp;\n        this.isNew = isNew;\n    }\n}\n", "export class TypeNode {\n    constructor(key, value) {\n        this.value = [];\n        this.height = 1;\n        this.key = key;\n        this.value.push(value);\n        this.leftNode = null;\n        this.rightNode = null;\n        this.currentNode = null;\n    }\n    addType(node, key, value) {\n        var _a, _b, _c, _d;\n        if (node == null) {\n            return new TypeNode(key, value);\n        }\n        if (key < node.key) {\n            node.leftNode = this.addType(node.leftNode, key, value);\n        }\n        else if (key > node.key) {\n            node.rightNode = this.addType(node.rightNode, key, value);\n        }\n        else {\n            // If key already exists, insert unique value into the set\n            node.value.push(value);\n            return node;\n        }\n        // Step 2: Update height of this ancestor node\n        node.height = Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode)) + 1;\n        // Step 3: Get the balance factor to check if this node became unbalanced\n        const balance = this.getBalanceFactor(node);\n        // Step 4: If the node is unbalanced, perform rotations\n        // Left Left Case (Right Rotation)\n        if (balance > 1 && key < ((_a = node.leftNode) === null || _a === void 0 ? void 0 : _a.key)) {\n            return this.rightRotate(node);\n        }\n        // Right Right Case (Left Rotation)\n        if (balance < -1 && key > ((_b = node.rightNode) === null || _b === void 0 ? void 0 : _b.key)) {\n            return this.leftRotate(node);\n        }\n        // Left Right Case (Left rotation, then right rotation)\n        if (balance > 1 && key > ((_c = node.leftNode) === null || _c === void 0 ? void 0 : _c.key)) {\n            node.leftNode = this.leftRotate(node.leftNode);\n            return this.rightRotate(node);\n        }\n        // Right Left Case (Right rotation, then left rotation)\n        if (balance < -1 && key < ((_d = node.rightNode) === null || _d === void 0 ? void 0 : _d.key)) {\n            node.rightNode = this.rightRotate(node.rightNode);\n            return this.leftRotate(node);\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                // if(node.value.count){\n                //     node.value.count++ ;\n                // }\n                // else{\n                //     node.value.count = 1;\n                // }\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    removeNodeWithVariants(passedNode, key, conceptId) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > key) {\n            passedNode.leftNode = this.removeNodeWithVariants(passedNode.leftNode, key, conceptId);\n            return passedNode;\n        }\n        else if (passedNode.key < key) {\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, key, conceptId);\n            return passedNode;\n        }\n        if (passedNode.value.length > 0) {\n            // in the condition that the main node is not equal to the checking value \n            for (let i = 0; i < passedNode.value.length; i++) {\n                if (conceptId == passedNode.value[i]) {\n                    passedNode.value.splice(i, 1);\n                    return passedNode;\n                }\n            }\n        }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            let immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.currentNode = immediateSuccessor.currentNode;\n            passedNode.rightNode = this.removeNodeWithVariants(passedNode.rightNode, immediateSuccessor.key, conceptId);\n            return passedNode;\n        }\n    }\n    countNodeBelow(root) {\n        if (root == null) {\n            return 0;\n        }\n        //recursive call to left child and right child and\n        // add the result of these with 1 ( 1 for counting the root)\n        return 1 + this.countNodeBelow(root.leftNode) + this.countNodeBelow(root.rightNode);\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { UserNode } from \"./UserNode\";\nimport { IdentifierFlags } from \"./../IdentifierFlags\";\nexport class UserBinaryTree {\n    static compositeKey(userId, sessionId) {\n        let userHex = ('0000' + userId.toString(16).toUpperCase()).slice(-4);\n        let sessionHex = ('0000' + sessionId.toString(16).toUpperCase()).slice(-4);\n        return userHex + sessionHex;\n    }\n    static addNodeToTree(node) {\n        if (this.root == null) {\n            this.root = node;\n            return this.root;\n        }\n        else {\n            this.root = this.root.addNode(node, this.root, this.root.height);\n        }\n    }\n    static waitForDataToLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.checkFlag(resolve);\n                setTimeout(() => {\n                    reject(\"not\");\n                }, 25000);\n            });\n        });\n    }\n    static checkFlag(resolve) {\n        if (IdentifierFlags.isDataLoaded) {\n            return resolve(\"done\");\n        }\n        else {\n            setTimeout(UserBinaryTree.checkFlag, 1000, resolve);\n        }\n    }\n    ;\n    static addConceptToTree(concept, userId, sessionId = 999) {\n        let key = this.compositeKey(userId, sessionId);\n        var node = new UserNode(key, concept, null, null);\n        this.addNodeToTree(node);\n    }\n    static getNodeFromTree(userId, sessionId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                var data = yield this.waitForDataToLoad();\n            }\n            catch (exception) {\n                return null;\n            }\n            let key = this.compositeKey(userId, sessionId);\n            if (this.root) {\n                var Node = this.root.getFromNode(key, this.root);\n                return Node;\n            }\n            return null;\n        });\n    }\n    static removeNodeFromTree(userId_1) {\n        return __awaiter(this, arguments, void 0, function* (userId, sessionId = 999) {\n            if (this.root) {\n                let key = this.compositeKey(userId, sessionId);\n                this.root = this.root.removeNode(this.root, key);\n            }\n        });\n    }\n    static countNumberOfNodes() {\n        if (this.root) {\n            return this.root.countNodeBelow(this.root);\n        }\n        return 0;\n    }\n}\nUserBinaryTree.root = null;\n", "export class UserNode {\n    constructor(key, value, leftNode, rightNode) {\n        this.value = [];\n        this.height = 1;\n        this.key = key;\n        this.value.push(value);\n        this.leftNode = leftNode;\n        this.rightNode = rightNode;\n    }\n    addNode(passedNode, node, height) {\n        if (node == null) {\n            node = passedNode;\n            return node;\n        }\n        var LeftNode = node.leftNode;\n        var RightNode = node.rightNode;\n        if (node.key > passedNode.key) {\n            node.leftNode = this.addNode(passedNode, LeftNode, height);\n        }\n        else if (node.key < passedNode.key) {\n            node.rightNode = this.addNode(passedNode, RightNode, height);\n        }\n        else {\n            node.value.push(...passedNode.value);\n            return node;\n        }\n        node.height = 1 + Math.max(this.getHeight(node.leftNode), this.getHeight(node.rightNode));\n        let balancingFactor = this.getBalanceFactor(node);\n        if (balancingFactor > 1) {\n            if (node.leftNode) {\n                if (passedNode.key < node.leftNode.key) {\n                    return this.rightRotate(node);\n                }\n                else if (passedNode.key > node.leftNode.key) {\n                    node.leftNode = this.leftRotate(node.leftNode);\n                    return this.rightRotate(node);\n                }\n            }\n        }\n        if (balancingFactor < -1) {\n            if (node.rightNode) {\n                if (passedNode.key > node.rightNode.key) {\n                    return this.leftRotate(node);\n                }\n                else if (passedNode.key < node.rightNode.key) {\n                    node.rightNode = this.rightRotate(node.rightNode);\n                    return this.leftRotate(node);\n                }\n            }\n        }\n        return node;\n    }\n    rightRotate(y) {\n        if (y) {\n            let x = y.leftNode;\n            if (x) {\n                let T2 = x.rightNode;\n                y.leftNode = T2;\n                x.rightNode = y;\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(y.rightNode)) + 1;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode)) + 1;\n                return x;\n            }\n            // return x;\n        }\n        return y;\n    }\n    leftRotate(x) {\n        if (x) {\n            let y = x.rightNode;\n            if (y) {\n                let T2 = y.leftNode;\n                y.leftNode = x;\n                x.rightNode = T2;\n                x.height = Math.max(this.getHeight(x.leftNode), this.getHeight(x.rightNode) + 1);\n                y.height = Math.max(this.getHeight(y.leftNode), this.getHeight(x.rightNode) + 1);\n                return y;\n            }\n            //return y;\n        }\n        return x;\n    }\n    getHeight(node) {\n        if (node) {\n            return node.height;\n        }\n        return 0;\n    }\n    getBalanceFactor(N) {\n        if (N == null) {\n            return 0;\n        }\n        return this.getHeight(N.leftNode) - this.getHeight(N.rightNode);\n    }\n    getFromNode(id, node) {\n        if (node) {\n            if (id == node.key) {\n                return node;\n            }\n            else if (id < node.key) {\n                return this.getFromNode(id, node.leftNode);\n            }\n            else if (id > node.key) {\n                return this.getFromNode(id, node.rightNode);\n            }\n            return node;\n        }\n        return node;\n    }\n    removeNode(passedNode, id) {\n        if (passedNode == null) {\n            return passedNode;\n        }\n        if (passedNode.key > id) {\n            passedNode.leftNode = this.removeNode(passedNode.leftNode, id);\n            return passedNode;\n        }\n        else if (passedNode.key < id) {\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, id);\n            return passedNode;\n        }\n        if (passedNode.leftNode == null) {\n            let temp = passedNode.rightNode;\n            passedNode = null;\n            return temp;\n        }\n        else if (passedNode.rightNode == null) {\n            let temp = passedNode.leftNode;\n            passedNode = null;\n            return temp;\n        }\n        else {\n            // passing the rightNode to the inOrderSuccessor gives the immediate successor of the node\n            var immediateSuccessor = this.inOrderSuccessor(passedNode.rightNode);\n            passedNode.value = immediateSuccessor.value;\n            passedNode.key = immediateSuccessor.key;\n            passedNode.rightNode = this.removeNode(passedNode.rightNode, immediateSuccessor.key);\n            return passedNode;\n        }\n    }\n    countNodeBelow(root) {\n        if (root == null) {\n            return 0;\n        }\n        //recursive call to left child and right child and\n        // add the result of these with 1 ( 1 for counting the root)\n        return 1 + this.countNodeBelow(root.leftNode) + this.countNodeBelow(root.rightNode);\n    }\n    inOrderSuccessor(root) {\n        while (root.leftNode != null) {\n            root = root.leftNode;\n        }\n        return root;\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SettingData } from \"../DataStructures/SettingData\";\nimport { IndexDb } from \"./indexeddb\";\nexport function openDatabase(databaseName) {\n    return IndexDb.db;\n}\nexport function storeToDatabase(databaseName, object) {\n}\nexport function GetStatsFromDatabase() {\n    var settingsData = new SettingData(true);\n    return settingsData;\n}\nexport function AiUpdateFlag(object) {\n}\nexport function getFromDatabaseWithType(databaseName, type, id) {\n    return __awaiter(this, void 0, void 0, function* () {\n    });\n}\nexport function getObjectsFromIndexDb(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n    });\n}\nexport function removeFromDatabase(databaseName, id) {\n}\nexport function getAllFromLocalDb(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseUrl } from \"../app\";\n/**\n * version of the database. If you want to change the database then you must update this version also.\n */\nvar version = 9;\n/**\n * This class will help us store the indexdb  reference in memory and not go back to index db.\n */\nexport class LocalIndexDb {\n}\n/**\n *\n * @param databaseName not required actually. This is not used you can pass anything.\n * @returns a promise that either resolves or rejects opening the database.\n */\nexport function openDatabase(databaseName) {\n    return new Promise(function (resolve, reject) {\n        // if the indexdb is already initialized then you do not need to again initialize the db so you can get \n        // from memory.\n        if (LocalIndexDb.db) {\n            resolve(LocalIndexDb.db);\n        }\n        // the name of the database is passed here. We are statically passing the dbName with inputs from user\n        // the BASE_URL is the api that the framework calls\n        // the BASE_APPLICATION is a thing that differentiates an application from another so no two application create\n        // and use the same index db.  \n        let localDbName = BaseUrl.BASE_URL + \"_FreeSchemaLocal\" + BaseUrl.BASE_APPLICATION;\n        const request = indexedDB.open(localDbName, version);\n        // in case that the database is not opened then log the error.\n        // then we delete the database that is already present with the name\n        // then again try to create the database, since this is a temporary database so it might not matter\n        // but this is a point that we might need to be careful about.\n        // we then reject the promise and report this problem.\n        request.onerror = (event) => {\n            console.error(\"Why didn't you allow my web app to use IndexedDB?!\", event);\n            indexedDB.deleteDatabase(localDbName);\n            openDatabase(databaseName);\n            reject(event);\n        };\n        // in case that the database is allowed to be opened then we return the database object.\n        request.onsuccess = function (event) {\n            var target = event.target;\n            LocalIndexDb.db = target.result;\n            resolve(LocalIndexDb.db);\n        };\n        // in case that the version is upgraded then we delete all the old databases and then create a new database.\n        // version upgrade is a way which we can clean up old databases and its structures.\n        request.onupgradeneeded = (event) => {\n            var target = event.target;\n            var db = target.result;\n            var conceptDb = \"localconcept\";\n            var connectionDb = \"localconnection\";\n            var idDb = \"localid\";\n            console.log(\"this is the version upgrade\", version);\n            if (db.objectStoreNames.contains(conceptDb)) {\n                db.deleteObjectStore(conceptDb);\n            }\n            if (db.objectStoreNames.contains(connectionDb)) {\n                db.deleteObjectStore(connectionDb);\n            }\n            if (db.objectStoreNames.contains(idDb)) {\n                db.deleteObjectStore(idDb);\n            }\n            if (!db.objectStoreNames.contains(conceptDb)) { // if there's no database name\n                let objectStore = db.createObjectStore(conceptDb, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                };\n            }\n            if (!db.objectStoreNames.contains(connectionDb)) { // if there's no database name\n                let objectStore = db.createObjectStore(connectionDb, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                };\n            }\n            if (!db.objectStoreNames.contains(idDb)) { // if there's no database name\n                let objectStore = db.createObjectStore(idDb, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                    // this is the event in which we initialize the local database\n                    // we assume the start of the localconcept by -100, localconnection by -200 and a random value \n                    // which will enable us to identify this local database from others.\n                    storeToDatabase(idDb, { \"id\": 0, \"value\": -100 });\n                    storeToDatabase(idDb, { \"id\": 1, \"value\": -200 });\n                    storeToDatabase(idDb, { \"id\": 3, \"value\": BaseUrl.BASE_RANDOMIZER });\n                };\n            }\n            resolve(db);\n        };\n    });\n}\nexport function LockTheDatabase(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"lock : locked db\");\n        yield UpdateToDatabase(databaseName, { \"id\": 4, \"value\": true });\n    });\n}\nexport function UnlockDatabase(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        yield UpdateToDatabase(databaseName, { \"id\": 4, \"value\": false });\n        console.log(\"lock :locked opened\");\n    });\n}\nexport function GetLockStatus(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let list = yield getObjectsFromLocalIndexDb(databaseName);\n            console.log(\"lock :for lock locked\", list);\n            if (Array.isArray(list)) {\n                console.log(\"lock : This is the list vallue\", list[4].value);\n                return list[4].value;\n            }\n            console.log(\"lock : This is not a list\", Array.isArray(list));\n            return false;\n        }\n        catch (error) {\n            console.log(\"lock : this is the error\", error);\n        }\n    });\n}\n/**\n*  this function will return all the objects that are in the database\n* @param databaseName name of the database\n* @returns all the objects that are in the database\n*/\nexport function getObjectsFromLocalIndexDb(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise(function (resolve, reject) {\n            openDatabase(databaseName).then((db) => {\n                var concept;\n                var ConceptList = [];\n                let transaction = db.transaction(databaseName, \"readwrite\");\n                let objectStore = transaction.objectStore(databaseName);\n                var allobjects = objectStore.getAll();\n                allobjects.onsuccess = () => {\n                    const students = allobjects.result;\n                    for (var i = 0; i < students.length; i++) {\n                        ConceptList.push(students[i]);\n                    }\n                    resolve(ConceptList);\n                };\n            }).catch((event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot get objects from database because you cannot open the Local database\",\n                    \"data\": event\n                };\n                reject(errorObject);\n            });\n        });\n    });\n}\n/**\n *\n * @param databaseName name of the database that you want to store data to.\n * @param object any object that can be stored but keep in mind it must follow the convention that we created\n * while creating the datbase.\n * @returns a promise that if a store is successful then the obejct is returned else rejects with the event.\n */\nexport function storeToDatabase(databaseName, object) {\n    return new Promise(function (resolve, reject) {\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objStore = transaction.objectStore(databaseName);\n            const request = objStore.add(object);\n            request.onsuccess = (event) => {\n                resolve(object);\n            };\n            request.onerror = (event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot store to the Local database \" + databaseName,\n                    \"data\": event,\n                    \"body\": object\n                };\n                reject(errorObject);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot store to database because you cannot open the Local database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n/**\n *\n * @param databaseName name of the database\n * @param object this is the object that you want to update\n * @returns returns the object if it is updated successfully.\n */\nexport function UpdateToDatabase(databaseName, object) {\n    return new Promise(function (resolve, reject) {\n        console.log(\"this is wriring to the database local\", object);\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objStore = transaction.objectStore(databaseName);\n            const request = objStore.put(object);\n            request.onsuccess = (event) => {\n                resolve(object);\n            };\n            request.onerror = (event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot Update to the Local database\" + databaseName,\n                    \"data\": event,\n                    \"body\": object\n                };\n                reject(errorObject);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot update to database because you cannot open the Local database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n//   /**\n//  *  this function will return all the objects that are in the database \n//  * @param databaseName name of the database\n//  * @returns all the objects that are in the database\n//  */\n// export async function getLConceptsFromLocalDb(databaseName:string){\n//   return new Promise(function(resolve, reject){\n//         var ConceptList:any[] = [];\n//       openDatabase(databaseName).then(db=>{\n//           let transaction = LocalIndexDb.db.transaction(databaseName, \"readwrite\") as IDBTransaction;\n//           let objectStore =transaction.objectStore(databaseName) as IDBObjectStore;\n//           var allobjects = objectStore.getAll();\n//           allobjects.onsuccess = ()=> {\n//             const readObjects = allobjects.result;\n//             for(var i=0; i<readObjects.length; i++){\n//                 ConceptList.push(readObjects[i]);\n//             }\n//             resolve(ConceptList); \n//         }\n//       });\n//   });\n// }\n/**\n *\n * @param databaseName name of the database\n * @param id the id that we need to remove from the database (this is the index)\n * @returns an id if the deletion is successful and error with even in case it cannot.\n */\nexport function removeFromDatabase(databaseName, id) {\n    return new Promise(function (resolve, reject) {\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objectStore = transaction.objectStore(databaseName);\n            let getRequest = objectStore.delete(id);\n            getRequest.onsuccess = function (event) {\n                resolve(id);\n            };\n            getRequest.onerror = function (event) {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot Update to the Local database\" + databaseName,\n                    \"data\": event,\n                    \"body\": id\n                };\n                reject(errorObject);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot remove object from database because you cannot open the Local database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SettingData } from \"../DataStructures/SettingData\";\nimport { BaseUrl } from \"../DataStructures/BaseUrl\";\n/**\n * version of the database. If you want to change the database then you must update this version also.\n */\nvar version = 9;\n/**\n * This class will help us store the indexdb  reference in memory and not go back to index db.\n */\nexport class IndexDb {\n}\n/**\n *\n * @param databaseName not required actually. This is not used you can pass anything.\n * @returns a promise that either resolves or rejects opening the database.\n */\nexport function openDatabase(databaseName) {\n    return new Promise(function (resolve, reject) {\n        // if the indexdb is already initialized then you do not need to again initialize the db so you can get \n        // from memory.\n        if (IndexDb.db) {\n            resolve(IndexDb.db);\n        }\n        // the name of the database is passed here. We are statically passing the dbName with inputs from user\n        // the BASE_URL is the api that the framework calls\n        // the BASE_APPLICATION is a thing that differentiates an application from another so no two application create\n        // and use the same index db.\n        let dbName = BaseUrl.BASE_URL + \"_FreeSchema\" + BaseUrl.BASE_APPLICATION;\n        // open the database.\n        const request = indexedDB.open(dbName, version);\n        // in case that the database is not opened then log the error.\n        // then we delete the database that is already present with the name\n        // then again try to create the database, since this is a temporary database so it might not matter\n        // but this is a point that we might need to be careful about.\n        // we then reject the promise and report this problem.\n        request.onerror = (event) => {\n            console.error(\"Why didn't you allow my web app to use IndexedDB?!\", event);\n            indexedDB.deleteDatabase(dbName);\n            openDatabase(databaseName);\n            reject(event);\n        };\n        // in case that the database is allowed to be opened then we return the database object.\n        request.onsuccess = function (event) {\n            let target = event.target;\n            IndexDb.db = target.result;\n            resolve(IndexDb.db);\n        };\n        // in case that the version is upgraded then we delete all the old databases and then create a new database.\n        // version upgrade is a way which we can clean up old databases and its structures.\n        request.onupgradeneeded = (event) => {\n            let target = event.target;\n            let db = target.result;\n            let conceptDb = \"concept\";\n            let connectionDb = \"connection\";\n            let settings = \"settings\";\n            console.log(\"this is the version update for index\", version);\n            if (db.objectStoreNames.contains(conceptDb)) {\n                db.deleteObjectStore(conceptDb);\n            }\n            if (db.objectStoreNames.contains(connectionDb)) {\n                db.deleteObjectStore(connectionDb);\n            }\n            if (db.objectStoreNames.contains(settings)) {\n                db.deleteObjectStore(settings);\n            }\n            if (!db.objectStoreNames.contains(conceptDb)) { // if there's no database name\n                let objectStore = db.createObjectStore(conceptDb, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                    // you can do something here after the db has been created.\n                };\n            }\n            if (!db.objectStoreNames.contains(connectionDb)) { // if there's no database name\n                let objectStore = db.createObjectStore(connectionDb, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                    // you can do something here after the db has been created.\n                };\n            }\n            if (!db.objectStoreNames.contains(settings)) {\n                let objectStore = db.createObjectStore(settings, { keyPath: 'id' }); // create it\n                objectStore.transaction.oncomplete = (event) => {\n                    // you can do something here after the db has been created.\n                };\n            }\n            resolve(db);\n        };\n    });\n}\n/**\n *\n * @param databaseName name of the database that you want to store data to.\n * @param object any object that can be stored but keep in mind it must follow the convention that we created\n * while creating the datbase.\n * @returns a promise that if a store is successful then the obejct is returned else rejects with the event.\n */\nexport function storeToDatabase(databaseName, object) {\n    return new Promise(function (resolve, reject) {\n        console.log(\"this is storing to the database\", object);\n        openDatabase(databaseName).then((db) => {\n            if (object.id != 0) {\n                let transaction = db.transaction(databaseName, \"readwrite\");\n                let objStore = transaction.objectStore(databaseName);\n                const request = objStore.add(object);\n                request.onsuccess = (event) => {\n                    resolve(object);\n                };\n                request.onerror = (event) => {\n                    let errorObject = {\n                        \"status\": 400,\n                        \"ok\": false,\n                        \"message\": \"Cannot store to the database\" + databaseName,\n                        \"data\": event,\n                        \"body\": object\n                    };\n                    reject(errorObject);\n                };\n            }\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot store to the database because you cannot open the database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n/**\n  *\n  * @param databaseName name of the database\n  * @param object this is the object that you want to update\n  * @returns returns the object if it is updated successfully.\n  */\nexport function UpdateToDatabase(databaseName, object) {\n    return new Promise(function (resolve, reject) {\n        console.log(\"this is wriring to the database\", object);\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objStore = transaction.objectStore(databaseName);\n            const request = objStore.put(object);\n            request.onsuccess = (event) => {\n                resolve(object);\n            };\n            request.onerror = (event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot Update to the database\" + databaseName,\n                    \"data\": event,\n                    \"body\": object\n                };\n                reject(errorObject);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot update to database because you cannot open the database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n/**\n *\n * @returns This returns the last object from the database.\n */\nexport function GetLastSettingsFromDatabase() {\n    return new Promise(function (resolve, reject) {\n        let databaseName = \"settings\";\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objectStore = transaction.objectStore(databaseName);\n            let allobjects = objectStore.getAll();\n            allobjects.onsuccess = () => {\n                let settingsData = new SettingData(false);\n                let settingsArray = allobjects.result;\n                for (let i = 0; i < settingsArray.length; i++) {\n                    settingsData = settingsArray[i];\n                    settingsData = settingsData;\n                }\n                resolve(settingsData);\n            };\n            allobjects.onerror = (event) => {\n                reject(event);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot get last object from database because you cannot open the database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n/**\n *\n * @param object SettingData\n * @returns this will update the indexdb with the ai flag so that another time we do not have to pull\n *  ai data from the api.\n */\nexport function AiUpdateFlag(object) {\n    return new Promise(function (resolve, reject) {\n        let databaseName = \"settings\";\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objStore = transaction.objectStore(databaseName);\n            const request = objStore.put(object);\n            request.onsuccess = (event) => {\n                resolve(object);\n            };\n            request.onerror = (event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot update AI flag\",\n                    \"data\": event,\n                    \"body\": object\n                };\n                reject(errorObject);\n            };\n        })\n            .catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot update AI flag because you cannot open the database\",\n                \"data\": event\n            };\n            reject(errorObject);\n        });\n    });\n}\n/**\n *  this function will return all the objects that are in the database\n * @param databaseName name of the database\n * @returns all the objects that are in the database\n */\nexport function getObjectsFromIndexDb(databaseName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise(function (resolve, reject) {\n            openDatabase(databaseName).then((db) => {\n                let ConceptList = [];\n                let transaction = db.transaction(databaseName, \"readwrite\");\n                let objectStore = transaction.objectStore(databaseName);\n                let allobjects = objectStore.getAll();\n                allobjects.onsuccess = () => {\n                    const students = allobjects.result;\n                    for (let i = 0; i < students.length; i++) {\n                        ConceptList.push(students[i]);\n                    }\n                    resolve(ConceptList);\n                };\n            }).catch((event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot get objects from the database because you cannot open the database\",\n                    \"data\": event\n                };\n                reject(errorObject);\n            });\n        });\n    });\n}\n/**\n *\n * @param databaseName name of the database\n * @param id the id that we need to remove from the database (this is the index)\n * @returns an id if the deletion is successful and error with even in case it cannot.\n */\nexport function removeFromDatabase(databaseName, id) {\n    return new Promise(function (resolve, reject) {\n        openDatabase(databaseName).then((db) => {\n            let transaction = db.transaction(databaseName, \"readwrite\");\n            let objectStore = transaction.objectStore(databaseName);\n            const request = objectStore.delete(Number(id));\n            request.onsuccess = function (event) {\n                resolve(id);\n            };\n            request.onerror = (event) => {\n                let errorObject = {\n                    \"status\": 400,\n                    \"ok\": false,\n                    \"message\": \"Cannot remove from the database\" + databaseName,\n                    \"data\": event\n                };\n                reject(errorObject);\n            };\n        }).catch((event) => {\n            let errorObject = {\n                \"status\": 400,\n                \"ok\": false,\n                \"message\": \"Cannot remove from the database because you cannot open the database\",\n                \"data\": event,\n                \"body\": id\n            };\n            reject(errorObject);\n        });\n    });\n}\n", "import { Connection } from \"../DataStructures/Connection\";\nimport { CreateDefaultConcept } from \"../Services/CreateDefaultConcept\";\nexport function CheckIfConceptsExistsInArray(conceptList = [], concept) {\n    let foundConcept = CreateDefaultConcept();\n    if (Array.isArray(conceptList)) {\n        const check = conceptList.find(c => c.id === concept.id);\n        if (check) {\n            foundConcept = check;\n        }\n    }\n    return foundConcept;\n}\n// export function CheckIfTypeConceptExistsInArray(\n//   conceptList: Concept[] = [],\n//   concept: Concept,\n// ) {\n//   let newConceptType = concept.type?.characterValue;\n//   if(!newConceptType?.startsWith(\"the_\")){\n//     newConceptType = \"the_\" + newConceptType;\n//   }\n//   let startsWith = conceptList[i].type?.characterValue;\n//   if(!startsWith?.startsWith(\"the_\")){\n//     startsWith = \"the_\" + startsWith;\n//   }\n//   let foundConcept = CreateDefaultConcept()\n//   if (Array.isArray(conceptList)) {\n//     const check = conceptList.find(c => c.typeId == concept.typeId)\n//     if (check) {\n//       foundConcept = check\n//     }\n//   }\n//   return foundConcept\n// }\nexport function CheckIfTypeConceptsExistsInArray(conceptList = [], concept) {\n    var _a, _b;\n    let foundConcepts = [];\n    let newConceptType = (_a = concept.type) === null || _a === void 0 ? void 0 : _a.characterValue;\n    if (!(newConceptType === null || newConceptType === void 0 ? void 0 : newConceptType.startsWith(\"the_\"))) {\n        newConceptType = \"the_\" + newConceptType;\n    }\n    if (Array.isArray(conceptList)) {\n        for (let i = 0; i < conceptList.length; i++) {\n            let startsWith = (_b = conceptList[i].type) === null || _b === void 0 ? void 0 : _b.characterValue;\n            if (!(startsWith === null || startsWith === void 0 ? void 0 : startsWith.startsWith(\"the_\"))) {\n                startsWith = \"the_\" + startsWith;\n            }\n            if (concept.typeId == conceptList[i].typeId || newConceptType == startsWith) {\n                foundConcepts.push(conceptList[i]);\n            }\n        }\n    }\n    return foundConcepts;\n}\nexport function CheckIfTypeLConceptsExistsInArray(conceptList = [], concept) {\n    let foundConcepts = [];\n    let newConceptType = concept.typeCharacter;\n    if (!(newConceptType === null || newConceptType === void 0 ? void 0 : newConceptType.startsWith(\"the_\"))) {\n        newConceptType = \"the_\" + newConceptType;\n    }\n    if (Array.isArray(conceptList)) {\n        for (let i = 0; i < conceptList.length; i++) {\n            let startsWith = conceptList[i].typeCharacter;\n            if (!(startsWith === null || startsWith === void 0 ? void 0 : startsWith.startsWith(\"the_\"))) {\n                startsWith = \"the_\" + startsWith;\n            }\n            if (concept.typeId == conceptList[i].typeId || newConceptType == startsWith) {\n                foundConcepts.push(conceptList[i]);\n            }\n        }\n    }\n    return foundConcepts;\n}\nexport function CheckIfConnectionExistsInArray(connectionList = [], connection) {\n    let foundConnection = new Connection(0, 0, 0, 0, 0, 0, 0);\n    if (Array.isArray(connectionList)) {\n        const check = connectionList.find(c => c.id === connection.id);\n        if (check) {\n            foundConnection = check;\n        }\n    }\n    return foundConnection;\n}\nexport function CheckIfToTheConceptExistsInConnectionArray(connectionList = [], conceptId) {\n    let foundConnection = new Connection(0, 0, 0, 0, 0, 0, 0);\n    if (Array.isArray(connectionList)) {\n        const check = connectionList.find(c => c.toTheConceptId === conceptId);\n        if (check) {\n            foundConnection = check;\n        }\n        const toCheck = connectionList.find(c => c.ofTheConceptId === conceptId);\n        if (toCheck) {\n            foundConnection = toCheck;\n        }\n    }\n    return foundConnection;\n}\nexport function CheckAllConnectionsConnectedInConnectionArray(connectionList = [], conceptId) {\n    let foundConnections = [];\n    if (Array.isArray(connectionList)) {\n        const check = connectionList.find(c => c.toTheConceptId == conceptId);\n        if (check) {\n            foundConnections.push(check);\n        }\n        const toCheck = connectionList.find(c => c.ofTheConceptId == conceptId);\n        if (toCheck) {\n            foundConnections.push(toCheck);\n        }\n    }\n    return foundConnections;\n}\nexport function CheckAllConnectionsConnectedInLConnectionArray(connectionList = [], conceptId) {\n    let foundConnections = [];\n    if (Array.isArray(connectionList)) {\n        const check = connectionList.find(c => c.toTheConceptId == conceptId);\n        if (check) {\n            foundConnections.push(check);\n        }\n        const toCheck = connectionList.find(c => c.ofTheConceptId == conceptId);\n        if (toCheck) {\n            foundConnections.push(toCheck);\n        }\n    }\n    return foundConnections;\n}\n", "export function RemoveConceptFromList(conceptList = [], concept) {\n    if (Array.isArray(conceptList)) {\n        conceptList.splice(conceptList.findIndex(function (i) {\n            return i.id === concept.id;\n        }), 1);\n    }\n}\nexport function RemoveConnectionFromList(connectionList = [], connection) {\n    if (Array.isArray(connectionList)) {\n        connectionList.splice(connectionList.findIndex(function (i) {\n            return i.id === connection.id;\n        }), 1);\n    }\n}\nexport function RemoveLConnectionFromList(connectionList = [], connection) {\n    if (Array.isArray(connectionList)) {\n        connectionList.splice(connectionList.findIndex(function (i) {\n            return i.id === connection.id;\n        }), 1);\n    }\n}\n", "export default function InsertUniqueNumber(Array, toInsert) {\n    if (Array.indexOf(toInsert) === -1) {\n        Array.push(toInsert);\n    }\n    return Array;\n}\n", "export function CheckForConnectionDeletion(newConnections = [], oldConnections = []) {\n    // for(let i=0; i<oldConnections.length; i++){\n    //     if(Array.isArray(newConnections)){\n    //         if(!newConnections.find(obj => obj.id === oldConnections[i].id)){\n    //             ConnectionData.RemoveConnection(oldConnections[i]);\n    //        }\n    //     }\n    // }\n}\nexport function CheckForConnectionDeletionWithIds(newConnectionIds = [], oldConnections = []) {\n    // for(let i=0; i<oldConnections.length; i++){\n    //     if(!newConnectionIds.includes(oldConnections[i].id)){\n    //           ConnectionData.RemoveConnection(oldConnections[i]);\n    //     }\n    // }\n}\n", "/**\n *\n * @param ms The time required to wait before executing this function\n * @param callback This is the function that needs to be executed\n * @returns returns a promise for the resolve\n */\nexport function DelayFunctionExecution(ms, callback) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(callback);\n        }, ms);\n    });\n}\n", "import { FreeSchemaResponse } from \"../../DataStructures/Responses/ErrorResponse\";\nexport function HandleHttpError(response) {\n    if (response.status == 401 || response.status == 406) {\n        let errorResponse = new FreeSchemaResponse(response.statusText, false, response.status, \"\");\n        errorResponse.setUrl(response.url);\n        throw errorResponse;\n    }\n    else if (response.status == 500) {\n        let errorResponse = new FreeSchemaResponse(response.statusText, false, response.status, \"\");\n        errorResponse.setUrl(response.url);\n        throw errorResponse;\n    }\n}\nexport function HandleInternalError(error, url = \"\") {\n    if (error.status) {\n        let errorResponse = new FreeSchemaResponse(error.message, false, error.status, error.stack);\n        errorResponse.setUrl(url);\n        throw errorResponse;\n    }\n    else {\n        let errorResponse = new FreeSchemaResponse(error.message, false, 500, error.stack);\n        errorResponse.setUrl(url);\n        throw errorResponse;\n    }\n    throw error;\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from '../../DataStructures/ConceptData';\nimport { CreateDefaultConcept } from '../../Services/CreateDefaultConcept';\nimport { default as GetTheConcept } from '../../Services/GetTheConcept';\n// this is a different type of recurisve fetch because here all the concepts and connections are passed as it is\n// so there is no need to query the connections and concepts from outside\n// if the concept connection is not found then it will go to the backend to fetch it\nexport function recursiveFetchNew(id_1, connectionList_1, conceptList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionList, conceptList, compositionList, visitedConcepts = []) {\n        var _a, _b;\n        let output = {};\n        const arroutput = [];\n        if (id == 0) {\n            return '';\n        }\n        // get concept from a list of concepts\n        let concept = getConceptFromList(conceptList, id);\n        // if we cannot find the concept from the concept list then find it from the backend\n        if ((concept == null || concept.id == 0) && id != null && id != undefined) {\n            // get the concepts tries to find it from the binary tree else from the backend if cannot find it then\n            // it will become null\n            const conceptString = yield GetTheConcept(id);\n            concept = conceptString;\n        }\n        if (concept.id != 0) {\n            // if the concept type is non existent then you have to get the type from the backend\n            if (concept.type == null) {\n                // get the concept type id from the concept which is stored in typeId\n                const toConceptTypeId = concept.typeId;\n                //\n                let toConceptType = getConceptFromList(conceptList, toConceptTypeId);\n                concept.type = toConceptType;\n                if (toConceptType == null &&\n                    toConceptTypeId != null &&\n                    toConceptTypeId != undefined) {\n                    const conceptString = yield GetTheConcept(toConceptTypeId);\n                    toConceptType = conceptString;\n                    concept.type = toConceptType;\n                }\n            }\n        }\n        //let mainString = concept?.type?.characterValue ?? ''\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            // loop over all the connections\n            for (let i = 0; i < connectionList.length; i++) {\n                // if the connection has the id that has been passed in the recursion\n                // oftheconceptId -----> toTheConceptId\n                // this only gives the valid concept id that are inside of this id\n                if (connectionList[i].ofTheConceptId == id) {\n                    // then take out the toTheConceptId from the connection\n                    const toConceptId = connectionList[i].toTheConceptId;\n                    if (compositionList.includes(id)) {\n                        // convert the toTheConceptId to a real Concept Object\n                        let toConcept = getConceptFromList(conceptList, toConceptId);\n                        // get the concept\n                        if ((toConcept == null || toConcept.id == 0) &&\n                            toConceptId != null &&\n                            toConceptId != undefined) {\n                            const conceptString = yield GetTheConcept(toConceptId);\n                            toConcept = conceptString;\n                        }\n                        // if the toConcept is valid\n                        if (toConcept.id != 0) {\n                            if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                                // get the type in casee type is not defined\n                                const toConceptTypeId = toConcept.typeId;\n                                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                                toConcept.type = toConceptType;\n                                if (toConceptType == null &&\n                                    toConceptTypeId != null &&\n                                    toConceptTypeId != undefined) {\n                                    const conceptString = yield GetTheConcept(toConceptTypeId);\n                                    toConceptType = conceptString;\n                                    toConcept.type = toConceptType;\n                                }\n                            }\n                        }\n                        // the regex to filter out the the_ from the type concepts\n                        const regex = 'the_';\n                        // then create the key of the key value pair that is the type of the concept\n                        const localmainString = (_b = (_a = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : '';\n                        // replace the the_ with an empty string\n                        const localKey = localmainString.replace(regex, '');\n                        // if the  type  is a number then put it inside of an object\n                        if (isNaN(Number(localKey))) {\n                            if (localKey) {\n                                const result = yield recursiveFetchNew(toConceptId, connectionList, conceptList, compositionList, visitedConcepts);\n                                output[localKey] = result;\n                            }\n                        }\n                        else {\n                            // if the type is a number then put it inside an array\n                            const result = yield recursiveFetchNew(toConceptId, connectionList, conceptList, compositionList, visitedConcepts);\n                            arroutput[localKey] = result;\n                            output = arroutput;\n                        }\n                    }\n                }\n            }\n        }\n        return output;\n    });\n}\n// gets the concept from the list of concepts using the conceptId\nfunction getConceptFromList(conceptList, conceptId) {\n    let concept = CreateDefaultConcept();\n    for (let i = 0; i < conceptList.length; i++) {\n        if (conceptId == conceptList[i].id) {\n            concept = conceptList[i];\n            return concept;\n        }\n    }\n    return concept;\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConceptsData } from '../../DataStructures/ConceptData';\nimport { GetAllConnectionsOfComposition } from '../../Api/GetAllConnectionsOfComposition';\nimport { GetConnectionBulk } from '../../Api/GetConnectionBulk';\nimport { GetConcept } from '../../Api/GetConcept';\nimport { recursiveFetchNew } from './BuildComposition';\nimport { recursiveFetch } from '../GetComposition';\nimport { Composition } from '../../DataStructures/Composition/Composition';\nimport { CompositionBinaryTree } from '../../DataStructures/Composition/CompositionBinaryTree';\nimport { BulkConceptGetterApi } from '../../Api/GetConceptBulk';\n// get the composition with the passed id\n// here an optional parameter is passed which will pass the internal connections if given\n// else the function is designed to get the internal connections itself\nexport function GetCompositionWithCache(id_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionListPassed = []) {\n        var _a, _b;\n        let connectionList = [];\n        const conceptIdList = [];\n        let returnOutput = {};\n        let output = {};\n        const x = yield CompositionBinaryTree.getNodeFromTree(id);\n        const compositionList = [];\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            const conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        if (x == null) {\n            let connectionListString = [];\n            if (connectionListPassed.length > 0) {\n                connectionListString = getMyConnections(id, connectionListPassed);\n            }\n            else {\n                connectionListString = yield GetAllConnectionsOfComposition(id);\n            }\n            connectionList = connectionListString;\n            //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n            for (let i = 0; i < connectionList.length; i++) {\n                if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                    compositionList.push(connectionList[i].ofTheConceptId);\n                    conceptIdList.push(connectionList[i].ofTheConceptId);\n                }\n                if (!conceptIdList.includes(connectionList[i].toTheConceptId)) {\n                    conceptIdList.push(connectionList[i].toTheConceptId);\n                }\n            }\n            SaveToCompositionCache(concept, connectionList, conceptIdList, compositionList);\n            let visitedConcepts = [];\n            output = yield recursiveFetch(id, connectionList, compositionList, visitedConcepts);\n            const mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : '';\n            returnOutput[mainString] = output;\n        }\n        else {\n            output = x.value.GetDataCache();\n            returnOutput = output;\n        }\n        if (concept.id == 0) {\n            return '';\n        }\n        return returnOutput;\n    });\n}\n// this gets the list of connections of a composition from a list of bulk connection pull\nfunction getMyConnections(id, connectionList) {\n    const connections = [];\n    for (let i = 0; i < connectionList.length; i++) {\n        if (connectionList[i].typeId == id) {\n            connections.push(connectionList[i]);\n        }\n    }\n    return connections;\n}\n// get the composition with the passed id\n// here an optional parameter is passed which will pass the internal connections if given\n// else the function is designed to get the internal connections itself\n// this function has a  format of data -- id\nexport function GetCompositionWithDataIdWithCache(id_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionListPassed = []) {\n        var _a, _b;\n        let FinalReturn = {};\n        let connectionList = [];\n        const conceptIdList = [];\n        let output;\n        const returnOutput = {};\n        const x = yield CompositionBinaryTree.getNodeFromTree(id);\n        const compositionList = [];\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            const conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        if (x == null) {\n            let connectionListString = [];\n            if (connectionListPassed.length > 0) {\n                connectionListString = getMyConnections(id, connectionListPassed);\n            }\n            else {\n                connectionListString = yield GetAllConnectionsOfComposition(id);\n            }\n            connectionList = connectionListString;\n            //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n            for (let i = 0; i < connectionList.length; i++) {\n                if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                    compositionList.push(connectionList[i].ofTheConceptId);\n                    conceptIdList.push(connectionList[i].ofTheConceptId);\n                }\n                if (!conceptIdList.includes(connectionList[i].toTheConceptId)) {\n                    conceptIdList.push(connectionList[i].toTheConceptId);\n                }\n            }\n            SaveToCompositionCache(concept, connectionList, conceptIdList, compositionList);\n            output = yield recursiveFetch(id, connectionList, compositionList);\n            const mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : '';\n            returnOutput[mainString] = output;\n            FinalReturn[\"created_at\"] = concept.entryTimeStamp;\n            FinalReturn['data'] = returnOutput;\n            FinalReturn['id'] = id;\n        }\n        else {\n            output = x.value.GetDataCache();\n            FinalReturn = output;\n        }\n        if (concept.id == 0) {\n            return '';\n        }\n        return FinalReturn;\n    });\n}\n// this function needs to be passed with bulk compositions and bulk internal connections of them\n// so that i can conver them to actual list of compositions\nexport function GetCompositionWithDataIdBulk(ids, connections) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connectionList = [];\n        const compositions = [];\n        const newConnections = yield GetConnectionBulk(connections);\n        connectionList = newConnections;\n        for (let i = 0; i < ids.length; i++) {\n            const output = yield GetCompositionWithDataIdWithCache(ids[i], connectionList);\n            if (output) {\n                compositions.push(output);\n            }\n        }\n        return compositions;\n    });\n}\nfunction SaveToCompositionCache(concept, connections, conceptIdList, numbers) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const composition = new Composition();\n        const concepts = yield BulkConceptGetter(conceptIdList);\n        composition.connections = connections;\n        composition.concepts = concepts;\n        composition.id = concept.id;\n        composition.subcompositions = numbers;\n        composition.mainConcept = concept;\n        let visitedConcepts = [];\n        const output = yield recursiveFetchNew(concept.id, connections, concepts, numbers, visitedConcepts);\n        composition.cached = output;\n        CompositionBinaryTree.addCompositionToTree(composition);\n    });\n}\nfunction BulkConceptGetter(conceptIds) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let conceptList = [];\n        const bulkConceptFetch = [];\n        for (let i = 0; i < (conceptIds === null || conceptIds === void 0 ? void 0 : conceptIds.length); i++) {\n            const conceptUse = yield ConceptsData.GetConcept(conceptIds[i]);\n            if (conceptUse.id == 0) {\n                bulkConceptFetch.push(conceptIds[i]);\n            }\n            else {\n                conceptList.push(conceptUse);\n            }\n        }\n        if ((bulkConceptFetch === null || bulkConceptFetch === void 0 ? void 0 : bulkConceptFetch.length) == 0) {\n            return conceptList;\n        }\n        else {\n            conceptList = yield BulkConceptGetterApi(bulkConceptFetch);\n        }\n        return conceptList;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateDefaultConcept } from '../CreateDefaultConcept';\nimport { Composition } from '../../DataStructures/Composition/Composition';\nimport MakeTheInstanceConcept from '../MakeTheInstanceConcept';\nimport { createTheConnection } from '../../Services/CreateTheConnection';\n// create a composition with caching mechanism\nexport function CreateTheCompositionWithCache(json_1) {\n    return __awaiter(this, arguments, void 0, function* (json, ofTheConceptId = null, ofTheConceptUserId = null, mainKey = null, userId = null, accessId = null, sessionInformationId = null, composition = null) {\n        const localUserId = userId !== null && userId !== void 0 ? userId : 999;\n        const localAccessId = accessId !== null && accessId !== void 0 ? accessId : 4;\n        const localSessionId = sessionInformationId !== null && sessionInformationId !== void 0 ? sessionInformationId : 999;\n        let MainKeyLocal = mainKey !== null && mainKey !== void 0 ? mainKey : 0;\n        let MainConcept = CreateDefaultConcept();\n        if (composition == null) {\n            // if no composition is passed then create a new composition\n            composition = new Composition();\n        }\n        for (const key in json) {\n            if (typeof json[key] == 'object' || Array.isArray(json[key])) {\n                const conceptString = yield MakeTheInstanceConcept(key, '', true, localUserId, localAccessId, localSessionId);\n                const concept = conceptString;\n                // if (typeof json[key] != 'string' && typeof json[key] != 'number') {\n                if (ofTheConceptId == null && ofTheConceptUserId == null) {\n                    // if there is no parent conceptId and conceptUserId passed then we know this is the main concept\n                    // everything is related to this concept.\n                    let localMainKey = MainKeyLocal;\n                    MainConcept = concept;\n                    localMainKey = concept.id;\n                    MainKeyLocal = concept.id;\n                    composition.concepts.push(concept);\n                    composition.id = concept.id;\n                    yield CreateTheCompositionWithCache(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId, composition);\n                }\n                else {\n                    // this is the concept which has parent passed onto it and this is a subcomposition\n                    const ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                    const ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 999;\n                    const localMainKey = MainKeyLocal;\n                    MainConcept = concept;\n                    composition.concepts.push(concept);\n                    const connectionString = yield createTheConnection(ofThe, ofTheUser, concept.id, localMainKey);\n                    const connection = connectionString;\n                    composition.connections.push(connection);\n                    yield CreateTheCompositionWithCache(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId, composition);\n                }\n                if (json[key] != null && json[key] != undefined) {\n                    composition.subcompositions.push(concept.id);\n                }\n            }\n            else {\n                // this is the part where the concept is now a key value pair and has the actual data\n                const ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                const ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 999;\n                const localMainKey = MainKeyLocal;\n                const conceptString = yield MakeTheInstanceConcept(key, json[key], false, localUserId, localAccessId, localSessionId);\n                const concept = conceptString;\n                composition.concepts.push(concept);\n                const connectionString = yield createTheConnection(ofThe, ofTheUser, concept.id, localMainKey);\n                const connection = connectionString;\n                composition.connections.push(connection);\n            }\n        }\n        // return the main concept\n        return MainConcept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConceptByCharacterValue } from \"../../Api/GetConceptByCharacterValue\";\nimport { GetConceptByCharacterAndCategoryDirectApi } from \"../../Api/SearchConcept/GetConceptByCharacterAndCategoryDirect\";\nimport { ConceptsData, CreateDefaultConcept, SplitStrings } from \"../../app\";\nexport function GetConceptByCharacterAndCategory(character) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = CreateDefaultConcept();\n        if (character == \"the\") {\n            concept.id = 1;\n            concept.typeId = 5;\n            concept.characterValue = \"the\";\n            return concept;\n        }\n        let splittedStringArray = SplitStrings(character);\n        if (splittedStringArray.length > 1) {\n            let category = 1;\n            let prefix = yield GetConceptByCharacterAndCategory(splittedStringArray[0]);\n            if (prefix.id != 0) {\n                category = prefix.id;\n            }\n            concept = yield GetConceptByCharacterAndCategoryFromMemory(character, category);\n        }\n        else if (splittedStringArray[0] == character) {\n            concept = yield GetConceptByCharacter(character);\n        }\n        return concept;\n    });\n}\nexport function GetConceptByCharacter(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield ConceptsData.GetConceptByCharacterAndTypeLocal(characterValue, 51);\n        if (concept.id == 0) {\n            concept = yield GetConceptByCharacterValue(characterValue);\n        }\n        return concept;\n    });\n}\nexport function GetConceptByCharacterAndCategoryFromMemory(character, category) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield ConceptsData.GetConceptByCharacterAndCategoryLocal(character, category);\n        if (concept.id == 0) {\n            concept = yield GetConceptByCharacterAndCategoryDirectApi(character, category);\n        }\n        return concept;\n    });\n}\n", "import { Connection } from \"../../DataStructures/Connection\";\nimport { CreateDefaultConcept } from \"../CreateDefaultConcept\";\nimport { CreateDefaultLConcept } from \"../Local/CreateDefaultLConcept\";\nexport function convertFromConceptToLConcept(concept) {\n    var _a, _b;\n    const LConcept = CreateDefaultLConcept();\n    LConcept.id = concept.id;\n    LConcept.ghostId = concept.ghostId;\n    LConcept.userId = concept.userId;\n    LConcept.accessId = concept.accessId;\n    LConcept.categoryId = concept.categoryId;\n    LConcept.characterValue = concept.characterValue;\n    LConcept.entryTimeStamp = concept.entryTimeStamp;\n    LConcept.typeId = concept.typeId;\n    LConcept.type = concept.type;\n    LConcept.isTemp = false;\n    LConcept.typeCharacter = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n    return LConcept;\n}\nexport function convertFromLConceptToConcept(lconcept) {\n    const concept = CreateDefaultConcept();\n    concept.id = lconcept.id;\n    concept.ghostId = lconcept.ghostId;\n    concept.userId = lconcept.userId;\n    concept.accessId = lconcept.accessId;\n    concept.entryTimeStamp = lconcept.entryTimeStamp;\n    concept.typeId = lconcept.typeId;\n    concept.categoryId = lconcept.categoryId;\n    return concept;\n}\nexport function convertFromConnectionToLConnection(connection) {\n    const Lconnection = new Connection(0, 0, 0, 0, 0, 0, 0);\n    Lconnection.id = connection.id;\n    Lconnection.ghostId = connection.ghostId;\n    Lconnection.accessId = connection.accessId;\n    Lconnection.ofTheConceptId = connection.ofTheConceptId;\n    Lconnection.toTheConceptId = connection.toTheConceptId;\n    Lconnection.entryTimeStamp = connection.entryTimeStamp;\n    Lconnection.typeId = connection.typeId;\n    Lconnection.isTemp = false;\n    return Lconnection;\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DelayFunctionExecution } from \"../app\";\nimport { getObjectsFromIndexDb } from \"../Database/indexeddb\";\nimport { ConceptsData } from \"../DataStructures/ConceptData\";\nimport { IdentifierFlags } from \"../DataStructures/IdentifierFlags\";\n/**\n * This function builds up the binary tree on startup from the indexdb\n */\nexport default function CreateConceptBinaryTreeFromIndexDb() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let conceptList = yield getObjectsFromIndexDb(\"concept\");\n            if (Array.isArray(conceptList)) {\n                for (let i = 0; i < conceptList.length; i++) {\n                    let concept = conceptList[i];\n                    ConceptsData.AddConceptToMemory(concept);\n                }\n            }\n            IdentifierFlags.isDataLoaded = true;\n            IdentifierFlags.isCharacterLoaded = true;\n            IdentifierFlags.isTypeLoaded = true;\n        }\n        catch (error) {\n            yield DelayFunctionExecution(2000, CreateConceptBinaryTreeFromIndexDb());\n            let errorObject = {\n                \"message\": \"Cannot create Binary Tree Concept\",\n                \"ok\": false,\n                \"status\": 400,\n                \"data\": error\n            };\n            throw errorObject;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConnectionOfTheConcept } from \"../Api/GetConnectionOfTheConcept\";\nimport { Connection } from \"../DataStructures/Connection\";\nimport { SyncData } from \"../DataStructures/SyncData\";\nimport { CreateDefaultConcept } from \"./CreateDefaultConcept\";\nimport { CreateTheConnectionGeneral } from \"./CreateTheConnectionGeneral\";\nimport { DeleteConnectionById } from \"./DeleteConnection\";\nimport GetTheConcept from \"./GetTheConcept\";\nimport MakeTheInstanceConcept from \"./MakeTheInstanceConcept\";\nexport function CreateConnectionBetweenTwoConcepts(ofTheConcept_1, toTheConcept_1, linker_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConcept, toTheConcept, linker, both = false, count = false) {\n        var _a, _b;\n        let userId = ofTheConcept.userId;\n        let accessId = 4;\n        if (both) {\n            let prefix1 = ((_a = toTheConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\";\n            let linkerAdd1 = linker + \"_by\";\n            let backwardLinker = prefix1 + \"_\" + linkerAdd1;\n            if (count) {\n                yield CountRelationship(linkerAdd1, toTheConcept, userId);\n            }\n            let connectionConceptReverse = yield MakeTheInstanceConcept(\"connection\", backwardLinker, false, 999, 999, 999);\n            let newConnection = new Connection(0, toTheConcept.id, ofTheConcept.id, userId, connectionConceptReverse.id, 1000, accessId);\n            SyncData.AddConnection(newConnection);\n        }\n        let prefix = ((_b = ofTheConcept.type) === null || _b === void 0 ? void 0 : _b.characterValue) + \"_s\";\n        let linkerAdd = linker + \"_s\";\n        let forwardLinker = prefix + \"_\" + linkerAdd;\n        if (count) {\n            yield CountRelationship(linkerAdd, ofTheConcept, userId);\n        }\n        let connectionConcept = yield MakeTheInstanceConcept(\"connection\", forwardLinker, false, 999, 999, 999);\n        let newConnection = new Connection(0, ofTheConcept.id, toTheConcept.id, userId, connectionConcept.id, 1000, accessId);\n        SyncData.AddConnection(newConnection);\n        return newConnection;\n    });\n}\nexport function CountRelationship(linker_1, concept_1) {\n    return __awaiter(this, arguments, void 0, function* (linker, concept, passedUserId = null) {\n        var _a;\n        let concept1 = concept;\n        let userId = passedUserId !== null && passedUserId !== void 0 ? passedUserId : concept.userId;\n        let accessId = 4;\n        let sessionInformationId = 999;\n        let forwardLinkerCount = linker + \"_count\";\n        let forwardLinkerCountString = ((_a = concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\" + \"_\" + forwardLinkerCount;\n        let forwardLinkerCountConcept = yield MakeTheInstanceConcept(\"connection\", forwardLinkerCountString, false, userId, accessId, sessionInformationId);\n        let connectionsString = yield GetConnectionOfTheConcept(forwardLinkerCountConcept.id, concept.id, userId, 10, 1);\n        let connections = connectionsString;\n        let countConceptList = [];\n        let countConcept = CreateDefaultConcept();\n        for (let i = 0; i < connections.length; i++) {\n            let toConcept = yield GetTheConcept(connections[i].toTheConceptId);\n            countConceptList.push(toConcept);\n        }\n        if (countConceptList.length < 1) {\n            countConcept = yield MakeTheInstanceConcept(\"count\", \"1\", false, userId, accessId, sessionInformationId);\n        }\n        else {\n            let oldcountConcept = countConceptList[0];\n            let count = 0;\n            try {\n                count = Number(oldcountConcept.characterValue);\n            }\n            catch (ex) {\n                count = 0;\n            }\n            count = count + 1;\n            countConcept = yield MakeTheInstanceConcept(\"count\", count.toString(), false, userId, accessId, sessionInformationId);\n            for (let i = 0; i < connections.length; i++) {\n                DeleteConnectionById(connections[i].id);\n            }\n        }\n        let newConnection = new Connection(0, concept1.id, countConcept.id, concept1.userId, forwardLinkerCountConcept.id, 1000, accessId);\n        yield SyncData.AddConnection(newConnection);\n    });\n}\nexport function CreateConnectionBetweenTwoConceptsGeneral(ofTheConcept_1, toTheConcept_1, linker_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConcept, toTheConcept, linker, both = false, count = false) {\n        var _a, _b;\n        let userId = ofTheConcept.userId;\n        let accessId = 4;\n        if (both) {\n            let prefix1 = ((_a = toTheConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\";\n            let linkerAdd1 = linker + \"_by\";\n            let backwardLinker = prefix1 + \"_\" + linkerAdd1;\n            if (count) {\n                yield CountRelationship(linkerAdd1, toTheConcept, userId);\n            }\n            let connectionConceptReverse = yield MakeTheInstanceConcept(\"connection\", backwardLinker, false, 999, 999, 999);\n            let newConnection = new Connection(0, toTheConcept.id, ofTheConcept.id, userId, connectionConceptReverse.id, 1000, accessId);\n            SyncData.AddConnection(newConnection);\n        }\n        let prefix = ((_b = ofTheConcept.type) === null || _b === void 0 ? void 0 : _b.characterValue) + \"_s\";\n        let linkerAdd = linker + \"_s\";\n        let forwardLinker = prefix + \"_\" + linkerAdd;\n        if (count) {\n            yield CountRelationship(linkerAdd, ofTheConcept, userId);\n        }\n        let connectionConcept = yield MakeTheInstanceConcept(\"connection\", forwardLinker, false, 999, 999, 999);\n        let newConnection = yield CreateTheConnectionGeneral(ofTheConcept.id, ofTheConcept.userId, toTheConcept.id, connectionConcept.id, 1000, accessId);\n        return newConnection;\n    });\n}\n", "import { Concept } from \"../DataStructures/Concept\";\nexport function CreateDefaultConcept() {\n    let created_on = new Date();\n    let updated_on = new Date();\n    let concept = new Concept(0, 0, 0, 0, 0, \"0\", 0, false, created_on, updated_on, \"0\");\n    return concept;\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateDefaultConcept } from \"./CreateDefaultConcept\";\nimport { createTheConnection } from \"./CreateTheConnection\";\nimport MakeTheInstanceConcept from \"./MakeTheInstanceConcept\";\nexport default function CreateTheComposition(json_1) {\n    return __awaiter(this, arguments, void 0, function* (json, ofTheConceptId = null, ofTheConceptUserId = null, mainKey = null, userId = null, accessId = null, sessionInformationId = null) {\n        let localUserId = userId !== null && userId !== void 0 ? userId : 999;\n        let localAccessId = accessId !== null && accessId !== void 0 ? accessId : 4;\n        let localSessionId = sessionInformationId !== null && sessionInformationId !== void 0 ? sessionInformationId : 999;\n        let MainKeyLocal = mainKey !== null && mainKey !== void 0 ? mainKey : 0;\n        let MainConcept = CreateDefaultConcept();\n        for (const key in json) {\n            if ((typeof json[key] != 'string' && typeof json[key] != 'number')) {\n                if (ofTheConceptId == null && ofTheConceptUserId == null) {\n                    let localMainKey = MainKeyLocal;\n                    let conceptString = yield MakeTheInstanceConcept(key, \"\", true, localUserId, localAccessId, localSessionId);\n                    let concept = conceptString;\n                    MainConcept = concept;\n                    localMainKey = concept.id;\n                    MainKeyLocal = concept.id;\n                    yield CreateTheComposition(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId);\n                }\n                else {\n                    let ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                    let ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 999;\n                    let localMainKey = MainKeyLocal;\n                    let conceptString = yield MakeTheInstanceConcept(key, \"\", true, localUserId, localAccessId, localSessionId);\n                    let concept = conceptString;\n                    MainConcept = concept;\n                    yield createTheConnection(ofThe, ofTheUser, concept.id, localMainKey);\n                    yield CreateTheComposition(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId);\n                }\n            }\n            else {\n                let ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                let ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 10267;\n                let localMainKey = MainKeyLocal;\n                let conceptString = yield MakeTheInstanceConcept(key, json[key].toString(), false, localUserId, localAccessId, localSessionId);\n                let concept = conceptString;\n                yield createTheConnection(ofThe, ofTheUser, concept.id, localMainKey);\n            }\n        }\n        return MainConcept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTheConceptApi } from \"../Api/Create/CreateTheConceptApi\";\nimport { Concept } from \"../DataStructures/Concept\";\nimport { ReservedIds } from \"../DataStructures/ReservedIds\";\nimport { SyncData } from \"../DataStructures/SyncData\";\nimport { ConceptsData } from \"../app\";\nexport default function CreateTheConcept(referent, userId, categoryId, typeId, referentId, accessId, typeCharacter) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let id = yield ReservedIds.getId();\n        let isNew = true;\n        let created_on = new Date();\n        let updated_on = new Date();\n        // let concept = new Concept(id,userId,typeId,typeUserId,categoryId,categoryUserId,referentId, referentUserId, referent, securityId,\n        // securityUserId,accessId, accessUserId,sessionInformationId, sessionInformationUserId,isNew,created_on,updated_on);\n        let concept = new Concept(id, userId, typeId, categoryId, referentId, referent, accessId, isNew, created_on, updated_on, typeCharacter);\n        concept.isTemp = false;\n        SyncData.AddConcept(concept);\n        return concept;\n    });\n}\nexport function CreateTheConceptTemporary(referent, userId, categoryId, typeId, referentId, accessId, typeCharacter) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let id = yield ReservedIds.getId();\n        let isNew = true;\n        let created_on = new Date();\n        let updated_on = new Date();\n        // let concept = new Concept(id,userId,typeId,typeUserId,categoryId,referentId, referent,\n        //     accessId,isNew,created_on, updated_on);\n        let concept = new Concept(id, userId, typeId, categoryId, referentId, referent, accessId, isNew, created_on, updated_on, typeCharacter);\n        concept.isTemp = true;\n        return concept;\n    });\n}\nexport function CreateTheConceptImmediate(referent, userId, categoryId, typeId, referentId, accessId, typeCharacter) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let id = yield ReservedIds.getId();\n        let isNew = false;\n        let created_on = new Date();\n        let updated_on = new Date();\n        // let concept = new Concept(id,userId,typeId,typeUserId,categoryId,categoryUserId,referentId, referentUserId, referent, securityId,\n        //     securityUserId,accessId, accessUserId,sessionInformationId, sessionInformationUserId,isNew,created_on, updated_on);\n        let concept = new Concept(id, userId, typeId, categoryId, referentId, referent, accessId, isNew, created_on, updated_on, typeCharacter);\n        ConceptsData.AddConcept(concept);\n        CreateTheConceptApi([concept]);\n        //SyncData.AddConcept(concept);\n        return concept;\n    });\n}\n", "import { Connection } from \"../DataStructures/Connection\";\nimport { SyncData } from \"../DataStructures/SyncData\";\nimport { HandleInternalError } from \"./Common/ErrorPosting\";\n/**\n * This function is used to create a connection that is internal(inside of a composition)\n * @param ofTheConceptId Start of the connection\n * @param userId user id fo the user creating the connection\n * @param toTheConceptId the end of the connection\n * @param typeId this is the type of the connection\n * @returns\n */\nexport function createTheConnection(ofTheConceptId, userId, toTheConceptId, typeId) {\n    var orderId = 1;\n    var localUserId = userId;\n    var accessId = 4;\n    var connection = new Connection(0, ofTheConceptId, toTheConceptId, localUserId, typeId, orderId, accessId);\n    if (ofTheConceptId == toTheConceptId) {\n        connection.ofTheConceptId = 0;\n        connection.toTheConceptId = 1;\n        return connection;\n    }\n    try {\n        connection.isTemp = true;\n        connection.id = Math.floor(Math.random() * 100000000);\n        SyncData.AddConnection(connection);\n    }\n    catch (error) {\n        HandleInternalError(error);\n    }\n    return connection;\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Connection } from \"../DataStructures/Connection\";\nimport { ReservedConnectionIds } from \"../DataStructures/ReservedIds\";\nimport { FreeSchemaResponse } from \"../DataStructures/Responses/ErrorResponse\";\nimport { SyncData } from \"../DataStructures/SyncData\";\nexport function CreateTheConnectionGeneral(ofTheConceptId_1, ofTheConceptUserId_1, toTheConceptId_1, typeId_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConceptId, ofTheConceptUserId, toTheConceptId, typeId, orderId = 1, accessId = 4) {\n        if (ofTheConceptId > 0 && toTheConceptId > 0) {\n            var userId = ofTheConceptUserId;\n            var id = yield ReservedConnectionIds.getId();\n            var connection = new Connection(id, ofTheConceptId, toTheConceptId, userId, typeId, orderId, accessId);\n            if (ofTheConceptId == toTheConceptId) {\n                connection.ofTheConceptId = 0;\n                connection.toTheConceptId = 1;\n                return connection;\n            }\n            // this will cause the connection to go and update the existing with the reserved id\n            connection.toUpdate = true;\n            connection.isTemp = false;\n            SyncData.AddConnection(connection);\n            return connection;\n        }\n        else {\n            throw new FreeSchemaResponse(\"cannot create connection because id are negative \", false, 400, \"\");\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport DeleteTheConcept from \"../Api/DeleteTheConcept\";\nimport { BinaryCharacterTree } from \"../DataStructures/BinaryCharacterTree\";\nimport { BinaryTree } from \"../DataStructures/BinaryTree\";\nimport { BinaryTypeTree } from \"../DataStructures/BinaryTypeTree\";\nimport { ConnectionOfTheTree } from \"../DataStructures/ConnectionBinaryTree/ConnectionOfTheTree\";\nimport GetTheConcept from \"./GetTheConcept\";\nexport function DeleteConceptById(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var concept = yield GetTheConcept(id);\n        var typeId = concept.typeId;\n        var character = concept.characterValue;\n        yield BinaryTypeTree.removeTypeConcept(typeId, id);\n        yield BinaryCharacterTree.removeNodeByCharacter(character, id);\n        //removeFromDatabase(\"concept\",id);\n        yield DeleteTheConcept(id);\n        yield BinaryTree.removeNodeFromTree(id);\n        yield ConnectionOfTheTree.removeNodeFromTree(id);\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport DeleteTheConnection from \"../Api/DeleteTheConnection\";\nimport { ConnectionBinaryTree } from \"../DataStructures/ConnectionBinaryTree/ConnectionBinaryTree\";\nimport { ConnectionTypeTree } from \"../DataStructures/ConnectionBinaryTree/ConnectionTypeTree\";\nimport { GetConnectionById } from \"./GetConnections\";\nexport function DeleteConnectionById(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connection = yield GetConnectionById(id);\n        yield DeleteTheConnection(id);\n        //removeFromDatabase(\"connection\",id);\n        ConnectionBinaryTree.removeNodeFromTree(id);\n        ConnectionTypeTree.removeTypeConcept(connection.typeId, id);\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConceptBulk } from \"../Api/GetConceptBulk\";\n/**\n * This function takes in a list of connections and in bulk gets the concepts that are related with these connections.\n * @param connectionList list of connections whose concepts need to be found out.\n */\nexport function FindConceptsFromConnections() {\n    return __awaiter(this, arguments, void 0, function* (connectionList = []) {\n        let ConceptList = [];\n        if (connectionList.length > 0) {\n            for (let i = 0; i < connectionList.length; i++) {\n                if (!ConceptList.includes(connectionList[i].ofTheConceptId)) {\n                    ConceptList.push(connectionList[i].ofTheConceptId);\n                }\n                if (!ConceptList.includes(connectionList[i].toTheConceptId)) {\n                    ConceptList.push(connectionList[i].toTheConceptId);\n                }\n            }\n            yield GetConceptBulk(ConceptList);\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nexport function FindConnectionsOfCompositionsBulkInMemory() {\n    return __awaiter(this, arguments, void 0, function* (composition_ids = []) {\n        let FinalConnectionList = [];\n        for (let i = 0; i < composition_ids.length; i++) {\n            // let connectionList = await ConnectionData.GetConnectionsOfCompositionLocal(composition_ids[i]);\n            let connectionList = yield ConnectionData.GetConnectionsOfConcept(composition_ids[i]);\n            FinalConnectionList.push(...connectionList);\n        }\n        return FinalConnectionList;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConcept } from \"../Api/GetConcept\";\nimport { GetAllConnectionsOfComposition } from \"../Api/GetAllConnectionsOfComposition\";\nimport { ConceptsData } from \"../DataStructures/ConceptData\";\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nimport { GetTheConcept } from \"../app\";\nexport function GetCompositionById(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connectionList = [];\n        let returnOutput = {};\n        let connectionListString = yield GetAllConnectionsOfComposition(id);\n        connectionList = connectionListString;\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        return { \"connectionList\": connectionList, \"compositionList\": compositionList };\n    });\n}\n/**\n * ## format JUSTDATA ##\n * this function builds the composition with the main id as the point of building.\n * @param id id of the main composition that you want to build\n * @param connectionList  list of connections\n * @param compositionList list of of_the_concept_ids for all the connections.\n * @returns\n */\nexport function RecursiveFetchBuildLayer(id, connectionList, compositionList) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let returnOutput = {};\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        return returnOutput;\n    });\n}\n/**\n * ## format DATAID ##\n * this function builds the composition with the main id as the point of building.\n * @param id id of the main composition that you want to build\n * @param connectionList  list of connections\n * @param compositionList list of of_the_concept_ids for all the connections.\n * @returns\n */\nexport function RecursiveFetchBuildLayerDataId(id, connectionList, compositionList) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let returnOutput = {};\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        let FinalReturn = {};\n        FinalReturn['created_at'] = concept.entryTimeStamp;\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        return FinalReturn;\n    });\n}\n/**\n * ## format Normal ##\n * this function builds the composition with the main id as the point of building.\n * @param id id of the main composition that you want to build\n * @param connectionList  list of connections\n * @param compositionList list of of_the_concept_ids for all the connections.\n * @returns\n */\nexport function RecursiveFetchBuildLayerNormal(id, connectionList, compositionList) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let returnOutput = {};\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetchConceptNormal(concept, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        return returnOutput;\n    });\n}\n/**\n * ## format JUSTDATA ##\n * this function builds the composition with the main id as the point of building.\n * This just requires the id\n * @param id id of the main composition that you want to build\n * @param connectionList  list of connections\n * @param compositionList list of of_the_concept_ids for all the connections.\n * @returns\n */\nexport function GetComposition(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        let connectionListString = yield GetAllConnectionsOfComposition(id);\n        connectionList = connectionListString;\n        console.log(\"this is the connection list online\", connectionList);\n        //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        return returnOutput;\n    });\n}\nexport function GetCompositionWithAllIds(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        let connectionListString = yield GetAllConnectionsOfComposition(id);\n        connectionList = connectionListString;\n        //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetchWithSubCompositions(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        return returnOutput;\n    });\n}\n/**\n * ### Format JUSTDATA ###\n * This function just builds data from the memory.\n * This is a function that takes on all the concepts and connections of the concept (as a composition ) and builds\n * it into a json data.\n * @param id this id is just used to get all the composition data from the concepts and connections in memory\n * @returns\n */\nexport function GetCompositionFromMemory(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        connectionList = yield ConnectionData.GetConnectionsOfConcept(id);\n        //connectionList = await ConnectionData.GetConnectionsOfCompositionLocal(id);\n        //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetchConcept(concept, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        return returnOutput;\n    });\n}\n/**\n * ### Format Normal ###\n * This function just builds data from the memory.\n * This is a function that takes on all the concepts and connections of the concept (as a composition ) and builds\n * it into a json data.\n * @param id this id is just used to get all the composition data from the concepts and connections in memory\n * @returns\n */\nexport function GetCompositionFromMemoryNormal(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        connectionList = yield ConnectionData.GetConnectionsOfConcept(id);\n        //connectionList = await ConnectionData.GetConnectionsOfCompositionLocal(id);\n        //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n        let compositionList = [];\n        console.log(\"this is the connection list that you build\", connectionList);\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetchConceptNormal(concept, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        console.log(\"this is the output of memory normal\", returnOutput);\n        return returnOutput;\n    });\n}\n/**\n * ### Format DATAIDDATE ####\n * Gets data just from memory\n * @param id\n * @returns\n */\nexport function GetCompositionWithIdFromMemory(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        connectionList = yield ConnectionData.GetConnectionsOfConcept(id);\n        //connectionList = await ConnectionData.GetConnectionsOfCompositionLocal(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            console.log(\"this concept you cannot find \", id);\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetchConcept(concept, connectionList, compositionList);\n        // let output = await recursiveFetchConceptSingleLoop(concept, connectionList,compositionList );\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        let FinalReturn = {};\n        FinalReturn['created_at'] = concept.entryTimeStamp;\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        return FinalReturn;\n    });\n}\n/**\n * ### Format DATAIDDATE ####\n * ### experimental ####\n * This is the new format that needs to work with a single or max two loops\n * @param id the id whose composition needs to be created\n * @returns\n */\nexport function GetCompositionWithIdFromMemoryNew(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        connectionList = yield ConnectionData.GetConnectionsOfConcept(id);\n        // connectionList = await ConnectionData.GetConnectionsOfCompositionLocal(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            console.log(\"this concept you cannot find \", id);\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let startTime = new Date().getTime();\n        //console.log(\"this is the connection list which has to be looped\", connectionList);\n        let output = yield recursiveFetchConceptSingleLoop(concept, connectionList, compositionList);\n        console.log(\"this is the time for the data to be made\", new Date().getTime() - startTime);\n        // let output = await recursiveFetchConceptSingleLoop(concept, connectionList,compositionList );\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput = output;\n        let FinalReturn = {};\n        FinalReturn['created_at'] = concept.entryTimeStamp;\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        return FinalReturn;\n    });\n}\n/**\n * ### Format DATAIDDATE #####\n * ### This just returns composition from memory and not from anywhere else.\n * @param id\n * @returns\n */\nexport function GetCompositionWithIdAndDateFromMemory(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        //connectionList = await ConnectionData.GetConnectionsOfCompositionLocal(id);\n        connectionList = yield ConnectionData.GetConnectionsOfConcept(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        let FinalReturn = {};\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        FinalReturn['created_at'] = concept.entryTimeStamp;\n        return FinalReturn;\n    });\n}\nexport function GetCompositionWithIdFromMemoryFromConnections(id_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionList = []) {\n        var _a, _b;\n        let returnOutput = {};\n        //connectionList = await ConnectionData.GetConnectionsOfCompositionLocal(id);\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        let FinalReturn = {};\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        return FinalReturn;\n    });\n}\n/**\n * #### Format DATAID ####\n * ## This will return the composition even if it is not in the local memory ##\n * @param id\n * @returns\n */\nexport function GetCompositionWithId(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        let connectionList = [];\n        let returnOutput = {};\n        let connectionListString = yield GetAllConnectionsOfComposition(id);\n        connectionList = connectionListString;\n        let compositionList = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                compositionList.push(connectionList[i].ofTheConceptId);\n            }\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if (concept.id == 0 && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        let output = yield recursiveFetch(id, connectionList, compositionList);\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        returnOutput[mainString] = output;\n        let FinalReturn = {};\n        FinalReturn['data'] = returnOutput;\n        FinalReturn['id'] = id;\n        return FinalReturn;\n    });\n}\n/**\n * ## Format justdata ###\n * ## This contains a concept in the parameter so that you dont have to again find the concept ##\n * This function takes concepts and connections and then builds a json.\n * @param concept The concept that needs to get other concepts that are inside of it.\n * @param connectionList List of connections that are available in the composition. We have to loop over it.\n * @param compositionList Composition list is the list of concepts that have connections inside of them.\n * @param visitedConcepts This is a checking mechanism to not go in loops. So preferably pass an empty array.\n * @returns\n */\nexport function recursiveFetchConcept(concept_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (concept, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d;\n        let output = {};\n        let arroutput = [];\n        let id = concept.id;\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            for (let i = 0; i < connectionList.length; i++) {\n                if (connectionList[i].ofTheConceptId == id) {\n                    if (id != connectionList[i].toTheConceptId) {\n                        let toConceptId = connectionList[i].toTheConceptId;\n                        let toConcept = yield ConceptsData.GetConcept(toConceptId);\n                        if ((toConcept == null || toConcept.id == 0) && toConceptId != null && toConceptId != undefined) {\n                            let conceptString = yield GetConcept(toConceptId);\n                            toConcept = conceptString;\n                        }\n                        if (toConcept.id != 0) {\n                            if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                                let toConceptTypeId = toConcept.typeId;\n                                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                                toConcept.type = toConceptType;\n                                if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                                    let conceptString = yield GetConcept(toConceptTypeId);\n                                    toConceptType = conceptString;\n                                    toConcept.type = toConceptType;\n                                }\n                            }\n                        }\n                        let regex = \"the_\";\n                        let localmainString = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"\";\n                        let localKey = localmainString.replace(regex, \"\");\n                        if (isNaN(Number(localKey))) {\n                            if (localKey) {\n                                const result = yield recursiveFetchConcept(toConcept, connectionList, compositionList, visitedConcepts);\n                                output[localKey] = result;\n                            }\n                        }\n                        else {\n                            const result = yield recursiveFetchConcept(toConcept, connectionList, compositionList, visitedConcepts);\n                            arroutput[localKey] = result;\n                            output = arroutput;\n                        }\n                    }\n                    else {\n                        console.log(\"this is the faulty connection \", connectionList[i]);\n                    }\n                }\n            }\n        }\n        return output;\n    });\n}\n/**\n* ## Format Normal ###\n* ## This contains a concept in the parameter so that you dont have to again find the concept ##\n* This function takes concepts and connections and then builds a json.\n* @param concept The concept that needs to get other concepts that are inside of it.\n* @param connectionList List of connections that are available in the composition. We have to loop over it.\n* @param compositionList Composition list is the list of concepts that have connections inside of them.\n* @param visitedConcepts This is a checking mechanism to not go in loops. So preferably pass an empty array.\n* @returns\n*/\nexport function recursiveFetchConceptNormal(concept_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (concept, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d;\n        let startTime = new Date().getTime();\n        let output = {};\n        let arroutput = [];\n        let id = concept.id;\n        output[\"id\"] = id;\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            for (let i = 0; i < connectionList.length; i++) {\n                if (connectionList[i].ofTheConceptId == id) {\n                    if (id != connectionList[i].toTheConceptId) {\n                        let toConceptId = connectionList[i].toTheConceptId;\n                        let toConcept = yield ConceptsData.GetConcept(toConceptId);\n                        if ((toConcept == null || toConcept.id == 0) && toConceptId != null && toConceptId != undefined) {\n                            let conceptString = yield GetConcept(toConceptId);\n                            toConcept = conceptString;\n                        }\n                        if (toConcept.id != 0) {\n                            if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                                let toConceptTypeId = toConcept.typeId;\n                                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                                toConcept.type = toConceptType;\n                                if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                                    let conceptString = yield GetConcept(toConceptTypeId);\n                                    toConceptType = conceptString;\n                                    toConcept.type = toConceptType;\n                                }\n                            }\n                        }\n                        let regex = \"the_\";\n                        let localmainString = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"\";\n                        let localKey = localmainString.replace(regex, \"\");\n                        if (isNaN(Number(localKey))) {\n                            if (localKey) {\n                                const result = yield recursiveFetchConcept(toConcept, connectionList, compositionList, visitedConcepts);\n                                output[localKey] = result;\n                            }\n                        }\n                        else {\n                            const result = yield recursiveFetchConcept(toConcept, connectionList, compositionList, visitedConcepts);\n                            arroutput[localKey] = result;\n                            output = arroutput;\n                        }\n                    }\n                    else {\n                        console.log(\"this is the faulty connection \", connectionList[i]);\n                    }\n                }\n            }\n        }\n        // console.log(\"second loop normal\", new Date().getTime() - startTime);\n        return output;\n    });\n}\n/**\n * ## experimental ##\n* This function takes concepts and connections and then builds a json.\n* @param concept The concept that needs to get other concepts that are inside of it.\n* @param connectionList List of connections that are available in the composition. We have to loop over it.\n* @param compositionList Composition list is the list of concepts that have connections inside of them.\n* @param visitedConcepts This is a checking mechanism to not go in loops. So preferably pass an empty array.\n* @returns\n*/\nexport function recursiveFetchConceptSingleLoop(concept_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (concept, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        let output = {};\n        let id = concept.id;\n        let startTime = new Date().getTime();\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        if (!compositionList.includes(id)) {\n            let myString = mainString;\n            let returnoutput = { [myString]: concept === null || concept === void 0 ? void 0 : concept.characterValue };\n            return returnoutput;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            for (let i = 0; i < connectionList.length; i++) {\n                let newData = yield GetTheConcept(connectionList[i].ofTheConceptId);\n                let toConcept = yield GetTheConcept(connectionList[i].toTheConceptId);\n                connectionList[i].ofConcept = newData;\n                connectionList[i].toConcept = toConcept;\n                let ofKey = newData.id;\n                let toConceptKey = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"\";\n                let regex = \"the_\";\n                let localmainString = toConceptKey;\n                let localToKey = localmainString.replace(regex, \"\");\n                if (output[ofKey] == undefined || output[ofKey] == null) {\n                    output[ofKey] = {};\n                }\n                output[ofKey][localToKey] = toConcept.characterValue;\n            }\n        }\n        let finalOutput = {};\n        for (let i = 0; i < connectionList.length; i++) {\n            let ofConcept = connectionList[i].ofConcept;\n            let toConcept = connectionList[i].toConcept;\n            let ofConceptKey = (_f = (_e = ofConcept === null || ofConcept === void 0 ? void 0 : ofConcept.type) === null || _e === void 0 ? void 0 : _e.characterValue) !== null && _f !== void 0 ? _f : \"\";\n            let toConceptKey = (_h = (_g = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _g === void 0 ? void 0 : _g.characterValue) !== null && _h !== void 0 ? _h : \"\";\n            let regex = \"the_\";\n            let localmainString = toConceptKey;\n            let localToKey = localmainString.replace(regex, \"\");\n            if (finalOutput[ofConcept.id] == undefined || finalOutput[ofConcept.id] == null) {\n                finalOutput[ofConcept.id] = {};\n            }\n            let internalOutput = finalOutput[ofConcept.id];\n            if (internalOutput[ofConceptKey] == undefined || internalOutput[ofConceptKey] == null) {\n                internalOutput[ofConceptKey] = {};\n            }\n            if (output[connectionList[i].ofTheConceptId] != undefined && output[connectionList[i].toTheConceptId] != undefined) {\n                internalOutput[ofConceptKey][localToKey] = output[toConcept.id];\n            }\n            else {\n                internalOutput[ofConceptKey][localToKey] = toConcept.characterValue;\n            }\n        }\n        return finalOutput[concept.id];\n    });\n}\n/**\n * ## Format justdata ##\n * @param id\n * @param connectionList\n * @param compositionList\n * @param visitedConcepts\n * @returns\n */\nexport function recursiveFetch(id_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d;\n        let output = {};\n        let arroutput = [];\n        if (id == 0) {\n            return null;\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if ((concept == null || concept.id == 0) && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        if (concept.id != 0) {\n            if (concept.type == null) {\n                let toConceptTypeId = concept.typeId;\n                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                concept.type = toConceptType;\n                if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                    let conceptString = yield GetConcept(toConceptTypeId);\n                    toConceptType = conceptString;\n                    concept.type = toConceptType;\n                }\n            }\n        }\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            for (let i = 0; i < connectionList.length; i++) {\n                let insideTime = new Date().getTime();\n                if (connectionList[i].ofTheConceptId == id) {\n                    if (id != connectionList[i].toTheConceptId) {\n                        let toConceptId = connectionList[i].toTheConceptId;\n                        let toConcept = yield ConceptsData.GetConcept(toConceptId);\n                        if ((toConcept == null || toConcept.id == 0) && toConceptId != null && toConceptId != undefined) {\n                            let conceptString = yield GetConcept(toConceptId);\n                            toConcept = conceptString;\n                        }\n                        if (toConcept.id != 0) {\n                            if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                                let toConceptTypeId = toConcept.typeId;\n                                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                                toConcept.type = toConceptType;\n                                if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                                    let conceptString = yield GetConcept(toConceptTypeId);\n                                    toConceptType = conceptString;\n                                    toConcept.type = toConceptType;\n                                }\n                            }\n                        }\n                        let regex = \"the_\";\n                        let localmainString = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"\";\n                        let localKey = localmainString.replace(regex, \"\");\n                        if (isNaN(Number(localKey))) {\n                            if (localKey) {\n                                const result = yield recursiveFetch(toConceptId, connectionList, compositionList, visitedConcepts);\n                                output[localKey] = result;\n                            }\n                        }\n                        else {\n                            const result = yield recursiveFetch(toConceptId, connectionList, compositionList, visitedConcepts);\n                            arroutput[localKey] = result;\n                            output = arroutput;\n                        }\n                    }\n                    else {\n                        console.log(\"this is the faulty connection \", connectionList[i]);\n                    }\n                }\n            }\n        }\n        return output;\n    });\n}\nexport function recursiveFetchWithSubCompositions(id_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d;\n        let output = {};\n        let arroutput = [];\n        if (id == 0) {\n            return null;\n        }\n        let concept = yield ConceptsData.GetConcept(id);\n        if ((concept == null || concept.id == 0) && id != null && id != undefined) {\n            let conceptString = yield GetConcept(id);\n            concept = conceptString;\n        }\n        if (concept.id != 0) {\n            if (concept.type == null) {\n                let toConceptTypeId = concept.typeId;\n                let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                concept.type = toConceptType;\n                if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                    let conceptString = yield GetConcept(toConceptTypeId);\n                    toConceptType = conceptString;\n                    concept.type = toConceptType;\n                }\n            }\n        }\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"\";\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            output[\"id\"] = id;\n            for (let i = 0; i < connectionList.length; i++) {\n                if (connectionList[i].ofTheConceptId == id) {\n                    let toConceptId = connectionList[i].toTheConceptId;\n                    let toConcept = yield ConceptsData.GetConcept(toConceptId);\n                    if ((toConcept == null || toConcept.id == 0) && toConceptId != null && toConceptId != undefined) {\n                        let conceptString = yield GetConcept(toConceptId);\n                        toConcept = conceptString;\n                    }\n                    if (toConcept) {\n                        if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                            let toConceptTypeId = toConcept.typeId;\n                            let toConceptType = yield ConceptsData.GetConcept(toConceptTypeId);\n                            toConcept.type = toConceptType;\n                            if (toConceptType == null && toConceptTypeId != null && toConceptTypeId != undefined) {\n                                let conceptString = yield GetConcept(toConceptTypeId);\n                                toConceptType = conceptString;\n                                toConcept.type = toConceptType;\n                            }\n                        }\n                    }\n                    let regex = \"the_\";\n                    let localmainString = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"\";\n                    let localKey = localmainString.replace(regex, \"\");\n                    if (isNaN(Number(localKey))) {\n                        if (localKey) {\n                            const result = yield recursiveFetchWithSubCompositions(toConceptId, connectionList, compositionList);\n                            output[localKey] = result;\n                        }\n                    }\n                    else {\n                        const result = yield recursiveFetchWithSubCompositions(toConceptId, connectionList, compositionList);\n                        arroutput[localKey] = result;\n                        output = arroutput;\n                    }\n                }\n            }\n        }\n        return output;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAllConnectionsOfCompositionBulk } from \"../Api/GetAllConnectionsOfCompositionBulk\";\nimport { GetConnectionBulk } from \"../Api/GetConnectionBulk\";\nimport { ConnectionData, GetConceptBulk } from \"../app\";\nimport { CheckForConnectionDeletionWithIds } from \"./CheckForConnectionDeletion\";\nimport { FindConnectionsOfCompositionsBulkInMemory } from \"./FindConnectionsOfCompositionBulkInMemory\";\nimport { GetCompositionFromMemory, GetCompositionFromMemoryNormal, GetCompositionWithIdFromMemory, GetCompositionWithIdFromMemoryNew } from \"./GetComposition\";\n/**\n * ## Format JUSTDATA ##\n * Function converts the conceptIds to json (compositions)\n * This function takes in the conceptIds and returns a list of compositions related to those concepts.\n * @param conceptIds  list of concept ids that are compositions.\n * @returns compositions\n */\nexport function GetCompositionBulk() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = []) {\n        yield GetAllConnectionsOfCompositionBulk(conceptIds);\n        let compositions = [];\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionFromMemory(conceptIds[i]);\n            compositions.push(comp);\n        }\n        return compositions;\n    });\n}\n/**\n * ## FORMAT DATAIDDATE ##\n * Function converts the conceptIds to json (compositions)\n * @param conceptIds this is the list of concept ids that should be converted to compostions in data - id format.\n * @returns list of compositions in the data - id format.\n */\nexport function GetCompositionBulkWithDataId() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = []) {\n        yield GetAllConnectionsOfCompositionBulk(conceptIds);\n        let compositions = [];\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionWithIdFromMemory(conceptIds[i]);\n            compositions.push(comp);\n        }\n        return compositions;\n    });\n}\n/**\n * ## FORMAT DATAIDDATE ##\n * This function converts the conceptIds and internal connectionIds to compositions in data-Id format.\n * @param conceptIds This is the list of concept ids that need to be converted to compositions.\n * @param connectionIds These are the internal connectionIds that need to be passed to create the compositions.\n * @returns list of compositions created from the passed conceptIds and connectionIds.\n */\nexport function GetCompositionFromConnectionsWithDataId() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connectionIds = []) {\n        let newConnections = yield GetConnectionBulk(connectionIds);\n        let oldConnections = yield FindConnectionsOfCompositionsBulkInMemory(conceptIds);\n        CheckForConnectionDeletionWithIds(connectionIds, oldConnections);\n        let compositions = [];\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionWithIdFromMemory(conceptIds[i]);\n            compositions.push(comp);\n        }\n        return compositions;\n    });\n}\n/**\n * ## Format DATAIDDATE ##\n * This function converts the conceptIds and internal connectionIds to compositions in data-Id format with index(conceptId).\n * @param conceptIds This is the list of concept ids that need to be converted to compositions.\n * @param connectionIds These are the internal connectionIds that need to be passed to create the compositions.\n * @returns dictionary of compositions created from the passed conceptIds and connectionIds with conceptId as its index .\n */\nexport function GetCompositionFromConnectionsWithDataIdIndex() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connectionIds = []) {\n        let newConnections = yield GetConnectionBulk(connectionIds);\n        let myNewConnections = newConnections;\n        let oldConnections = yield FindConnectionsOfCompositionsBulkInMemory(conceptIds);\n        CheckForConnectionDeletionWithIds(connectionIds, oldConnections);\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionWithIdFromMemory(conceptIds[i]);\n            compositions[conceptIds[i]] = comp;\n        }\n        return compositions;\n    });\n}\n/**\n * ## Format is dictionary with key as concept id and value as data (json) ##\n * This function converts the conceptIds and internal connectionIds to compositions format with index(conceptId).\n * @param conceptIds This is the list of concept ids that need to be converted to compositions.\n * @param connectionIds These are the internal connectionIds that need to be passed to create the compositions.\n * @returns dictionary of compositions created from the passed conceptIds and connectionIds with conceptId as its index .\n */\nexport function GetCompositionFromConnectionsWithIndex() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connectionIds = []) {\n        let newConnections = yield GetConnectionBulk(connectionIds);\n        let myNewConnections = newConnections;\n        let oldConnections = yield FindConnectionsOfCompositionsBulkInMemory(conceptIds);\n        CheckForConnectionDeletionWithIds(connectionIds, oldConnections);\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionFromMemory(conceptIds[i]);\n            compositions[conceptIds[i]] = comp;\n        }\n        return compositions;\n    });\n}\n/**\n * Used to prefetch all the connections and their related concepts.\n * @param connectionIds these are the connection ids that are used to fetch all the connections and also their related concepts.\n * @returns all the connections that are passed as ids.\n */\nexport function GetConnectionDataPrefetch(connectionIds) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let remainingConnections = [];\n        let connectionsAll = [];\n        let remainingIds = {};\n        for (let i = 0; i < connectionIds.length; i++) {\n            let connection = yield ConnectionData.GetConnection(connectionIds[i]);\n            // console.log(\"this is the connection fetch\", connection);\n            if (connection.id == 0) {\n                remainingConnections.push(connectionIds[i]);\n            }\n            else {\n                connectionsAll.push(connection);\n            }\n        }\n        for (let i = 0; i < connectionIds.length; i++) {\n            remainingIds[connectionIds[i]] = false;\n        }\n        //await ConnectionData.GetConnectionBulkData(connectionIds, connectionsAll, remainingIds);\n        // for(let key in remainingIds){\n        //     if(remainingIds[key] == false){\n        //         remainingConnections.push(Number(key));\n        //     }\n        // }\n        // remainingConnections = connectionIds;\n        let prefetchConcepts = [];\n        let connectionsAllLocal = yield GetConnectionBulk(remainingConnections);\n        connectionsAll = [...connectionsAll, ...connectionsAllLocal];\n        for (let j = 0; j < connectionsAll.length; j++) {\n            prefetchConcepts.push(connectionsAll[j].ofTheConceptId);\n            prefetchConcepts.push(connectionsAll[j].toTheConceptId);\n        }\n        yield GetConceptBulk(prefetchConcepts);\n        return connectionsAll;\n    });\n}\n/**\n * ## Format DATAIDDATE ##\n * This function converts the conceptIds and internal connections to create compositions.\n * Format is of a dictionary with ids as the key and value is the composition data.\n * @param conceptIds these are the concept ids that need to be fetched to create their compositions\n * @param connections these are the connections that are used to create the structure.\n * @returns a dictionary / object that has key as their conceptId and the value as their composition object.\n */\nexport function GetCompositionFromConnectionsWithDataIdInObject() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connections = []) {\n        // get all the connections that are not available in memory from the api.\n        yield GetConnectionBulk(connections);\n        // create a list of compositions from the fetched concepts and connections.\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionWithIdFromMemory(conceptIds[i]);\n            compositions[conceptIds[i]] = comp;\n        }\n        return compositions;\n    });\n}\n/**\n * ## Format DATAIDDATE ##\n * ## duplicate ##\n * This function converts the conceptIds and internal connections to create compositions.\n * @param conceptIds these are the concept ids that need to be fetched to create their compositions\n * @param connections these are the connections that are used to create the structure.\n * @returns a dictionary / object that has key as their conceptId and the value as their composition object.\n */\nexport function GetCompositionFromConnectionsWithDataIdInObjectNew() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connections = []) {\n        // get all the connections that are not available in memory from the api.\n        yield GetConnectionBulk(connections);\n        // create a list of compositions from the fetched concepts and connections.\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionWithIdFromMemoryNew(conceptIds[i]);\n            compositions[conceptIds[i]] = comp;\n        }\n        return compositions;\n    });\n}\n/**\n * ## Format justdata ##\n * This function converts the conceptIds and internal connections to create compositions.\n * @param conceptIds these are the concept ids that need to be fetched to create their compositions\n * @param connections these are the connections that are used to create the structure.\n * @returns a dictionary / object that has key as their conceptId and the value as their composition object.\n */\nexport function GetCompositionFromConnectionsInObject() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connections = []) {\n        // get all the connections that are not available in memory from the api.\n        yield GetConnectionBulk(connections);\n        // create a list of compositions from the fetched concepts and connections.\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionFromMemory(conceptIds[i]);\n            console.log(\"this is the comp\", comp);\n            compositions[conceptIds[i]] = comp;\n        }\n        console.log(\"This is the composition list\", compositions);\n        return compositions;\n    });\n}\n/**\n * ## Format Normal ##\n * This function converts the conceptIds and internal connections to create compositions.\n * @param conceptIds these are the concept ids that need to be fetched to create their compositions\n * @param connections these are the connections that are used to create the structure.\n * @returns a dictionary / object that has key as their conceptId and the value as their composition object.\n */\nexport function GetCompositionFromConnectionsInObjectNormal() {\n    return __awaiter(this, arguments, void 0, function* (conceptIds = [], connections = []) {\n        // get all the connections that are not available in memory from the api.\n        yield GetConnectionBulk(connections);\n        // create a list of compositions from the fetched concepts and connections.\n        let compositions = {};\n        for (let i = 0; i < conceptIds.length; i++) {\n            let comp = yield GetCompositionFromMemoryNormal(conceptIds[i]);\n            compositions[conceptIds[i]] = comp;\n        }\n        return compositions;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAllConceptsByType } from \"../Api/GetAllConceptsByType\";\nimport { GetAllConnectionsOfCompositionBulk } from \"../Api/GetAllConnectionsOfCompositionBulk\";\nimport { ConceptsData } from \"../DataStructures/ConceptData\";\nimport { LocalConceptsData } from \"../DataStructures/Local/LocalConceptData\";\nimport { GetCompositionListLocal, GetCompositionLocalWithId } from \"../app\";\nimport { GetCompositionFromMemory, GetCompositionWithIdFromMemory } from \"./GetComposition\";\nimport GetConceptByCharacter, { GetConceptByCharacterUpdated } from \"./GetConceptByCharacter\";\nimport GetConceptByCharacterLocal from \"./Local/GetConceptByCharacterLocal\";\n// get the list of compositions from the type \n// for eg get list of boomgpt\nexport function GetCompositionList(compositionName_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (compositionName, userId, inpage = 10, page = 1) {\n        let concept = yield GetConceptByCharacter(compositionName);\n        let CompositionList = [];\n        if (concept) {\n            yield GetAllConceptsByType(compositionName, userId);\n            let conceptList = yield ConceptsData.GetConceptsByTypeIdAndUser(concept.id, userId);\n            let startPage = inpage * (page - 1);\n            let prefetchComposition = [];\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    prefetchComposition.push(conceptList[i].id);\n                }\n            }\n            yield GetAllConnectionsOfCompositionBulk(prefetchComposition);\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    let compositionJson = yield GetCompositionFromMemory(conceptList[i].id);\n                    CompositionList.push(compositionJson);\n                }\n            }\n        }\n        return CompositionList;\n    });\n}\nexport function GetCompositionListAll(compositionName_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (compositionName, userId, inpage = 10, page = 1) {\n        let LocalCompositionList = GetCompositionListLocal(compositionName, userId);\n        let CompositionList = GetCompositionList(compositionName, userId);\n        let AllList = [];\n        Promise.race([LocalCompositionList, CompositionList])\n            .then((result) => {\n            console.log(\"Promise result\", result);\n            AllList.push(...result);\n        })\n            .catch((error) => {\n            console.log(\"error in handling\", error);\n        });\n        CompositionList.then((result) => {\n            console.log(\"This is the second promise result\", result);\n            AllList.push(...result);\n        });\n        return AllList;\n    });\n}\n// export async function GetCompositionListAllWithId(compositionName: string,userId:number,  inpage:number = 10, page:number =1){\n//    let LocalCompositionList =  await GetCompositionListLocalWithId(compositionName, userId);\n//    console.log(\"tbis is the local composition list\", LocalCompositionList);\n//    let CompositionList =    await GetCompositionListWithId(compositionName,userId)\n//    console.log(\"this is the online composition list\", CompositionList);\n//    let AllList: any[] = [];\n//    // Promise.race([LocalCompositionList, CompositionList])\n//    // .then((result)=> {\n//    //    console.log(\"Promise result\", result);\n//    //    AllList.push(...result);\n//    // })\n//    // .catch((error)=>{\n//    //    console.log(\"error in handling\", error);\n//    // });\n//    // CompositionList.then((result)=>{\n//    //    console.log(\"This is the second promise result\", result);\n//    //    AllList.push(...result);\n//    // })\n//    AllList.push(...LocalCompositionList);\n//    AllList.push(...CompositionList);\n//    return AllList;\n// }\nexport function GetCompositionListAllWithId(compositionName_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (compositionName, userId, inpage = 10, page = 1) {\n        let conceptLocal = yield GetConceptByCharacterLocal(compositionName);\n        let conceptOnline = yield GetConceptByCharacter(compositionName);\n        let CompositionList = [];\n        let conceptList = [];\n        let conceptListLocal = [];\n        let finalLocal = [];\n        let conceptListOnline = [];\n        if (conceptLocal.id != 0) {\n            conceptListLocal = yield LocalConceptsData.GetConceptsByTypeIdAndUser(conceptLocal.id, userId);\n        }\n        if (conceptOnline.id != 0) {\n            yield GetAllConceptsByType(compositionName, userId);\n            conceptListOnline = yield ConceptsData.GetConceptsByTypeIdAndUser(conceptOnline.id, userId);\n            conceptList = conceptListOnline;\n        }\n        for (let i = 0; i < conceptListLocal.length; i++) {\n            let isDuplicate = false;\n            for (let j = 0; j < conceptListOnline.length; j++) {\n                if (conceptListLocal[i].ghostId == conceptListOnline[j].ghostId) {\n                    isDuplicate = true;\n                }\n            }\n            if (!isDuplicate) {\n                finalLocal.push(conceptListLocal[i]);\n            }\n        }\n        console.log(\"This is the all list\", finalLocal);\n        let AllList = [];\n        AllList = yield FormatTheConcepts(conceptList, finalLocal, inpage, page);\n        return AllList;\n    });\n}\nexport function GetCompositionListWithId(compositionName_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (compositionName, userId, inpage = 10, page = 1) {\n        let concept = yield GetConceptByCharacter(compositionName);\n        let CompositionList = [];\n        if (concept) {\n            yield GetAllConceptsByType(compositionName, userId);\n            let conceptList = yield ConceptsData.GetConceptsByTypeIdAndUser(concept.id, userId);\n            let startPage = inpage * (page - 1);\n            let prefetchComposition = [];\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    prefetchComposition.push(conceptList[i].id);\n                }\n            }\n            yield GetAllConnectionsOfCompositionBulk(prefetchComposition);\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    let compositionJson = yield GetCompositionWithIdFromMemory(conceptList[i].id);\n                    CompositionList.push(compositionJson);\n                }\n            }\n        }\n        return CompositionList;\n    });\n}\nexport function GetCompositionListWithIdUpdated(compositionName_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (compositionName, userId, inpage = 10, page = 1) {\n        let concept = yield GetConceptByCharacterUpdated(compositionName);\n        let CompositionList = [];\n        if (concept) {\n            yield GetAllConceptsByType(compositionName, userId);\n            let conceptList = yield ConceptsData.GetConceptsByTypeIdAndUser(concept.id, userId);\n            let startPage = inpage * (page - 1);\n            let prefetchComposition = [];\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    prefetchComposition.push(conceptList[i].id);\n                }\n            }\n            yield GetAllConnectionsOfCompositionBulk(prefetchComposition);\n            for (let i = startPage; i < startPage + inpage; i++) {\n                if (conceptList[i]) {\n                    let compositionJson = yield GetCompositionWithIdFromMemory(conceptList[i].id);\n                    CompositionList.push(compositionJson);\n                }\n            }\n        }\n        return CompositionList;\n    });\n}\nexport function FormatTheConcepts(conceptList_1, localConceptList_1) {\n    return __awaiter(this, arguments, void 0, function* (conceptList, localConceptList, inpage = 10, page = 1) {\n        let CompositionList = [];\n        let startPage = inpage * (page - 1);\n        let prefetchComposition = [];\n        let localConceptLength = localConceptList.length;\n        for (let i = startPage; i < startPage + inpage - localConceptLength; i++) {\n            if (conceptList[i]) {\n                prefetchComposition.push(conceptList[i].id);\n            }\n        }\n        for (let i = 0; i < localConceptList.length; i++) {\n            let compositionJson = yield GetCompositionLocalWithId(localConceptList[i].id);\n            CompositionList.push(compositionJson);\n        }\n        yield GetAllConnectionsOfCompositionBulk(prefetchComposition);\n        for (let i = startPage; i < startPage + inpage - localConceptLength; i++) {\n            if (conceptList[i]) {\n                let compositionJson = yield GetCompositionWithIdFromMemory(conceptList[i].id);\n                CompositionList.push(compositionJson);\n            }\n        }\n        return CompositionList;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConceptByCharacterValue } from \"../Api/GetConceptByCharacterValue\";\nimport { ConceptsData } from \"../DataStructures/ConceptData\";\nexport default function GetConceptByCharacter(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield ConceptsData.GetConceptByCharacter(characterValue);\n        let literalCharacter = `${characterValue}`;\n        if ((concept == null || (concept === null || concept === void 0 ? void 0 : concept.id) == 0) && literalCharacter) {\n            yield GetConceptByCharacterValue(characterValue);\n            concept = yield ConceptsData.GetConceptByCharacterAndTypeLocal(characterValue, 51);\n            if (concept.id == 0) {\n                concept = yield ConceptsData.GetConceptByCharacter(characterValue);\n            }\n        }\n        return concept;\n    });\n}\nexport function GetConceptByCharacterUpdated(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield ConceptsData.GetConceptByCharacter(characterValue);\n        let literalCharacter = `${characterValue}`;\n        if ((concept == null || (concept === null || concept === void 0 ? void 0 : concept.id) == 0) && literalCharacter) {\n            yield GetConceptByCharacterValue(characterValue);\n            concept = yield ConceptsData.GetConceptByCharacter(characterValue);\n        }\n        return concept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetCompositionConnectionsBetweenTwoConcepts } from \"../Api/GetCompositionConnectionsBetweenTwoConcepts\";\nimport { CreateDefaultConcept, MakeTheTypeConceptApi } from \"../app\";\nimport MakeTheInstanceConcept from \"./MakeTheInstanceConcept\";\n/**\n * This function will give you all the connections between two concepts by their linker or fullLinker\n * @param ofTheConcept start of the connecction\n * @param toTheConcept end of the connection\n * @param linker the primitive linkers with type connection (16) these are the old type of linkers (if you want full linker then put this as empty string)\n * @param fullLinker fullLinker is the modern linker (if you want linker then put this as empty string)\n * @param forward if you want to get the forward relation in the primitive linker put true else for backward linker false.\n * @returns list of connections\n */\nexport function GetConnectionBetweenTwoConceptsLinker(ofTheConcept_1, toTheConcept_1, linker_1, fullLinker_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConcept, toTheConcept, linker, fullLinker, forward = true) {\n        var _a, _b;\n        let typeConcept = CreateDefaultConcept();\n        if (linker != \"\") {\n            let typeLinker = \"\";\n            if (forward) {\n                let prefix = ((_a = ofTheConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\";\n                let linkerAdd = linker + \"_s\";\n                let forwardLinker = prefix + \"_\" + linkerAdd;\n                typeLinker = forwardLinker;\n            }\n            else {\n                let prefix1 = ((_b = toTheConcept.type) === null || _b === void 0 ? void 0 : _b.characterValue) + \"_s\";\n                let linkerAdd1 = linker + \"_by\";\n                let backwardLinker = prefix1 + \"_\" + linkerAdd1;\n                typeLinker = backwardLinker;\n            }\n            typeConcept = yield MakeTheInstanceConcept(\"connection\", typeLinker, false, 999);\n        }\n        if (fullLinker != \"\") {\n            typeConcept = yield MakeTheTypeConceptApi(fullLinker, 999);\n        }\n        let connections = yield GetCompositionConnectionsBetweenTwoConcepts(ofTheConcept.id, toTheConcept.id, typeConcept.id);\n        return connections;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConnection } from \"../Api/GetConnection\";\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nexport function GetConnectionById(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connection = yield ConnectionData.GetConnection(id);\n        if ((connection == null || connection.id == 0) && id != null && id != undefined) {\n            let connectionString = yield GetConnection(id);\n            connection = connectionString;\n        }\n        return connection;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from \"../DataStructures/ConnectionData\";\nimport { LocalConnectionData } from \"../DataStructures/Local/LocalConnectionData\";\nimport { getObjectsFromLocalIndexDb } from \"../Database/indexdblocal\";\nimport { getObjectsFromIndexDb } from \"../Database/indexeddb\";\nexport function GetConnectionsFromIndexDb() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let connectionList = yield getObjectsFromIndexDb(\"connection\");\n            if (Array.isArray(connectionList)) {\n                for (let i = 0; i < connectionList.length; i++) {\n                    ConnectionData.AddConnectionToMemory(connectionList[i]);\n                }\n            }\n        }\n        catch (error) {\n            let errorObject = {\n                \"message\": \"Cannot create Connection Binary Tree Concept\",\n                \"ok\": false,\n                \"status\": 400,\n                \"data\": error\n            };\n            throw errorObject;\n        }\n    });\n}\nexport function GetConnectionsFromIndexDbLocal() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let connectionList = yield getObjectsFromLocalIndexDb(\"localconnection\");\n            if (Array.isArray(connectionList)) {\n                for (let i = 0; i < connectionList.length; i++) {\n                    LocalConnectionData.AddConnectionToMemory(connectionList[i]);\n                }\n            }\n        }\n        catch (error) {\n            let errorObject = {\n                \"message\": \"Cannot create Local Connection Binary Tree Concept\",\n                \"ok\": false,\n                \"status\": 400,\n                \"data\": error\n            };\n            throw errorObject;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConceptByCharacterAndType } from \"../Api/GetConceptByCharacterAndType\";\nimport { GetConnectionOfTheConcept } from \"../Api/GetConnectionOfTheConcept\";\nimport { GetCompositionWithIdAndDateFromMemory } from \"./GetComposition\";\nimport GetTheConcept from \"./GetTheConcept\";\nimport { GetAllConnectionsOfCompositionBulk } from \"../Api/GetAllConnectionsOfCompositionBulk\";\nexport function GetLink(id_1, linker_1) {\n    return __awaiter(this, arguments, void 0, function* (id, linker, inpage = 10, page = 1) {\n        var _a;\n        let output = [];\n        let concept = yield GetTheConcept(id);\n        let linkString = ((_a = concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\" + \"_\" + linker;\n        let relatedConceptString = yield GetConceptByCharacterAndType(linkString, 16);\n        let relatedConcept = relatedConceptString;\n        if (relatedConcept.id > 0) {\n            let connectionsString = yield GetConnectionOfTheConcept(relatedConcept.id, concept.id, concept.userId, inpage, page);\n            let connections = connectionsString;\n            let prefetch = [];\n            for (let i = 0; i < connections.length; i++) {\n                prefetch.push(connections[i].toTheConceptId);\n            }\n            yield GetAllConnectionsOfCompositionBulk(prefetch);\n            for (let i = 0; i < connections.length; i++) {\n                let toConceptId = connections[i].toTheConceptId;\n                let toConcept = yield GetTheConcept(toConceptId);\n                let newComposition = yield GetCompositionWithIdAndDateFromMemory(toConcept.id);\n                output.push(newComposition);\n            }\n        }\n        return output;\n    });\n}\nexport function GetLinkRaw(id_1, linker_1) {\n    return __awaiter(this, arguments, void 0, function* (id, linker, inpage = 10, page = 1) {\n        var _a;\n        let output = [];\n        let concept = yield GetTheConcept(id);\n        let linkString = ((_a = concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\" + \"_\" + linker;\n        let relatedConceptString = yield GetConceptByCharacterAndType(linkString, 16);\n        let relatedConcept = relatedConceptString;\n        if (relatedConcept.id > 0) {\n            let connectionsString = yield GetConnectionOfTheConcept(relatedConcept.id, concept.id, concept.userId, inpage, page);\n            let connections = connectionsString;\n            let prefetch = [];\n            for (let i = 0; i < connections.length; i++) {\n                prefetch.push(connections[i].toTheConceptId);\n            }\n            for (let i = 0; i < connections.length; i++) {\n                let toConceptId = connections[i].toTheConceptId;\n                let toConcept = yield GetTheConcept(toConceptId);\n                output.push(toConcept);\n            }\n        }\n        return output;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAllLinkerConnectionsFromTheConcept } from \"../Api/GetAllLinkerConnectionsFromTheConcept\";\nimport { GetAllLinkerConnectionsToTheConcept } from \"../Api/GetAllLinkerConnectionsToTheConcept\";\nimport GetTheConcept from \"./GetTheConcept\";\nexport function GetLinkerConnectionFromConcepts(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connections = yield GetAllLinkerConnectionsFromTheConcept(id);\n        for (let i = 0; i < connections.length; i++) {\n            let localConnection = connections[i];\n            let connectionIdentifier = localConnection.typeId;\n            let concept = yield GetTheConcept(connectionIdentifier);\n            localConnection.type = concept;\n        }\n        return connections;\n    });\n}\nexport function GetLinkerConnectionToConcepts(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let connections = yield GetAllLinkerConnectionsToTheConcept(id);\n        for (let i = 0; i < connections.length; i++) {\n            let localConnection = connections[i];\n            let connectionIdentifier = localConnection.typeId;\n            let concept = yield GetTheConcept(connectionIdentifier);\n            localConnection.type = concept;\n        }\n        return connections;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConnectionOfTheConcept } from \"../Api/GetConnectionOfTheConcept\";\nimport { GetCompositionWithIdAndDateFromMemory } from \"./GetComposition\";\nimport GetTheConcept from \"./GetTheConcept\";\nimport { GetAllConnectionsOfCompositionBulk } from \"../Api/GetAllConnectionsOfCompositionBulk\";\nimport { GetConceptByCharacterAndCategory } from \"./ConceptFinding/GetConceptByCharacterAndCategory\";\nexport function GetRelation(id_1, relation_1) {\n    return __awaiter(this, arguments, void 0, function* (id, relation, inpage = 10, page = 1) {\n        let output = [];\n        let concept = yield GetTheConcept(id);\n        let relatedConceptString = yield GetConceptByCharacterAndCategory(relation);\n        let relatedConcept = relatedConceptString;\n        if (relatedConcept.id > 0) {\n            let connectionsString = yield GetConnectionOfTheConcept(relatedConcept.id, concept.id, concept.userId, inpage, page);\n            let connections = connectionsString;\n            let prefetch = [];\n            for (let i = 0; i < connections.length; i++) {\n                prefetch.push(connections[i].toTheConceptId);\n            }\n            yield GetAllConnectionsOfCompositionBulk(prefetch);\n            for (let i = 0; i < connections.length; i++) {\n                let toConceptId = connections[i].toTheConceptId;\n                let toConcept = yield GetTheConcept(toConceptId);\n                let newComposition = yield GetCompositionWithIdAndDateFromMemory(toConcept.id);\n                output.push(newComposition);\n            }\n        }\n        return output;\n    });\n}\nexport function GetRelationRaw(id_1, relation_1) {\n    return __awaiter(this, arguments, void 0, function* (id, relation, inpage = 10, page = 1) {\n        let output = [];\n        let concept = yield GetTheConcept(id);\n        let relatedConceptString = yield GetConceptByCharacterAndCategory(relation);\n        let relatedConcept = relatedConceptString;\n        if (relatedConcept.id > 0) {\n            let connectionsString = yield GetConnectionOfTheConcept(relatedConcept.id, concept.id, concept.userId, inpage, page);\n            let connections = connectionsString;\n            let prefetch = [];\n            for (let i = 0; i < connections.length; i++) {\n                prefetch.push(connections[i].toTheConceptId);\n            }\n            for (let i = 0; i < connections.length; i++) {\n                let toConceptId = connections[i].toTheConceptId;\n                let toConcept = yield GetTheConcept(toConceptId);\n                output.push(toConcept);\n            }\n        }\n        return output;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConcept } from \"../Api/GetConcept\";\nimport { convertFromLConceptToConcept, GetUserGhostId } from \"../app\";\nimport { ConceptsData } from \"../DataStructures/ConceptData\";\nimport { CreateDefaultConcept } from \"./CreateDefaultConcept\";\n/**\n *\n * @param id this is the id that can be used to get the concept.\n * @param userId This is the user that calls the concept\n * @returns Concept if it exists\n */\nexport default function GetTheConcept(id_1) {\n    return __awaiter(this, arguments, void 0, function* (id, userId = 999) {\n        try {\n            let concept = CreateDefaultConcept();\n            if (id < 0) {\n                let lconcept = yield GetUserGhostId(userId, id);\n                concept = convertFromLConceptToConcept(lconcept);\n                return concept;\n            }\n            concept = yield ConceptsData.GetConcept(id);\n            if ((concept == null || concept.id == 0) && id != null && id != undefined) {\n                let conceptString = yield GetConcept(id);\n                concept = conceptString;\n            }\n            if (concept.id != 0) {\n                if (concept.type == null) {\n                    let conceptType = yield ConceptsData.GetConcept(concept.typeId);\n                    if (conceptType == null && concept.typeId != null && concept.typeId != undefined) {\n                        let typeConceptString = yield GetConcept(concept.typeId);\n                        let typeConcept = typeConceptString;\n                        concept.type = typeConcept;\n                    }\n                }\n            }\n            return concept;\n        }\n        catch (err) {\n            console.error(\"this is the error in the getting concept\", err);\n            throw err;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAiData } from \"../Api/GetAiData\";\nimport { SettingData } from \"../DataStructures/SettingData\";\nimport { Settings } from \"../DataStructures/Settings\";\nimport { AiUpdateFlag, GetLastSettingsFromDatabase, openDatabase } from \"../Database/indexeddb\";\nimport { openDatabase as localopenDb } from '../Database/indexdblocal';\nexport default function InitializeSystem() {\n    return __awaiter(this, arguments, void 0, function* (enableAi = true) {\n        try {\n            yield openDatabase(\"concepts\");\n            yield localopenDb(\"concepts\");\n            if (enableAi) {\n                var statsData = yield GetLastSettingsFromDatabase();\n                var settings = statsData;\n                if (settings.isOnlineSync) {\n                    return true;\n                }\n                yield GetAiData();\n            }\n            return true;\n        }\n        catch (error) {\n            let errorObject = {\n                \"message\": \"cannot initlize the AI system\",\n                \"ok\": false,\n                \"status\": 400,\n                \"data\": error\n            };\n            console.log(errorObject);\n            return true;\n        }\n    });\n}\nexport function PurgatoryDatabaseUpdated() {\n    return __awaiter(this, void 0, void 0, function* () {\n        Settings.isOnlineSync = true;\n        var settingData = new SettingData(Settings.isOnlineSync);\n        AiUpdateFlag(settingData);\n    });\n}\n", "import { Connection } from \"../../DataStructures/Connection\";\nexport function ConvertFromLConnectionToConnection(lconnection) {\n    let connection = new Connection(0, 0, 0, 0, 0, 0, 0);\n    connection.ofTheConceptId = lconnection.ofTheConceptId;\n    connection.toTheConceptId = lconnection.toTheConceptId;\n    connection.typeId = lconnection.typeId;\n    connection.orderId = lconnection.orderId;\n    connection.id = lconnection.id;\n    return connection;\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTheConnectionLocal, MakeTheInstanceConceptLocal } from \"../../app\";\nexport function CreateConnectionBetweenTwoConceptsLocal(ofTheConcept_1, toTheConcept_1, linker_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConcept, toTheConcept, linker, both = false) {\n        var _a, _b;\n        try {\n            var userId = ofTheConcept.userId;\n            if (both) {\n                let prefix1 = ((_a = toTheConcept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\";\n                let linkerAdd1 = linker + \"_by\";\n                let backwardLinker = prefix1 + \"_\" + linkerAdd1;\n                // if(count){\n                //    await CountRelationship(linkerAdd1, toTheConcept, userId);\n                //   }\n                var connectionConceptReverse = yield MakeTheInstanceConceptLocal(\"connection\", backwardLinker, false, 999, 999, 999);\n                let pewCon = yield CreateTheConnectionLocal(toTheConcept.id, ofTheConcept.id, connectionConceptReverse.id, 1000);\n            }\n            let prefix = ((_b = ofTheConcept.type) === null || _b === void 0 ? void 0 : _b.characterValue) + \"_s\";\n            let linkerAdd = linker + \"_s\";\n            let forwardLinker = prefix + \"_\" + linkerAdd;\n            // if(count){\n            // // await CountRelationship(linkerAdd, ofTheConcept, userId);\n            // }\n            var connectionConcept = yield MakeTheInstanceConceptLocal(\"connection\", forwardLinker, false, 999, 999, 999);\n            let newConnection = yield CreateTheConnectionLocal(ofTheConcept.id, toTheConcept.id, connectionConcept.id, 1000);\n            return newConnection;\n        }\n        catch (ex) {\n            throw ex;\n        }\n    });\n}\n", "import { Concept } from \"../../DataStructures/Concept\";\nexport function CreateDefaultLConcept() {\n    let created_on = new Date();\n    let updated_on = new Date();\n    let concept = new Concept(0, 0, 0, 0, 0, \"0\", 0, false, created_on, updated_on, \"0\");\n    return concept;\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IdentifierFlags } from \"../../DataStructures/IdentifierFlags\";\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { LocalId } from \"../../DataStructures/Local/LocalId\";\nimport { getObjectsFromLocalIndexDb, UpdateToDatabase } from \"../../Database/indexdblocal\";\nimport { BaseUrl, DelayFunctionExecution } from \"../../app\";\n/**\n * This will create a binary tree of local concepts that is saved from the indexdb.\n */\nexport default function CreateLocalBinaryTreeFromIndexDb() {\n    return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"this is trying to create local binary tree\");\n        try {\n            let conceptList = yield getObjectsFromLocalIndexDb(\"localconcept\");\n            if (Array.isArray(conceptList)) {\n                for (let i = 0; i < conceptList.length; i++) {\n                    let concept = conceptList[i];\n                    LocalConceptsData.AddConceptToMemory(concept);\n                }\n            }\n            IdentifierFlags.isLocalDataLoaded = true;\n            IdentifierFlags.isLocalTypeLoaded = true;\n            IdentifierFlags.isLocalCharacterLoaded = true;\n        }\n        catch (error) {\n            yield DelayFunctionExecution(2000, CreateLocalBinaryTreeFromIndexDb());\n            let errorObject = {\n                \"message\": \"Cannot create local binary tree from index db\",\n                \"data\": error,\n                \"ok\": false,\n                \"status\": 400\n            };\n            throw errorObject;\n        }\n    });\n}\n/**\n * We have designed our system to use local concepts and connections with its own local ids(negative ids) that\n * is only valid for the browser that creates this. We have a translator in our node server.\n * We cannot keep on using the indexdb to get the new data so we populate the data from indexdb to our memory\n * then we use these ids from memory and update the indexdb with the latest id frequently.\n * This function does this process in initlization from indexdb to memory.\n *\n * Here we have locked this function so that other processes cannot access this process in the case that this process is ongoing\n *\n *\n */\nexport function PopulateTheLocalConceptsToMemory() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            // put a lock on the indexdb for the domain so that no two things do this same process.\n            yield navigator.locks.request(\"dblock\", (lock) => __awaiter(this, void 0, void 0, function* () {\n                // get the last local concept id(-ve) from the indexdb\n                let idList = yield getObjectsFromLocalIndexDb(\"localid\");\n                // if the list is valid then.\n                if (Array.isArray(idList)) {\n                    // if the zeroth component that is the concept component is present\n                    if (idList[0]) {\n                        // if the zeroth component (concept component) has a valid value;\n                        let localConceptIdValue = idList[0].value;\n                        if (localConceptIdValue) {\n                            // add the new concept id to the memory\n                            LocalId.AddConceptId(idList[0]);\n                            // update the indexdb with the new concept value that other programs can use and\n                            // reserve the 10 ids for this program.\n                            yield UpdateToDatabase(\"localid\", { \"id\": 0, \"value\": localConceptIdValue - 10 });\n                        }\n                        else {\n                            // incase there is invalid id then choose a random id .\n                            localConceptIdValue = -Math.floor(Math.random() * 100000000);\n                            let object = { \"id\": 0, \"value\": localConceptIdValue };\n                            let newObject = { \"id\": 0, \"value\": localConceptIdValue - 10 };\n                            LocalId.AddConceptId(object);\n                            yield UpdateToDatabase(\"localid\", newObject);\n                        }\n                    }\n                    if (idList[2]) {\n                        BaseUrl.BASE_RANDOMIZER = idList[2].value;\n                    }\n                }\n            }));\n        }\n        catch (error) {\n            let errorObject = {\n                \"message\": \"Cannot populate Local Ids from the Index Db\",\n                \"data\": error,\n                \"ok\": false,\n                \"status\": 400\n            };\n            throw errorObject;\n        }\n    });\n}\n/**\n* We have designed our system to use local concepts and connections with its own local ids(negative ids) that\n* is only valid for the browser that creates this. We have a translator in our node server.\n* We cannot keep on using the indexdb to get the new data so we populate the data from indexdb to our memory\n* then we use these ids from memory and update the indexdb with the latest id frequently.\n* This function does this process in initlization from indexdb to memory.\n*\n* This function locked so that no two parallel process can access this functionality at the same time.\n* That might cause some ids to be repeated.\n*\n*\n*/\nexport function PopulateTheLocalConnectionToMemory() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            // put a lock on the indexdb for the domain so that no two things do this same process.\n            yield navigator.locks.request(\"dblock\", (lock) => __awaiter(this, void 0, void 0, function* () {\n                let idList = yield getObjectsFromLocalIndexDb(\"localid\");\n                if (Array.isArray(idList)) {\n                    if (idList[1]) {\n                        let localConnectionId = idList[1].value;\n                        if (localConnectionId) {\n                            LocalId.AddConnectionId(idList[1]);\n                            yield UpdateToDatabase(\"localid\", { \"id\": 1, \"value\": localConnectionId - 10 });\n                        }\n                        else {\n                            // incase there is invalid id then choose a random id .\n                            localConnectionId = -Math.floor(Math.random() * 100000000);\n                            let object = { \"id\": 0, \"value\": localConnectionId };\n                            let newObject = { \"id\": 0, \"value\": localConnectionId - 10 };\n                            LocalId.AddConnectionId(object);\n                            yield UpdateToDatabase(\"localid\", newObject);\n                        }\n                    }\n                    if (idList[2]) {\n                        BaseUrl.BASE_RANDOMIZER = idList[2].value;\n                    }\n                }\n            }));\n        }\n        catch (error) {\n            let errorObject = {\n                \"message\": \"Cannot populate Local Ids from the Index Db\",\n                \"data\": error,\n                \"ok\": false,\n                \"status\": 400\n            };\n            throw errorObject;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateDefaultLConcept } from \"../Local/CreateDefaultLConcept\";\nimport { CreateTheConnectionLocal } from \"./CreateTheConnectionLocal\";\nimport { MakeTheInstanceConceptLocal } from \"./MakeTheInstanceConceptLocal\";\n/**\n * This function converts a json data to concept connection and also preserves its relation.\n * @param json The json data that needs to be converted to the concept connection system\n * @param ofTheConceptId If in case that this composition is part of other composition then this must be the connecting concept.\n * @param ofTheConceptUserId If in case that this composition is part of other composition then this must be the user Id of the  connecting concept.\n * @param mainKey If in case that this composition is part of other composition then this must be the main composition\n * @param userId The user Id of the user creating the composition.\n * @param accessId The accessId of the user creating the composition.\n * @param sessionInformationId Session of the user.\n * @param automaticSync for future use.\n * @returns the main concept of this composition.\n */\nexport function CreateTheCompositionLocal(json_1) {\n    return __awaiter(this, arguments, void 0, function* (json, ofTheConceptId = null, ofTheConceptUserId = null, mainKey = null, userId = null, accessId = null, sessionInformationId = null, automaticSync = false) {\n        let localUserId = userId !== null && userId !== void 0 ? userId : 999;\n        let localAccessId = accessId !== null && accessId !== void 0 ? accessId : 999;\n        let localSessionId = sessionInformationId !== null && sessionInformationId !== void 0 ? sessionInformationId : 999;\n        let MainKeyLocal = mainKey !== null && mainKey !== void 0 ? mainKey : 0;\n        let MainConcept = CreateDefaultLConcept();\n        for (const key in json) {\n            if (typeof json[key] != 'string' && typeof json[key] != 'number') {\n                if (ofTheConceptId == null && ofTheConceptUserId == null) {\n                    let localMainKey = MainKeyLocal;\n                    let conceptString = yield MakeTheInstanceConceptLocal(key, \"\", true, localUserId, localAccessId, localSessionId);\n                    let concept = conceptString;\n                    MainConcept = concept;\n                    localMainKey = concept.id;\n                    MainKeyLocal = concept.id;\n                    yield CreateTheCompositionLocal(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId);\n                }\n                else {\n                    let ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                    let ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 999;\n                    let localMainKey = MainKeyLocal;\n                    let conceptString = yield MakeTheInstanceConceptLocal(key, \"\", true, localUserId, localAccessId, localSessionId);\n                    let concept = conceptString;\n                    yield CreateTheConnectionLocal(ofThe, concept.id, localMainKey);\n                    yield CreateTheCompositionLocal(json[key], concept.id, concept.userId, localMainKey, userId, accessId, sessionInformationId);\n                }\n            }\n            else {\n                let ofThe = ofTheConceptId !== null && ofTheConceptId !== void 0 ? ofTheConceptId : 999;\n                let ofTheUser = ofTheConceptUserId !== null && ofTheConceptUserId !== void 0 ? ofTheConceptUserId : 999;\n                let localMainKey = MainKeyLocal;\n                let conceptString = yield MakeTheInstanceConceptLocal(key, json[key].toString(), false, localUserId, localAccessId, localSessionId);\n                let concept = conceptString;\n                yield CreateTheConnectionLocal(ofThe, concept.id, localMainKey);\n            }\n        }\n        return MainConcept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Concept } from \"../../DataStructures/Concept\";\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { LocalId } from \"../../DataStructures/Local/LocalId\";\n/**\n * This function creates the concept in the local system (Local memory and IndexDb) but not in the backend database\n * To create this concept in the backend database you need to sync the local data to the backend by LocalSyncData class.\n *\n * This function creates a id and ghost id which are equal to each other.\n * These id and ghostId are negative which means that they are virtual concepts. After these concepts have been synced with the backend\n * they are converted to real id. After returning from the backend the id changes to positive(+) and real id while the ghostId remains the same\n *\n * The system then saves this relation between -ve id and real id in the backend server and also in the local memory.\n *\n * @param referent This is the string that is the actual value of the concept.\n * @param typecharacter The string that defines the type of the concept.\n * @param userId This is the userId of the creator.\n * @param categoryId This is the category Id of the concept.\n * @param typeId This is the type Id of the concept that relates to the typecharacter passed above.\n * @param accessId This is the accessId of the concept(most probably is the accessId of the user)\n * @param isComposition This is set in the case that the composition needs to be created.\n * @param referentId if this concept refers to any other concept then this needs to be passed.\n * @returns\n */\nexport default function CreateTheConceptLocal(referent_1, typecharacter_1, userId_1, categoryId_1, typeId_1, accessId_1) {\n    return __awaiter(this, arguments, void 0, function* (referent, typecharacter, userId, categoryId, typeId, accessId, isComposition = false, referentId = 0) {\n        try {\n            //let id = -Math.floor(Math.random() * 100000000);\n            let id = yield LocalId.getConceptId();\n            console.log(\"this is the getting id type connection\", id);\n            let isNew = true;\n            let created_on = new Date();\n            let updated_on = new Date();\n            if (referent == \"the\") {\n                let concept = new Concept(1, 999, 5, 5, referentId, referent, accessId, isNew, created_on, updated_on, typecharacter);\n                return concept;\n            }\n            let concept = new Concept(id, userId, typeId, categoryId, referentId, referent, accessId, isNew, created_on, updated_on, typecharacter);\n            concept.isTemp = true;\n            concept.isComposition = isComposition;\n            LocalConceptsData.AddConcept(concept);\n            //storeToDatabase(\"localconcept\",concept);\n            return concept;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Connection } from \"../../DataStructures/Connection\";\nimport { LocalConnectionData } from \"../../DataStructures/Local/LocalConnectionData\";\nimport { LocalId } from \"../../DataStructures/Local/LocalId\";\nimport { LocalSyncData } from \"../../app\";\n/**\n * This function creates a connection for the concept connection system. This connection will only be created in real sense\n * once the data is synced using LocalSyncData.SyncDataOnline()\n * Here id and ghostId are created which are negative(these are virtual ids). After they are synced then they become real ids\n * The real ids are then associated with these ghost ids in node server (backend) and also in the local memory.\n * @param ofTheConceptId Of the concept Id for the connection\n * @param toTheConceptId To the concept Id for the connection\n * @param typeId Type of the connection, should be the composition id for internal connection and type concept in case\n * of external connection.\n * @param orderId current context is that for internal connections the order id is less than 3 and for external connections greater than 999\n * @param typeString this is the typeString in the case of external connections.\n * @returns a connection that is created and stored in the local system.\n */\nexport function CreateTheConnectionLocal(ofTheConceptId_1, toTheConceptId_1, typeId_1) {\n    return __awaiter(this, arguments, void 0, function* (ofTheConceptId, toTheConceptId, typeId, orderId = 1, typeString = \"\", userId = 999) {\n        try {\n            let accessId = 4;\n            // let randomid = -Math.floor(Math.random() * 100000000);\n            let randomid = yield LocalId.getConnectionId();\n            let realOfTheConceptId = 0;\n            let realToTheConceptId = 0;\n            let realTypeId = 0;\n            realOfTheConceptId = ofTheConceptId;\n            realToTheConceptId = toTheConceptId;\n            realTypeId = typeId;\n            let connection = new Connection(0, 0, 0, 0, 0, 0, 0);\n            if (ofTheConceptId != toTheConceptId) {\n                connection = new Connection(randomid, realOfTheConceptId, realToTheConceptId, userId, typeId, orderId, accessId);\n                connection.isTemp = true;\n                connection.typeCharacter = typeString;\n                yield LocalSyncData.AddConnection(connection);\n                LocalConnectionData.AddConnection(connection);\n                //storeToDatabase(\"localconnection\", connection);\n            }\n            return connection;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { GetTheConceptLocal } from \"./GetTheConceptLocal\";\nexport function DeleteConceptLocal(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield GetTheConceptLocal(id);\n        LocalConceptsData.RemoveConcept(concept);\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { GetCompositionLocal, GetCompositionLocalWithId } from \"./GetCompositionLocal\";\nimport GetConceptByCharacterLocal from \"./GetConceptByCharacterLocal\";\n/**\n * This function returns the list of composition which have the type @param compositionName\n * @param compositionName The type of the composition to pull\n * @param userId User Id of the user trying to pull the list\n * @returns list of compositions.\n */\nexport function GetCompositionListLocal(compositionName, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let concept = yield GetConceptByCharacterLocal(compositionName);\n            let CompositionList = [];\n            if (concept.id != 0) {\n                let conceptList = yield LocalConceptsData.GetConceptsByTypeIdAndUser(concept.id, userId);\n                for (let i = 0; i < conceptList.length; i++) {\n                    let compositionJson = yield GetCompositionLocal(conceptList[i].id);\n                    CompositionList.push(compositionJson);\n                }\n            }\n            return CompositionList;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n/**\n * This function returns the list of composition with data - id format which have the type @param compositionName\n * @param compositionName The type of the composition to pull\n * @param userId User Id of the user trying to pull the list\n * @returns list of compositions with data - id format.\n */\nexport function GetCompositionListLocalWithId(compositionName, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let concept = yield GetConceptByCharacterLocal(compositionName);\n            let CompositionList = [];\n            if (concept.id != 0) {\n                let conceptList = yield LocalConceptsData.GetConceptsByTypeIdAndUser(concept.id, userId);\n                for (let i = 0; i < conceptList.length; i++) {\n                    let compositionJson = yield GetCompositionLocalWithId(conceptList[i].id);\n                    CompositionList.push(compositionJson);\n                }\n            }\n            return CompositionList;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { LocalConnectionData } from \"../../DataStructures/Local/LocalConnectionData\";\nimport { TranslateLocalToReal } from \"../../Api/Translate/TranslateLocalToReal\";\nimport { GetComposition } from \"../GetComposition\";\nexport function GetCompositionLocal(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        try {\n            let connectionList = [];\n            let returnOutput = {};\n            connectionList = yield LocalConnectionData.GetConnectionsOfCompositionLocal(id);\n            //connectionList = ConnectionData.GetConnectionsOfComposition(id);\n            let compositionList = [];\n            for (let i = 0; i < connectionList.length; i++) {\n                if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                    compositionList.push(connectionList[i].ofTheConceptId);\n                }\n            }\n            let concept = yield LocalConceptsData.GetConcept(id);\n            if (concept.id == 0) {\n                let realConcept = yield TranslateLocalToReal(id);\n                if (realConcept.id > 0) {\n                    return yield GetComposition(realConcept.id);\n                }\n            }\n            let output = yield recursiveFetchLocal(id, connectionList, compositionList);\n            let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"top\";\n            returnOutput[mainString] = output;\n            return returnOutput;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\nexport function GetCompositionLocalWithId(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        try {\n            let connectionList = [];\n            let returnOutput = {};\n            let FinalReturn = {};\n            connectionList = yield LocalConnectionData.GetConnectionsOfCompositionLocal(id);\n            let compositionList = [];\n            for (let i = 0; i < connectionList.length; i++) {\n                if (!compositionList.includes(connectionList[i].ofTheConceptId)) {\n                    compositionList.push(connectionList[i].ofTheConceptId);\n                }\n            }\n            let concept = yield LocalConceptsData.GetConcept(id);\n            if (concept.id != 0) {\n                let output = yield recursiveFetchLocal(id, connectionList, compositionList);\n                let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"top\";\n                returnOutput[mainString] = output;\n            }\n            FinalReturn['data'] = returnOutput;\n            FinalReturn['id'] = id;\n            return FinalReturn;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\nfunction recursiveFetchLocal(id_1, connectionList_1, compositionList_1) {\n    return __awaiter(this, arguments, void 0, function* (id, connectionList, compositionList, visitedConcepts = []) {\n        var _a, _b, _c, _d;\n        let output = {};\n        let arroutput = [];\n        let concept = yield LocalConceptsData.GetConcept(id);\n        if (concept.id != 0) {\n            if (concept.type == null) {\n                let toConceptTypeId = concept.typeId;\n                let toConceptType = yield LocalConceptsData.GetConcept(toConceptTypeId);\n                concept.type = toConceptType;\n            }\n        }\n        let mainString = (_b = (_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) !== null && _b !== void 0 ? _b : \"top\";\n        if (!compositionList.includes(id)) {\n            return concept === null || concept === void 0 ? void 0 : concept.characterValue;\n        }\n        else {\n            if (visitedConcepts.includes(id)) {\n                return \"\";\n            }\n            else {\n                visitedConcepts.push(id);\n            }\n            for (let i = 0; i < connectionList.length; i++) {\n                if (connectionList[i].ofTheConceptId == id) {\n                    let toConceptId = connectionList[i].toTheConceptId;\n                    let toConcept = yield LocalConceptsData.GetConcept(toConceptId);\n                    if (toConcept.id != 0) {\n                        if ((toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) == null) {\n                            let toConceptTypeId = toConcept.typeId;\n                            let toConceptType = yield LocalConceptsData.GetConcept(toConceptTypeId);\n                            toConcept.type = toConceptType;\n                        }\n                    }\n                    let regex = \"the_\";\n                    let localmainString = (_d = (_c = toConcept === null || toConcept === void 0 ? void 0 : toConcept.type) === null || _c === void 0 ? void 0 : _c.characterValue) !== null && _d !== void 0 ? _d : \"top\";\n                    let localKey = localmainString.replace(regex, \"\");\n                    if (isNaN(Number(localKey))) {\n                        if (localKey) {\n                            const result = yield recursiveFetchLocal(toConceptId, connectionList, compositionList);\n                            output[localKey] = result;\n                        }\n                    }\n                    else {\n                        const result = yield recursiveFetchLocal(toConceptId, connectionList, compositionList);\n                        arroutput[localKey] = result;\n                        output = arroutput;\n                    }\n                }\n            }\n        }\n        return output;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetLocalConceptByCharacterValue } from \"../../Api/Local/GetLocalConceptByCharacterValue\";\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { CreateDefaultLConcept, SplitStrings } from \"../../app\";\nexport default function GetConceptByCharacterLocal(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = yield LocalConceptsData.GetConceptByCharacterAndTypeLocal(characterValue, 51);\n        return concept;\n    });\n}\n/**\n *\n * @param character the character value of the concept we want to find in our local system.\n * @returns LConcept which will be the associated concept with the character Value.\n */\nexport function GetConceptByCharacterAndCategoryLocal(character) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let lconcept = CreateDefaultLConcept();\n        if (character == \"the\") {\n            lconcept.id = 1;\n            lconcept.typeId = 5;\n            lconcept.characterValue = \"the\";\n            return lconcept;\n        }\n        let splittedStringArray = SplitStrings(character);\n        if (splittedStringArray.length > 1) {\n            let category = 1;\n            let prefix = yield GetConceptByCharacterAndCategoryLocal(splittedStringArray[0]);\n            if (prefix.id != 0) {\n                category = prefix.id;\n            }\n            lconcept = yield GetConceptByCategoryAndCharacterLocalMemory(character, category);\n        }\n        else if (splittedStringArray[0] == character) {\n            lconcept = yield GetConceptByCharacterLocal(character);\n        }\n        return lconcept;\n    });\n}\nexport function GetConceptByCategoryAndCharacterLocalMemory(value, categoryId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let concept = LocalConceptsData.GetConceptByCharacterAndCategoryLocal(value, categoryId);\n        return concept;\n    });\n}\nexport function GetConceptByCharacterLocalFull(characterValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let concept = yield LocalConceptsData.GetConceptByCharacter(characterValue);\n            let literalCharacter = `${characterValue}`;\n            if ((concept == null || (concept === null || concept === void 0 ? void 0 : concept.id) == 0) && literalCharacter) {\n                yield GetLocalConceptByCharacterValue(characterValue);\n                concept = yield LocalConceptsData.GetConceptByCharacter(characterValue);\n            }\n            return concept;\n        }\n        catch (error) {\n            console.log(\"this is the error in Get Concept By Character Local full\", error);\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConnectionData } from \"../../DataStructures/Local/LocalConnectionData\";\nexport function GetConnectionOfTheConceptLocal(ofTheConcept, typeId, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let connections = yield LocalConnectionData.GetConnectionOfCompositionAndTypeLocal(typeId, ofTheConcept);\n            return connections;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetCompositionLocal, GetConceptByCharacterAndCategoryLocal } from \"../../app\";\nimport { GetConnectionOfTheConceptLocal } from \"./GetConnectionOfTheConceptLocal\";\nexport function GetRelationLocal(id, relation, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let typeConcept = yield GetConceptByCharacterAndCategoryLocal(relation);\n            let localConnections = [];\n            if (typeConcept.id != 0) {\n                localConnections = yield GetConnectionOfTheConceptLocal(id, typeConcept.id, userId);\n            }\n            let output = [];\n            for (let i = 0; i < localConnections.length; i++) {\n                let comp = yield GetCompositionLocal(localConnections[i].toTheConceptId);\n                output.push(comp);\n            }\n            return output;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { LocalGhostIdTree } from \"../../DataStructures/Local/LocalGhostIdTree\";\nimport { CreateDefaultLConcept, GetTheConcept } from \"../../app\";\nimport { convertFromConceptToLConcept } from \"../Conversion/ConvertConcepts\";\n/**\n * This function converts any local/ virtual or real concept id to a LConcept.\n * In case that the id is virtual then it tries to find it from the local memory. This will return -ve id.\n * In case that the virtual id has already been synced to the backend then it gets this from the relational binary tree(LocalGhostIdTree). This will return +ve id.\n * In case that we pass real id then this will return real concept but formatted in LConcept form. This might have undefined ghostId.\n * @param id the id that you want to find out the concept of. This could be a negative (virtual id ) or a real concept id.\n * @returns LConcept with either (-ve or +ve id)\n */\nexport function GetTheConceptLocal(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let lconcept = CreateDefaultLConcept();\n            if (id < 0) {\n                lconcept = yield LocalConceptsData.GetConcept(id);\n                if (lconcept.id == 0) {\n                    let localNode = yield LocalGhostIdTree.getNodeFromTree(id);\n                    if (localNode === null || localNode === void 0 ? void 0 : localNode.value) {\n                        let returnedConcept = localNode.value;\n                        if (returnedConcept) {\n                            lconcept = returnedConcept;\n                        }\n                    }\n                }\n            }\n            else {\n                let concept = yield GetTheConcept(id);\n                lconcept = convertFromConceptToLConcept(concept);\n            }\n            return lconcept;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport CreateTheConceptLocal from \"./CreateTheConceptLocal\";\nexport default function MakeTheConceptLocal(referent, typeCharacter, userId, categoryId, typeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let conceptString = yield LocalConceptsData.GetConceptByCharacterAndTypeLocal(referent, typeId);\n        let concept = conceptString;\n        let accessId = 4;\n        if (typeCharacter == \"the\") {\n            categoryId = 1;\n        }\n        if (concept.id == 0) {\n            conceptString = yield CreateTheConceptLocal(referent, typeCharacter, userId, categoryId, typeId, accessId);\n            concept = conceptString;\n        }\n        return concept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport CreateTheConceptLocal from \"./CreateTheConceptLocal\";\nimport { MakeTheTypeConceptLocal } from \"./MakeTheTypeLocal\";\nimport { LocalConceptsData } from \"../../DataStructures/Local/LocalConceptData\";\nimport { LocalSyncData } from \"../../app\";\n/**\n * This is the basic function of the concept connection system. This function let's you create a concept within the constraints of the\n * concept connection system. This function is the building block of the concept connection system.\n * This function automatically passes the concept to be synced to the background. Next time you sync the data this concept will also be created in the backend.\n * @param type this is the type of the concept. You can also think of this as the key of concept. first_name, last_name etc.\n * @param referent the actual value of the concept. The actual name of value of the concept.\n * @param composition this is a boolean that defines if the concept is a composition or not. If this is a composition then other things are also\n * connected internally with this concept. If composition is true then always a new concept is created otherwise it checks if the concept already exists\n * and creates only in the case that the concept does not already exists with its type and value as its unique identifier.\n * @param userId the userId of the creator.\n * @param accessId this is the accessId of the creator. By default should be 4.\n * @param sessionInformationId this is the session that is created by the system.\n * @param referentId In case we need this concept to refer to any other concept.\n * @returns a concept which is either newly created or an older concept that already exists.\n */\nexport function MakeTheInstanceConceptLocal(type_1, referent_1) {\n    return __awaiter(this, arguments, void 0, function* (type, referent, composition = false, userId, accessId, sessionInformationId = 999, referentId = 0) {\n        try {\n            let sessionInformationId = 999;\n            let categoryId = 4;\n            let sessionInformationUserId = userId;\n            // change this\n            let accessId = 4;\n            let stringToCheck = \"\";\n            let stringLength = referent.length;\n            let typeConcept;\n            let concept;\n            let startsWithThe = type.startsWith(\"the_\");\n            if (startsWithThe) {\n                stringToCheck = type;\n            }\n            else {\n                stringToCheck = \"the_\" + type;\n            }\n            if (composition) {\n                let typeConceptString = yield MakeTheTypeConceptLocal(type, sessionInformationId, userId, userId);\n                typeConcept = typeConceptString;\n                let conceptString = yield CreateTheConceptLocal(referent, type, userId, categoryId, typeConcept.id, accessId, true, referentId);\n                concept = conceptString;\n            }\n            else if (stringLength > 255) {\n                let typeConceptString = yield MakeTheTypeConceptLocal(stringToCheck, sessionInformationId, sessionInformationUserId, userId);\n                typeConcept = typeConceptString;\n                let conceptString = yield CreateTheConceptLocal(referent, stringToCheck, userId, categoryId, typeConcept.id, accessId);\n                concept = conceptString;\n            }\n            else {\n                let typeConceptString = yield MakeTheTypeConceptLocal(stringToCheck, sessionInformationId, sessionInformationUserId, userId);\n                typeConcept = typeConceptString;\n                let conceptByCharTypeString = yield LocalConceptsData.GetConceptByCharacterAndTypeLocal(referent, typeConcept.id);\n                let conceptTypeCharacter = conceptByCharTypeString;\n                concept = conceptTypeCharacter;\n                if (conceptTypeCharacter.id == 0 && conceptTypeCharacter.userId == 0) {\n                    let conceptString = yield CreateTheConceptLocal(referent, stringToCheck, userId, categoryId, typeConcept.id, accessId);\n                    concept = conceptString;\n                }\n            }\n            concept.type = typeConcept;\n            LocalSyncData.AddConcept(concept);\n            return concept;\n        }\n        catch (error) {\n            throw error;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport CreateTheConceptLocal from \"./CreateTheConceptLocal\";\nimport { GetConceptByCharacterAndCategoryLocal } from \"./GetConceptByCharacterLocal\";\nimport { SplitStrings } from \"../SplitStrings\";\nimport MakeTheConceptLocal from \"./MakeTheConceptLocal\";\n/**\n * There are two types of concepts. One type of concept is a type concept. These concepts have no actual value and do not mean\n * anything unless they are associated with other values. These are placeholders like first_name, last_name, age etc that are required in the system.\n * These types need to be created seperately.\n *\n *\n * @param typeString type of the concept that needs to be created.\n * @param sessionId SessionId of the user\n * @param sessionUserId Not required pass 999\n * @param userId UserId of the user creating this concept\n * @returns\n */\nexport function MakeTheTypeConceptLocal(typeString, sessionId, sessionUserId, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let accessId = 4;\n        let existingConcept = yield GetConceptByCharacterAndCategoryLocal(typeString);\n        if (existingConcept) {\n            if (existingConcept.id == 0 || existingConcept.userId == 0) {\n                let splittedStringArray = SplitStrings(typeString);\n                if (splittedStringArray[0] == typeString) {\n                    let concept = yield MakeTheConceptLocal(typeString, \"the\", userId, 1, 51);\n                    existingConcept = concept;\n                }\n                else {\n                    // var categoryConcept = await MakeTheTypeConceptLocal(splittedStringArray[0], sessionId, sessionUserId, userId);\n                    // var typeConcept = await MakeTheTypeConceptLocal(splittedStringArray[1], sessionId, sessionUserId, userId );\n                    // if(typeConcept){\n                    let categoryConcept = yield MakeTheTypeConceptLocal(splittedStringArray[0], sessionId, sessionUserId, userId);\n                    let typeConcept = yield MakeTheTypeConceptLocal(splittedStringArray[1], sessionId, sessionUserId, userId);\n                    let concept = yield CreateTheConceptLocal(typeString, splittedStringArray[1], userId, categoryConcept.id, typeConcept.id, accessId);\n                    existingConcept = concept;\n                    //   }\n                }\n            }\n        }\n        // LocalSyncData.AddConcept(existingConcept);\n        return existingConcept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport InsertUniqueNumber from '../../Helpers/UniqueInsert';\nimport { CheckAllConnectionsConnectedInLConnectionArray, CheckIfTypeLConceptsExistsInArray, } from '../../Helpers/CheckIfExists';\nimport { GetAllConnectionsOfComposition } from '../../Api/GetAllConnectionsOfComposition';\nimport GetTheConcept from './../GetTheConcept';\nimport { DeleteConnectionById } from './../DeleteConnection';\nimport { CreateTheCompositionLocal } from './CreateTheCompositionLocal';\nimport { MakeTheInstanceConceptLocal } from './MakeTheInstanceConceptLocal';\nimport { CreateDefaultLConcept, CreateTheConnectionLocal, LocalSyncData } from '../../app';\nimport { convertFromConceptToLConcept, convertFromConnectionToLConnection } from '../Conversion/ConvertConcepts';\n// function to update the cache composition\nexport function UpdateCompositionLocal(patcherStructure) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // get all the default userId, sessionId, accessId passed by the patcherStructure\n        const userId = patcherStructure.userId;\n        const sessionId = patcherStructure.sessionId;\n        const accessId = patcherStructure.accessId;\n        let connectionList = [];\n        const conceptList = [];\n        let composition = CreateDefaultLConcept();\n        let parentConcept = CreateDefaultLConcept();\n        const toDeleteConcepts = [];\n        // the main composition Id that has the data that needs to be patched\n        const compositionId = patcherStructure.compositionId;\n        // if you want to edit the subcompositions of the composition then you have to pass to this\n        const ofTheConceptId = patcherStructure.ofTheCompositionId;\n        let toDeleteConnections = [];\n        // get all connections from the backend because it needs latest data\n        const connectionListString = yield GetAllConnectionsOfComposition(compositionId);\n        let connectionListOriginal = connectionListString;\n        for (let i = 0; i < connectionListOriginal.length; i++) {\n            connectionList.push(convertFromConnectionToLConnection(connectionListOriginal[i]));\n        }\n        const conceptIdList = [];\n        const compositionList = [];\n        // put this in the upper section before updating because this will tell all other distributed\n        //servers to destroy the copy of the composition that they have as new composition is coming up\n        // get all the connections that are inside of the composition and store them in\n        let allConcepts = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            InsertUniqueNumber(compositionList, connectionList[i].ofTheConceptId);\n            InsertUniqueNumber(conceptIdList, connectionList[i].ofTheConceptId);\n            InsertUniqueNumber(conceptIdList, connectionList[i].toTheConceptId);\n            allConcepts.push(connectionList[i].ofTheConceptId);\n        }\n        // get all the concepts that are inside of the composition and store them in a conceptList\n        for (let i = 0; i < conceptIdList.length; i++) {\n            const conceptString = yield GetTheConcept(conceptIdList[i]);\n            const concept = conceptString;\n            if (compositionId == conceptIdList[i]) {\n                composition = convertFromConceptToLConcept(concept);\n            }\n            if (ofTheConceptId == conceptIdList[i]) {\n                parentConcept = convertFromConceptToLConcept(concept);\n            }\n            conceptList.push(convertFromConceptToLConcept(concept));\n        }\n        // now trying to patch the new object into the composition\n        const object = patcherStructure.patchObject;\n        for (const key in object) {\n            let insertingConcept = CreateDefaultLConcept();\n            const value = object[key];\n            let localConcept = composition;\n            // if the immedidate parent exists in the composition (i.e. for multilevel composition)\n            if (parentConcept.id > 0) {\n                localConcept = parentConcept;\n            }\n            if (Array.isArray(value) || typeof value == 'object') {\n                insertingConcept = yield MakeTheInstanceConceptLocal(key, \"\", true, composition.userId, 4, 999);\n                yield CreateTheCompositionLocal(object[key], insertingConcept.id, insertingConcept.userId, composition.id, composition.userId, 4, 999);\n            }\n            else {\n                // make the new concept in the object\n                insertingConcept = yield MakeTheInstanceConceptLocal(key, value, false, userId, accessId, sessionId);\n            }\n            // check if the concept exists in the concept list because if it exists then we have to delete old connection\n            const ExistingConcepts = CheckIfTypeLConceptsExistsInArray(conceptList, insertingConcept);\n            // if the existing concept then start the process for deleting the concept in the list\n            for (let i = 0; i < ExistingConcepts.length; i++) {\n                if (ExistingConcepts[i].id > 0) {\n                    const deletingConnections = CheckAllConnectionsConnectedInLConnectionArray(connectionList, ExistingConcepts[i].id);\n                    toDeleteConnections = toDeleteConnections.concat(deletingConnections);\n                    toDeleteConcepts.push(ExistingConcepts[i]);\n                }\n            }\n            // create the connection between the new concept and the old composition\n            const connectionString = yield CreateTheConnectionLocal(localConcept.id, insertingConcept.id, composition.id, 2);\n            const connection = connectionString;\n            conceptList.push(insertingConcept);\n        }\n        // now you have to delete the connection in bulk\n        for (let j = 0; j < toDeleteConnections.length; j++) {\n            // remove from the cache list\n            // delete the connection in the backend\n            yield DeleteConnectionById(toDeleteConnections[j].id);\n        }\n        yield LocalSyncData.SyncDataOnline();\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport MakeTheCharacterData from \"./MakeTheCharacterData\";\nimport MakeTheConcept from \"./MakeTheConcept\";\nexport default function MakeTheCharacter(the_character_data, userId, securityId, accessId, accessUserId, sessionId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let categoryUserId = userId;\n        let securityUserId = userId;\n        let categoryId = 4;\n        let typeId = 51;\n        let typeUserId = userId;\n        let sessionUserId = userId;\n        let referentUserId = userId;\n        let lengthOfCharacters = the_character_data.length;\n        let concept;\n        if (lengthOfCharacters == 1) {\n            let referentId = the_character_data.charCodeAt(0);\n            let typeIdForCharacter = 49;\n            let characterDataString = yield MakeTheCharacterData(the_character_data, userId, securityId, accessId, sessionId);\n            concept = MakeTheConcept(the_character_data, userId, categoryId, typeIdForCharacter, referentId, accessId, \"the_character\");\n        }\n        else {\n            let characterDataString = yield MakeTheCharacterData(the_character_data, userId, securityId, accessId, sessionId);\n            let characterData = characterDataString;\n            if (characterData.isNew) {\n                let conceptString = yield MakeTheConcept(the_character_data, userId, categoryId, typeId, characterData.id, accessId, \"the_characters\");\n                concept = conceptString;\n            }\n            else {\n                let conceptString = yield MakeTheConcept(the_character_data, userId, categoryId, typeId, characterData.id, accessId, \"the_characters\");\n                concept = conceptString;\n            }\n        }\n        return concept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTheCharacter } from \"../Api/Create/CreateTheCharacter\";\nimport { TheCharacter } from \"../DataStructures/TheCharacter\";\nexport default function MakeTheCharacterData(the_character_data, userId, securityId, accessId, sessionId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var categoryUserId = userId;\n        var accessUserId = userId;\n        var securityUserId = userId;\n        var sessionInformationUserId = userId;\n        var theCharacter = new TheCharacter(userId, the_character_data, securityId, securityUserId, accessId, accessUserId, sessionId, sessionInformationUserId, \"\", false);\n        var output = yield CreateTheCharacter(theCharacter);\n        var returner = output;\n        return returner;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetConceptByCharacterAndType } from \"../Api/GetConceptByCharacterAndType\";\nimport CreateTheConcept from \"./CreateTheConcept\";\nexport default function MakeTheConcept(referent, userId, categoryId, typeId, referentId, accessId, typeCharacter) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let conceptString = yield GetConceptByCharacterAndType(referent, typeId);\n        let concept = conceptString;\n        if (concept.id == 0) {\n            conceptString = yield CreateTheConcept(referent, userId, categoryId, typeId, referentId, accessId, typeCharacter);\n            concept = conceptString;\n        }\n        return concept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTextData } from \"../Api/Create/CreateTheTextData\";\nimport { GetConceptByCharacterAndType } from \"../Api/GetConceptByCharacterAndType\";\nimport { MakeTheNameInBackend } from \"../Api/MakeTheNameInBackend\";\nimport { TheTexts } from \"../DataStructures/TheTexts\";\nimport { MakeTheTypeConceptApi } from \"../app\";\nimport { CreateDefaultConcept } from \"./CreateDefaultConcept\";\nimport CreateTheConcept, { CreateTheConceptImmediate } from \"./CreateTheConcept\";\n/**\n * This is the basic function of the concept connection system. This function let's you create a concept within the constraints of the\n * concept connection system. This function is the building block of the concept connection system.\n * @param type this is the type of the concept. You can also think of this as the key of concept. first_name, last_name etc.\n * @param referent the actual value of the concept. The actual name of value of the concept.\n * @param composition this is a boolean that defines if the concept is a composition or not. If this is a composition then other things are also\n * connected internally with this concept. If composition is true then always a new concept is created otherwise it checks if the concept already exists\n * and creates only in the case that the concept does not already exists with its type and value as its unique identifier.\n * @param userId the userId of the creator.\n * @param passedAccessId this is the accessId of the creator. By default should be 4.\n * @param passedSessionId this is the session that is created by the system.\n * @param referentId In case we need this concept to refer to any other concept.\n * @returns a concept which is either newly created or an older concept that already exists.\n */\nexport default function MakeTheInstanceConcept(type_1, referent_1) {\n    return __awaiter(this, arguments, void 0, function* (type, referent, composition = false, userId, passedAccessId = 4, passedSessionId = 999, referentId = 0) {\n        let sessionInformationId = passedSessionId;\n        let categoryId = 4;\n        let categoryUserId = userId;\n        let referentUserId = 999;\n        let securityId = 999;\n        let securityUserId = userId;\n        let sessionInformationUserId = userId;\n        // change this\n        let accessId = passedAccessId;\n        let accessUserId = userId;\n        let stringToCheck = \"\";\n        let stringLength = referent.length;\n        let typeConcept = CreateDefaultConcept();\n        let concept;\n        let startsWithThe = type.startsWith(\"the_\");\n        if (startsWithThe) {\n            stringToCheck = type;\n        }\n        else {\n            stringToCheck = \"the_\" + type;\n        }\n        if (composition) {\n            let typeConceptString = yield MakeTheTypeConceptApi(type, userId);\n            typeConcept = typeConceptString;\n            let conceptString = yield CreateTheConcept(referent, userId, categoryId, typeConcept.id, referentId, accessId, type);\n            concept = conceptString;\n        }\n        else if (stringLength > 255) {\n            let typeConceptString = yield MakeTheTypeConceptApi(stringToCheck, userId);\n            typeConcept = typeConceptString;\n            let conceptString = yield CreateTheConcept(referent, userId, categoryId, typeConcept.id, referentId, accessId, stringToCheck);\n            concept = conceptString;\n            let TheTextsData = new TheTexts(userId, referent, securityId, securityUserId, accessId, accessUserId, sessionInformationId, sessionInformationUserId, Date.now().toString(), true);\n            CreateTextData(TheTextsData);\n        }\n        else {\n            let typeConceptString = yield MakeTheTypeConceptApi(stringToCheck, userId);\n            typeConcept = typeConceptString;\n            let conceptByCharTypeString = yield GetConceptByCharacterAndType(referent, typeConcept.id);\n            let conceptTypeCharacter = conceptByCharTypeString;\n            concept = conceptTypeCharacter;\n            if (conceptTypeCharacter.id == 0 && conceptTypeCharacter.userId == 0) {\n                // let makeTheNameString = await MakeTheName(referent,userId, securityId, securityUserId, accessId, accessUserId, sessionInformationId, sessionInformationUserId,typeConcept.id, typeConcept.userId,conceptTypeCharacter );\n                // let makeTheNameConcept = makeTheNameString as Concept;\n                // concept = conceptTypeCharacter;\n                let conceptString = yield CreateTheConceptImmediate(referent, userId, categoryId, typeConcept.id, 12, accessId, stringToCheck);\n                concept = conceptString;\n                MakeTheNameInBackend(concept.id, `${referent}`, typeConcept.id, userId);\n            }\n        }\n        // if(concept){\n        //     if(concept.type == null){\n        //         let conceptType = ConceptsData.GetConcept(concept.typeId);\n        //         if(conceptType == null && concept.typeId != null && concept.typeId != undefined){\n        //             let typeConceptStringNew = await GetConcept(concept.typeId);\n        //             let newTypeConcept = typeConceptStringNew as Concept;\n        //             concept.type = newTypeConcept;\n        //         }\n        //     }\n        // }\n        concept.type = typeConcept;\n        return concept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { MakeTheTypeConceptApi } from \"../app\";\nimport { CreateDefaultConcept } from \"./CreateDefaultConcept\";\nimport MakeTheConcept from \"./MakeTheConcept\";\nexport function MakeTheTimestamp(type_1, referent_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (type, referent, userId, accessId = 4, sessionInformationId = 999) {\n        let categoryId = 4;\n        let referentId = 0;\n        // change this\n        let stringToCheck = \"\";\n        let startsWithThe = type.startsWith(\"the_\");\n        let typeConcept = CreateDefaultConcept();\n        let concept;\n        if (startsWithThe) {\n            stringToCheck = type;\n        }\n        else {\n            stringToCheck = \"the_\" + type;\n        }\n        let typeConceptString = yield MakeTheTypeConceptApi(stringToCheck, userId);\n        typeConcept = typeConceptString;\n        let conceptString = yield MakeTheConcept(referent, userId, categoryId, typeConcept.id, referentId, accessId, stringToCheck);\n        concept = conceptString;\n        return concept;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateTheConceptImmediate } from \"./CreateTheConcept\";\nimport GetConceptByCharacter from \"./GetConceptByCharacter\";\nimport MakeTheCharacter from \"./MakeTheCharacter\";\nimport { SplitStrings } from \"./SplitStrings\";\nexport function MakeTheTypeConcept(typeString, sessionId, sessionUserId, userId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let referentId = 999;\n        let securityId = 999;\n        let accessId = 999;\n        let accessUserId = userId;\n        let existingConcept = yield GetConceptByCharacter(typeString);\n        if (existingConcept) {\n            if (existingConcept.id == 0 || existingConcept.userId == 0) {\n                let splittedStringArray = SplitStrings(typeString);\n                if (splittedStringArray.length > 0) {\n                    if (splittedStringArray[0] == typeString) {\n                        let conceptString = yield MakeTheCharacter(typeString, userId, securityId, accessId, accessUserId, sessionId);\n                        existingConcept = conceptString;\n                    }\n                    else {\n                        let categoryId = 1;\n                        let categoryConcept = yield MakeTheTypeConcept(splittedStringArray[0], sessionId, sessionUserId, userId);\n                        let typeConcept = yield MakeTheTypeConcept(splittedStringArray[1], sessionId, sessionUserId, userId);\n                        if (typeConcept) {\n                            let concept = yield CreateTheConceptImmediate(typeString, userId, categoryConcept.id, typeConcept.id, referentId, accessId, splittedStringArray[1]);\n                            existingConcept = concept;\n                        }\n                    }\n                }\n            }\n        }\n        return existingConcept;\n    });\n}\n", "import { BaseUrl } from \"../../DataStructures/BaseUrl\";\nexport function publishMessage(topic, message) {\n    if (BaseUrl.MQTT_CONNECTION) {\n        BaseUrl.MQTT_CONNECTION.publish(topic, message);\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SearchInternalApi } from \"../../Api/Search/SearchInternalApi\";\nimport { ViewInternalData } from \"../../app\";\nexport function SearchLinkInternal(searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchQuery, token = \"\") {\n        try {\n            let conceptsConnections = yield SearchInternalApi(searchQuery, token);\n            let out = yield ViewInternalData(conceptsConnections);\n            return out;\n        }\n        catch (ex) {\n            throw ex;\n        }\n    });\n}\nexport function SearchLinkInternalAll(searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchQuery, token = \"\") {\n        try {\n            let conceptsConnections = yield SearchInternalApi(searchQuery, token);\n            let out = yield ViewInternalData(conceptsConnections);\n            return out;\n        }\n        catch (ex) {\n            throw ex;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SearchLinkMultipleApi } from \"../../Api/Search/SearchLinkMultipleApi\";\nimport { DATAID, JUSTDATA, NORMAL } from \"../../Constants/FormatConstants\";\nimport { GetConceptBulk, GetConnectionBulk, GetTheConcept } from \"../../app\";\nimport { GetCompositionFromConnectionsInObject, GetCompositionFromConnectionsInObjectNormal, GetCompositionFromConnectionsWithDataIdInObject, GetCompositionFromConnectionsWithDataIdInObjectNew, GetConnectionDataPrefetch } from \"../GetCompositionBulk\";\nexport function SearchLinkMultipleAll(searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchQuery, token = \"\", caller = null, format = DATAID) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        let conceptIds = [];\n        let linkers = [];\n        let connections = [];\n        let reverse = [];\n        let mainCompositionId = searchQuery[0].composition;\n        let conceptsConnections = {};\n        let result = {};\n        try {\n            if (caller === null || caller === void 0 ? void 0 : caller.isDataLoaded) {\n                conceptsConnections.compositionIds = (_a = caller.conceptIds) === null || _a === void 0 ? void 0 : _a.slice();\n                conceptsConnections.internalConnections = (_b = caller.internalConnections) === null || _b === void 0 ? void 0 : _b.slice();\n                conceptsConnections.linkers = (_c = caller.linkers) === null || _c === void 0 ? void 0 : _c.slice();\n                conceptsConnections.reverse = (_d = caller.reverse) === null || _d === void 0 ? void 0 : _d.slice();\n                result = conceptsConnections;\n                conceptIds = result.compositionIds;\n                connections = result.internalConnections;\n                linkers = result.linkers;\n                reverse = result.reverse;\n            }\n            else {\n                conceptsConnections = yield SearchLinkMultipleApi(searchQuery, token);\n                if (caller) {\n                    caller.conceptIds = (_e = conceptsConnections.compositionIds) === null || _e === void 0 ? void 0 : _e.slice();\n                    caller.internalConnections = (_f = conceptsConnections.internalConnections) === null || _f === void 0 ? void 0 : _f.slice();\n                    caller.linkers = (_g = conceptsConnections.linkers) === null || _g === void 0 ? void 0 : _g.slice();\n                    caller.reverse = (_h = conceptsConnections.reverse) === null || _h === void 0 ? void 0 : _h.slice();\n                    caller.isDataLoaded = true;\n                }\n                result = conceptsConnections;\n                conceptIds = result.compositionIds;\n                connections = result.internalConnections;\n                linkers = result.linkers;\n                reverse = result.reverse;\n            }\n            let out = yield DataIdBuildLayer(linkers, conceptIds, connections, reverse, mainCompositionId, format);\n            return out;\n        }\n        catch (e) {\n            console.log(\"this is the error in the search link multiple\", e);\n            throw e;\n        }\n    });\n}\n/**\n * ######### This layer builds the data. Format is dataid ##########\n * @param linkers list of ids that help us\n * @param conceptIds this is all the concept ids that need  to be composited\n * @param connections these are the internal connections of the compositions that help in creating individual compositions\n * @param reverse this is the list of connection ids that need to show reverse connections(to->from)\n * @param mainCompositionId this is the main centre point of this data.\n * @returns\n */\nexport function DataIdBuildLayer(linkers_1, conceptIds_1, connections_1, reverse_1, mainCompositionId_1) {\n    return __awaiter(this, arguments, void 0, function* (linkers, conceptIds, connections, reverse, mainCompositionId, format = DATAID) {\n        let startTime = new Date().getTime();\n        let prefetchConnections = yield GetConnectionDataPrefetch(linkers);\n        let concepts;\n        let out;\n        if (format == JUSTDATA) {\n            concepts = yield GetCompositionFromConnectionsInObject(conceptIds, connections);\n            out = yield FormatFromConnections(linkers, concepts, mainCompositionId, reverse);\n        }\n        else if (format == NORMAL) {\n            concepts = yield GetCompositionFromConnectionsInObjectNormal(conceptIds, connections);\n            out = yield FormatFromConnections(linkers, concepts, mainCompositionId, reverse);\n        }\n        else if (format == 100) {\n            concepts = yield GetCompositionFromConnectionsWithDataIdInObjectNew(conceptIds, connections);\n            out = yield FormatFromConnectionsAltered(prefetchConnections, concepts, mainCompositionId, reverse);\n        }\n        else {\n            concepts = yield GetCompositionFromConnectionsWithDataIdInObject(conceptIds, connections);\n            out = yield FormatFromConnectionsAltered(prefetchConnections, concepts, mainCompositionId, reverse);\n        }\n        return out;\n    });\n}\n/**\n * ## Format is DATAID ##\n * This  is altered format and is different from others because it passes all the connections prebuilt/prefetched\n * This will not let the connections to be again fetched from the memory.\n * @param connections the type connections that need (external connections) to be passed\n * @param compositionData this is a dictionary type of format that has all the build compositions {id: { actual data}}\n * @param mainComposition this is the id of the main composition that builds the tree\n * @param reverse this is the list of connections ids that needs to go to the reverse direction (to---->from)\n * @returns\n */\nexport function FormatFromConnectionsAltered(connections_1, compositionData_1, mainComposition_1) {\n    return __awaiter(this, arguments, void 0, function* (connections, compositionData, mainComposition, reverse = []) {\n        let startTime = new Date().getTime();\n        let mainData = {};\n        let myConcepts = [];\n        for (let i = 0; i < connections.length; i++) {\n            myConcepts.push(connections[i].toTheConceptId);\n            myConcepts.push(connections[i].ofTheConceptId);\n            myConcepts.push(connections[i].typeId);\n        }\n        connections.sort(function (x, y) {\n            return y.id - x.id;\n        });\n        for (let i = 0; i < connections.length; i++) {\n            let reverseFlag = false;\n            if (reverse.includes(connections[i].id)) {\n                reverseFlag = true;\n            }\n            if (reverseFlag == true) {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].toTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata === null || mydata === void 0 ? void 0 : mydata.data;\n                    let key = Object.keys(newData)[0];\n                    try {\n                        let reverseCharater = linkerConcept.characterValue + \"_reverse\";\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][reverseCharater])) {\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][reverseCharater] = [];\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n            else {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].ofTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata === null || mydata === void 0 ? void 0 : mydata.data;\n                    let key = Object.keys(newData)[0];\n                    try {\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][linkerConcept.characterValue])) {\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][linkerConcept.characterValue] = [];\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n        }\n        mainData = compositionData[mainComposition];\n        return mainData;\n    });\n}\n/**\n * ######### Format is normal ######### used for listing.\n * This is helpful in building a format that has multiple mainCompositions i.e. in the context of the list\n * The list format is helpful because you do not have to go over each individual query.\n * @param connections the type connections that need (external connections) to be passed\n * @param compositionData  this is a dictionary type of format that has all the build compositions {id: { actual data}}\n * @param mainComposition this is list of  ids of the main composition that builds the tree\n * @param reverse this is the list of connections ids that needs to go to the reverse direction (to---->from)\n * @returns\n */\nexport function FormatConceptsAndConnections(connections_1, compositionData_1, mainComposition_1) {\n    return __awaiter(this, arguments, void 0, function* (connections, compositionData, mainComposition, reverse = []) {\n        let mainData = [];\n        let myConcepts = [];\n        for (let i = 0; i < connections.length; i++) {\n            myConcepts.push(connections[i].toTheConceptId);\n            myConcepts.push(connections[i].ofTheConceptId);\n            myConcepts.push(connections[i].typeId);\n        }\n        connections.sort(function (x, y) {\n            return y.id - x.id;\n        });\n        for (let i = 0; i < connections.length; i++) {\n            let reverseFlag = false;\n            if (reverse.includes(connections[i].id)) {\n                reverseFlag = true;\n            }\n            if (reverseFlag == true) {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let newData = compositionData[connections[i].toTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let key = Object.keys(newData)[0];\n                    try {\n                        let reverseCharater = linkerConcept.characterValue + \"_reverse\";\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][reverseCharater])) {\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][reverseCharater] = [];\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n            else {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let newData = compositionData[connections[i].ofTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let key = Object.keys(newData)[0];\n                    try {\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][linkerConcept.characterValue])) {\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][linkerConcept.characterValue] = [];\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n        }\n        for (let i = 0; i < mainComposition.length; i++) {\n            let mymainData = compositionData[mainComposition[i]];\n            console.log(mainData, mymainData);\n            mainData.push(mymainData);\n        }\n        return mainData;\n    });\n}\n/**\n * ############ Format is data-id and is used for list. ############\n * This is helpful in building a format that has multiple mainCompositions i.e. in the context of the list\n * The list format is helpful because you do not have to go over each individual query.\n * @param connections the type connections that need (external connections) to be passed\n * @param compositionData  this is a dictionary type of format that has all the build compositions {id: { actual data}}\n * @param mainComposition this is list of  ids of the main composition that builds the tree\n * @param reverse this is the list of connections ids that needs to go to the reverse direction (to---->from)\n * @returns\n */\nexport function FormatFromConnectionsAlteredArray(connections_1, compositionData_1, conceptIds_1, mainComposition_1) {\n    return __awaiter(this, arguments, void 0, function* (connections, compositionData, conceptIds, mainComposition, reverse = []) {\n        let startTime = new Date().getTime();\n        let mainData = [];\n        let myConcepts = [];\n        for (let i = 0; i < connections.length; i++) {\n            myConcepts.push(connections[i].toTheConceptId);\n            myConcepts.push(connections[i].ofTheConceptId);\n            myConcepts.push(connections[i].typeId);\n        }\n        connections.sort(function (x, y) {\n            return y.id - x.id;\n        });\n        for (let i = 0; i < connections.length; i++) {\n            let reverseFlag = false;\n            if (reverse.includes(connections[i].id)) {\n                reverseFlag = true;\n            }\n            if (reverseFlag == true) {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].toTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata === null || mydata === void 0 ? void 0 : mydata.data;\n                    let key = Object.keys(newData)[0];\n                    try {\n                        let reverseCharater = linkerConcept.characterValue + \"_reverse\";\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][reverseCharater])) {\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][reverseCharater] = [];\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n            else {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].ofTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata === null || mydata === void 0 ? void 0 : mydata.data;\n                    let key = Object.keys(newData)[0];\n                    try {\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][linkerConcept.characterValue])) {\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][linkerConcept.characterValue] = [];\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n        }\n        for (let i = 0; i < mainComposition.length; i++) {\n            let mymainData = compositionData[mainComposition[i]];\n            console.log(mainData, mymainData);\n            mainData.push(mymainData);\n        }\n        return mainData;\n    });\n}\n/**\n * ########## Format works with JUSTDATA / NORMAL ########### used for single origin concept\n * @param linkers this is the list of linkers that\n * @param compositionData\n * @param mainComposition\n * @param reverse list of connection ids that need to show reverse conneciton.\n * @returns\n */\nexport function FormatFromConnections(linkers_1, compositionData_1, mainComposition_1) {\n    return __awaiter(this, arguments, void 0, function* (linkers, compositionData, mainComposition, reverse = []) {\n        let mainData = {};\n        let connections = yield GetConnectionBulk(linkers);\n        let myConcepts = [];\n        for (let i = 0; i < connections.length; i++) {\n            myConcepts.push(connections[i].toTheConceptId);\n            myConcepts.push(connections[i].ofTheConceptId);\n            myConcepts.push(connections[i].typeId);\n        }\n        yield GetConceptBulk(myConcepts);\n        connections.sort(function (x, y) {\n            return y.id - x.id;\n        });\n        for (let i = 0; i < connections.length; i++) {\n            let reverseFlag = false;\n            if (reverse.includes(connections[i].id)) {\n                reverseFlag = true;\n            }\n            if (reverseFlag == true) {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].toTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata;\n                    let key = Object.keys(newData)[0];\n                    try {\n                        let reverseCharater = linkerConcept.characterValue + \"_reverse\";\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][reverseCharater])) {\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][reverseCharater] = [];\n                            newData[key][reverseCharater].push(compositionData[connections[i].ofTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n            else {\n                if (compositionData[connections[i].ofTheConceptId] && compositionData[connections[i].toTheConceptId]) {\n                    let mydata = compositionData[connections[i].ofTheConceptId];\n                    let linkerConcept = yield GetTheConcept(connections[i].typeId);\n                    let newData = mydata;\n                    // console.log(\"this is the new data\", newData);\n                    let key = Object.keys(newData)[0];\n                    try {\n                        if (typeof newData === \"string\") {\n                            newData = {};\n                        }\n                        if (Array.isArray(newData[key][linkerConcept.characterValue])) {\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                        else {\n                            if (typeof newData[key] === \"string\") {\n                                newData[key] = {};\n                            }\n                            newData[key][linkerConcept.characterValue] = [];\n                            newData[key][linkerConcept.characterValue].push(compositionData[connections[i].toTheConceptId]);\n                        }\n                    }\n                    catch (ex) {\n                        console.log(\"this is error\", ex);\n                    }\n                }\n            }\n        }\n        mainData = compositionData[mainComposition];\n        return mainData;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SearchWithTypeAndLinkerApi } from '../../app';\nimport { GetCompositionFromConnectionsInObject, GetCompositionFromConnectionsWithDataIdInObject, GetConnectionDataPrefetch } from '../GetCompositionBulk';\nimport { FormatConceptsAndConnections, FormatFromConnectionsAlteredArray } from './SearchLinkMultiple';\n/**\n * This function will help you search a concept by their type and also to query inside of it.\n * Put the number of compositions you want to get in the searchStructure which can be set by inpage and page\n * Then the type should be set in searchQuery for the compositionName.\n * Inside the searchQuery array this you can set the full linker / listLinker in the searchQuery.\n * This will give the id of the structures.\n */\nexport function SearchWithTypeAndLinkerDataId(searchStructure_1, searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchStructure, searchQuery, token = \"\") {\n        let result = yield SearchWithTypeAndLinkerApi(searchStructure, searchQuery, token);\n        let conceptIds = result.compositionIds;\n        let connections = result.internalConnections;\n        let linkers = result.linkers;\n        let reverse = result.reverse;\n        let mainCompositionIds = result.mainCompositionIds;\n        let prefetchConnections = yield GetConnectionDataPrefetch(linkers);\n        let concepts = yield GetCompositionFromConnectionsWithDataIdInObject(conceptIds, connections);\n        let output = yield FormatFromConnectionsAlteredArray(prefetchConnections, concepts, conceptIds, mainCompositionIds, reverse);\n        return output;\n    });\n}\n/**\n * This function will help you search a concept by their type and also to query inside of it.\n * Put the number of compositions you want to get in the searchStructure which can be set by inpage and page\n * Then the type should be set in searchQuery for the compositionName.\n * Inside the searchQuery array this you can set the full linker / listLinker in the searchQuery.\n * This will not give the id of the structures.\n */\nexport function SearchWithTypeAndLinker(searchStructure_1, searchQuery_1) {\n    return __awaiter(this, arguments, void 0, function* (searchStructure, searchQuery, token = \"\") {\n        let result = yield SearchWithTypeAndLinkerApi(searchStructure, searchQuery, token);\n        let conceptIds = result.compositionIds;\n        let connections = result.internalConnections;\n        let linkers = result.linkers;\n        let reverse = result.reverse;\n        let mainCompositionIds = result.mainCompositionIds;\n        let prefetchConnections = yield GetConnectionDataPrefetch(linkers);\n        let concepts = yield GetCompositionFromConnectionsInObject(conceptIds, connections);\n        let output = yield FormatConceptsAndConnections(prefetchConnections, concepts, mainCompositionIds, reverse);\n        return output;\n    });\n}\n", "import { TokenStorage } from \"../../DataStructures/Security/TokenStorage\";\nexport function GetRequestHeader(contentType = 'application/json', Accept = 'application/json') {\n    var headers = {\n        'Content-Type': contentType,\n        'Authorization': \"Bearer \" + TokenStorage.BearerAccessToken,\n        'Accept': Accept,\n    };\n    return headers;\n}\nexport function GetRequestHeaderWithAuthorization(contentType = 'application/json', token = \"\", Accept = 'application/json') {\n    if (token == \"\") {\n        token = TokenStorage.BearerAccessToken;\n    }\n    var headers = {\n        'Content-Type': contentType,\n        'Authorization': \"Bearer \" + token,\n        'Accept': Accept\n    };\n    return headers;\n}\nexport function GetOnlyTokenHeader() {\n    let token = TokenStorage.BearerAccessToken;\n    const myHeaders = new Headers();\n    myHeaders.append('Authorization', 'Bearer ' + token);\n    return myHeaders;\n}\n", "export function SplitStrings(typeString) {\n    const pos = typeString.lastIndexOf(\"_\");\n    let SplittedStrings = [];\n    if (pos > 0) {\n        let rest = typeString.substring(0, pos);\n        let last = typeString.substring(pos + 1, typeString.length);\n        SplittedStrings = [rest, last];\n    }\n    else {\n        SplittedStrings = [typeString];\n    }\n    return SplittedStrings;\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport InsertUniqueNumber from '../Helpers/UniqueInsert';\nimport { CheckAllConnectionsConnectedInConnectionArray, CheckIfTypeConceptsExistsInArray, } from '../Helpers/CheckIfExists';\nimport { RemoveConceptFromList, RemoveConnectionFromList, } from '../Helpers/RemoveFromArray';\nimport { CreateDefaultConcept } from './CreateDefaultConcept';\nimport { GetAllConnectionsOfComposition } from '../Api/GetAllConnectionsOfComposition';\nimport GetTheConcept from './GetTheConcept';\nimport MakeTheInstanceConcept from './MakeTheInstanceConcept';\nimport { createTheConnection } from './CreateTheConnection';\nimport { DeleteConnectionById } from './DeleteConnection';\nimport { SyncData } from '../DataStructures/SyncData';\nimport { CompositionBinaryTree } from '../DataStructures/Composition/CompositionBinaryTree';\nimport { Composition } from '../DataStructures/Composition/Composition';\nimport { CreateTheCompositionWithCache } from './Composition/CreateCompositionCache';\n// function to update the cache composition\nexport default function UpdateComposition(patcherStructure) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // get all the default userId, sessionId, accessId passed by the patcherStructure\n        const userId = patcherStructure.userId;\n        const sessionId = patcherStructure.sessionId;\n        const accessId = patcherStructure.accessId;\n        let connectionList = [];\n        const conceptList = [];\n        let composition = CreateDefaultConcept();\n        let parentConcept = CreateDefaultConcept();\n        const toDeleteConcepts = [];\n        // the main composition Id that has the data that needs to be patched\n        let compositionId = patcherStructure.compositionId;\n        // if you want to edit the subcompositions of the composition then you have to pass to this\n        const ofTheConceptId = patcherStructure.ofTheCompositionId;\n        let toDeleteConnections = [];\n        if (compositionId < 0) {\n            let localConcept = yield GetTheConcept(compositionId, userId);\n            if (localConcept.id > 0) {\n                compositionId = localConcept.id;\n            }\n            else {\n                return null;\n            }\n        }\n        // get all connections from the backend because it needs latest data\n        const connectionListString = yield GetAllConnectionsOfComposition(compositionId);\n        connectionList = connectionListString;\n        const conceptIdList = [];\n        const compositionCache = new Composition();\n        const compositionList = [];\n        compositionCache.id = compositionId;\n        // put this in the upper section before updating because this will tell all other distributed\n        //servers to destroy the copy of the composition that they have as new composition is coming up\n        compositionCache.isUpdating();\n        // get all the connections that are inside of the composition and store them in\n        let allConcepts = [];\n        for (let i = 0; i < connectionList.length; i++) {\n            InsertUniqueNumber(compositionList, connectionList[i].ofTheConceptId);\n            InsertUniqueNumber(conceptIdList, connectionList[i].ofTheConceptId);\n            InsertUniqueNumber(conceptIdList, connectionList[i].toTheConceptId);\n            allConcepts.push(connectionList[i].ofTheConceptId);\n        }\n        compositionCache.subcompositions = compositionList;\n        compositionCache.connections = connectionList;\n        // get all the concepts that are inside of the composition and store them in a conceptList\n        for (let i = 0; i < conceptIdList.length; i++) {\n            const conceptString = yield GetTheConcept(conceptIdList[i]);\n            const concept = conceptString;\n            if (compositionId == conceptIdList[i]) {\n                composition = concept;\n            }\n            if (ofTheConceptId == conceptIdList[i]) {\n                parentConcept = concept;\n            }\n            conceptList.push(concept);\n        }\n        // now trying to patch the new object into the composition\n        const object = patcherStructure.patchObject;\n        for (const key in object) {\n            let insertingConcept = CreateDefaultConcept();\n            const value = object[key];\n            let localConcept = composition;\n            // if the immedidate parent exists in the composition (i.e. for multilevel composition)\n            if (parentConcept.id > 0) {\n                localConcept = parentConcept;\n            }\n            if (Array.isArray(value) || typeof value == 'object') {\n                insertingConcept = yield MakeTheInstanceConcept(key, \"\", true, composition.userId, 4, 999);\n                compositionCache.subcompositions.push(insertingConcept.id);\n                // check if the concept exists in the concept list because if it exists then we have to delete old connection\n                const ExistingConcepts = CheckIfTypeConceptsExistsInArray(conceptList, insertingConcept);\n                // if the existing concept then start the process for deleting the concept in the list\n                for (let i = 0; i < ExistingConcepts.length; i++) {\n                    if (ExistingConcepts[i].id > 0) {\n                        const deletingConnections = CheckAllConnectionsConnectedInConnectionArray(compositionCache.connections, ExistingConcepts[i].id);\n                        toDeleteConnections = toDeleteConnections.concat(deletingConnections);\n                        toDeleteConcepts.push(ExistingConcepts[i]);\n                    }\n                }\n                yield CreateTheCompositionWithCache(object[key], insertingConcept.id, insertingConcept.userId, composition.id, composition.userId, 4, 999, compositionCache);\n            }\n            else {\n                // make the new concept in the object\n                insertingConcept = yield MakeTheInstanceConcept(key, value, false, userId, accessId, sessionId);\n                // check if the concept exists in the concept list because if it exists then we have to delete old connection\n                const ExistingConcepts = CheckIfTypeConceptsExistsInArray(conceptList, insertingConcept);\n                // if the existing concept then start the process for deleting the concept in the list\n                for (let i = 0; i < ExistingConcepts.length; i++) {\n                    if (ExistingConcepts[i].id > 0) {\n                        const deletingConnections = CheckAllConnectionsConnectedInConnectionArray(compositionCache.connections, ExistingConcepts[i].id);\n                        toDeleteConnections = toDeleteConnections.concat(deletingConnections);\n                        toDeleteConcepts.push(ExistingConcepts[i]);\n                    }\n                }\n            }\n            // create the connection between the new concept and the old composition\n            const connectionString = createTheConnection(localConcept.id, localConcept.userId, insertingConcept.id, composition.id);\n            const connection = connectionString;\n            conceptList.push(insertingConcept);\n            compositionCache.connections.push(connection);\n        }\n        // now you have to delete the connection in bulk\n        for (let j = 0; j < toDeleteConnections.length; j++) {\n            // remove from the cache list\n            RemoveConnectionFromList(compositionCache.connections, toDeleteConnections[j]);\n            // delete the connection in the backend\n            DeleteConnectionById(toDeleteConnections[j].id);\n        }\n        // also delete the existing concept from the cache.\n        for (let k = 0; k < toDeleteConcepts.length; k++) {\n            // remove concept from the cache concept list\n            RemoveConceptFromList(conceptList, toDeleteConcepts[k]);\n        }\n        // now create a composition cache object to cache it into node server\n        compositionCache.concepts = compositionCache.concepts.concat(conceptList);\n        compositionCache.mainConcept = composition;\n        compositionCache.id = composition.id;\n        // // create a cache\n        yield compositionCache.updateCache();\n        // update it the binary tree\n        CompositionBinaryTree.addCompositionToTree(compositionCache);\n        SyncData.SyncDataOnline();\n        let x = compositionCache.GetDataCache();\n        return x;\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CreateDefaultLConcept } from './../../Services/Local/CreateDefaultLConcept';\nimport { UserBinaryTree } from './../../DataStructures/User/UserBinaryTree';\nexport function GetUserGhostId(userId_1, ghostId_1) {\n    return __awaiter(this, arguments, void 0, function* (userId, ghostId, sessionId = 999) {\n        let userNode = yield UserBinaryTree.getNodeFromTree(userId, sessionId);\n        console.log(\"this is the ghost id\", userId, sessionId);\n        let realConcept = CreateDefaultLConcept();\n        if (userNode) {\n            for (let i = 0; i < userNode.value.length; i++) {\n                let testConcept = userNode.value[i];\n                if (testConcept.ghostId == ghostId) {\n                    realConcept = testConcept;\n                }\n            }\n        }\n        return realConcept;\n    });\n}\nexport function AddGhostConcept(concept_1, userId_1) {\n    return __awaiter(this, arguments, void 0, function* (concept, userId, sessionId = 999) {\n        UserBinaryTree.addConceptToTree(concept, userId, sessionId);\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ViewInternalDataApi } from \"../../Api/View/ViewInternalDataApi\";\nimport { GetTheConcept, recursiveFetch } from \"../../app\";\nexport function ViewInternalData(ids) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a;\n        try {\n            let connections = yield ViewInternalDataApi(ids);\n            let output = [];\n            for (let i = 0; i < ids.length; i++) {\n                let id = ids[i];\n                let localConnections = connections[id];\n                if (id && localConnections) {\n                    let concepts = [];\n                    let formattedOutput = {};\n                    for (let j = 0; j < localConnections.length; j++) {\n                        if (!concepts.includes(localConnections[j].ofTheConceptId)) {\n                            concepts.push(localConnections[j].ofTheConceptId);\n                        }\n                    }\n                    let out = yield recursiveFetch(id, localConnections, concepts);\n                    formattedOutput.data = out;\n                    formattedOutput.id = id;\n                    output.push(formattedOutput);\n                }\n                else {\n                    let formattedOutput = {};\n                    formattedOutput.id = id;\n                    let concept = yield GetTheConcept(id);\n                    let noconn = {};\n                    if (concept.type) {\n                        noconn[(_a = concept === null || concept === void 0 ? void 0 : concept.type) === null || _a === void 0 ? void 0 : _a.characterValue] = concept.characterValue;\n                        formattedOutput.data = noconn;\n                        output.push(formattedOutput);\n                    }\n                }\n            }\n            return output;\n        }\n        catch (err) {\n            throw err;\n        }\n    });\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData } from \"../app\";\nimport { NORMAL } from \"../Constants/FormatConstants\";\n/**\n * This is the class that helps us observe anything that the function is doing\n * This wrapper will allow all the concepts and connections to be tracked inside of the called function\n * This function helps us manage state using the concept connection system.\n */\nexport class DependencyObserver {\n    constructor() {\n        this.subscribers = []; // this is the list of subscribers that are added to this observer.\n        this.mainConcept = 0;\n        this.compositionIds = [];\n        this.conceptIds = [];\n        this.internalConnections = [];\n        this.reverse = [];\n        this.linkers = [];\n        this.dependency = [];\n        this.isDataLoaded = false; // checks to see if the data has been loaded to the widget/ function\n        this.isUpdating = false; // this flag helps us check if the state is being updated while the connection updates.\n        this.fetched = false;\n        this.format = NORMAL;\n    }\n    /**\n     * This function will be called when there is a need to listen to a certain type of concept that will update\n     *  the ui.\n     * @param id this is the type id which needs to be tracked\n     */\n    listenToEventType(id) {\n        window.addEventListener(`${id}`, (event) => {\n            if (!this.isUpdating) {\n                this.isUpdating = true;\n                let that = this;\n                setTimeout(function () {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        let myEvent = event;\n                        if (!that.compositionIds.includes(myEvent === null || myEvent === void 0 ? void 0 : myEvent.detail)) {\n                            that.compositionIds.unshift(myEvent === null || myEvent === void 0 ? void 0 : myEvent.detail);\n                            that.listenToEvent(myEvent === null || myEvent === void 0 ? void 0 : myEvent.detail);\n                        }\n                        that.isUpdating = false;\n                        yield that.bind();\n                        that.notify();\n                    });\n                }, 200);\n            }\n            else {\n                console.log(\"rejected this\");\n            }\n        });\n    }\n    /**\n     * This is the of the concept id that needs to be listened . If this is called. All the connections that are\n     * created with of the concepts id with this passed id then the event is fired.\n     *\n     * @param id Of the concept id that needs to be listened.\n     */\n    listenToEvent(id) {\n        window.addEventListener(`${id}`, (event) => {\n            console.log(\"this is listening after the event is fired\", id, event);\n            if (!this.isUpdating) {\n                this.isUpdating = true;\n                let that = this;\n                setTimeout(function () {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        let newConnection = yield ConnectionData.GetConnectionByOfTheConceptAndType(id, id);\n                        for (let i = 0; i < newConnection.length; i++) {\n                            yield ConnectionData.GetConnection(newConnection[i]).then((conn) => {\n                                if (conn.typeId == that.mainConcept) {\n                                    if (!that.internalConnections.includes(conn.id)) {\n                                        that.internalConnections.push(conn.id);\n                                    }\n                                }\n                                else {\n                                    if (!that.linkers.includes(conn.id)) {\n                                        that.linkers.push(conn.id);\n                                    }\n                                }\n                                if (!that.conceptIds.includes(conn.toTheConceptId)) {\n                                    that.conceptIds.push(conn.toTheConceptId);\n                                }\n                                if (!that.compositionIds.includes(conn.ofTheConceptId)) {\n                                    that.compositionIds.push(conn.ofTheConceptId);\n                                }\n                            });\n                        }\n                        that.isUpdating = false;\n                        yield that.bind();\n                        that.notify();\n                    });\n                }, 200);\n            }\n            else {\n                console.log(\"rejected this\");\n            }\n        });\n    }\n    /**\n     * This function will bind the actual data to the widget or the function.\n     */\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log(\"this is the old execute data\");\n        });\n    }\n    /**\n     *\n     * @param callback the function that needs to be called with the data.\n     * @returns returns the callback with this data as the state.\n     */\n    subscribe(callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.subscribers.push(callback);\n            console.log('again executing data');\n            yield this.bind();\n            return callback(this.data);\n        });\n    }\n    /**\n     *\n     * @param callback function that you need to remove from the subscribers list.\n     * @returns\n     */\n    unsubscribe(callback) {\n        this.subscribers.filter(fn => fn != callback);\n        return this.subscribers.length;\n    }\n    /**\n     * This function will call all the subscribers that are registered in this wrapper.\n     */\n    notify() {\n        console.log('notifiers', this.subscribers);\n        this.subscribers.map(subscriber => {\n            console.log('notify');\n            subscriber(this.data);\n        });\n    }\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAllConceptsByType } from \"../Api/GetAllConceptsByType\";\nimport { ConceptsData, DATAID, GetAllConnectionsOfCompositionBulk, GetConceptByCharacter, JUSTDATA, NORMAL } from \"../app\";\nimport { GetCompositionFromMemory, GetCompositionFromMemoryNormal, GetCompositionWithIdFromMemory } from \"../Services/GetComposition\";\nimport { DependencyObserver } from \"./DepenedencyObserver\";\n/**\n * This wrapper will wrap the listing function and then allow users to return the list.\n */\nexport class GetCompositionListObservable extends DependencyObserver {\n    constructor(compositionName, userId, inpage, page, format) {\n        super();\n        this.data = [];\n        this.startPage = 0;\n        this.compositionName = compositionName;\n        this.userId = userId;\n        this.inpage = inpage;\n        this.page = page;\n        this.format = format;\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isDataLoaded) {\n                console.log(\"again data loading mechanism\");\n                var concept = yield GetConceptByCharacter(this.compositionName);\n                if (concept) {\n                    yield GetAllConceptsByType(this.compositionName, this.userId);\n                    console.log(\"getting the user data\", concept.id, this.userId);\n                    let conceptList = yield ConceptsData.GetConceptsByTypeIdAndUser(concept.id, this.userId);\n                    console.log(\"this is the concept list\", conceptList);\n                    var startPage = this.inpage * (this.page - 1);\n                    for (var i = startPage; i < startPage + this.inpage; i++) {\n                        if (conceptList[i]) {\n                            this.compositionIds.push(conceptList[i].id);\n                        }\n                    }\n                }\n                yield GetAllConnectionsOfCompositionBulk(this.compositionIds);\n                this.isDataLoaded = true;\n                this.listenToEventType(concept.id);\n                for (let i = 0; i < this.compositionIds.length; i++) {\n                    console.log(\"list listen\", this.compositionIds[i]);\n                    this.listenToEvent(this.compositionIds[i]);\n                }\n            }\n            return yield this.build();\n        });\n    }\n    build() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.data = [];\n            console.log(\"this is building the data list\");\n            if (this.format == JUSTDATA) {\n                for (let i = this.startPage; i < this.startPage + this.inpage; i++) {\n                    if (this.compositionIds[i]) {\n                        let compositionJson = yield GetCompositionFromMemory(this.compositionIds[i]);\n                        this.data.push(compositionJson);\n                    }\n                }\n            }\n            else if (this.format == DATAID) {\n                for (let i = this.startPage; i < this.startPage + this.inpage; i++) {\n                    if (this.compositionIds[i]) {\n                        let compositionJson = yield GetCompositionWithIdFromMemory(this.compositionIds[i]);\n                        this.data.push(compositionJson);\n                    }\n                }\n            }\n            else if (this.format == NORMAL) {\n                for (let i = this.startPage; i < this.startPage + this.inpage; i++) {\n                    if (this.compositionIds[i]) {\n                        let compositionJson = yield GetCompositionFromMemoryNormal(this.compositionIds[i]);\n                        this.data.push(compositionJson);\n                    }\n                }\n            }\n            else {\n                for (let i = this.startPage; i < this.startPage + this.inpage; i++) {\n                    if (this.compositionIds[i]) {\n                        let compositionJson = yield GetCompositionFromMemory(this.compositionIds[i]);\n                        this.data.push(compositionJson);\n                    }\n                }\n            }\n            return this.data;\n        });\n    }\n}\n/**\n * This function will give you the list of the concepts by composition name with a listener to any data change.\n */\nexport function GetCompositionListListener(compositionName, userId, inpage, page, format = JUSTDATA) {\n    return new GetCompositionListObservable(compositionName, userId, inpage, page, format);\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ConnectionData, DATAID, JUSTDATA, NORMAL } from \"../app\";\nimport { GetCompositionById, RecursiveFetchBuildLayer, RecursiveFetchBuildLayerDataId, RecursiveFetchBuildLayerNormal } from \"../Services/GetComposition\";\nimport { DependencyObserver } from \"./DepenedencyObserver\";\nexport class GetCompositionObservable extends DependencyObserver {\n    constructor(id, format = JUSTDATA) {\n        super();\n        this.id = id;\n        this.format = format;\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isDataLoaded) {\n                let conceptConnections = yield GetCompositionById(this.id);\n                this.mainConcept = this.id;\n                this.compositionIds = conceptConnections.compositionList;\n                let internalConnections = conceptConnections.connectionList;\n                for (let i = 0; i < internalConnections.length; i++) {\n                    this.internalConnections.push(internalConnections[i].id);\n                }\n                this.isDataLoaded = true;\n                this.listenToEvent(this.mainConcept);\n            }\n            return yield this.build();\n        });\n    }\n    build() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let latestConnectionList = [];\n            let latestConnectionIds = this.internalConnections;\n            for (let i = 0; i < latestConnectionIds.length; i++) {\n                latestConnectionList.push(yield ConnectionData.GetConnection(latestConnectionIds[i]));\n            }\n            if (this.format == JUSTDATA) {\n                console.log(\"this is the data for the build layer\", latestConnectionList, this.mainConcept, this.internalConnections, this.compositionIds);\n                this.data = yield RecursiveFetchBuildLayer(this.mainConcept, latestConnectionList, this.compositionIds);\n            }\n            else if (this.format == DATAID) {\n                this.data = yield RecursiveFetchBuildLayerDataId(this.mainConcept, latestConnectionList, this.compositionIds);\n            }\n            else if (this.format == NORMAL) {\n                this.data = yield RecursiveFetchBuildLayerNormal(this.mainConcept, latestConnectionList, this.compositionIds);\n            }\n            else {\n                this.data = yield RecursiveFetchBuildLayer(this.mainConcept, latestConnectionList, this.compositionIds);\n            }\n            return this.data;\n        });\n    }\n}\n/**\n *\n * @param id Id of the composition\n * @returns composition of the id given in the json form.\n */\nexport function GetCompositionListener(id, format = JUSTDATA) {\n    return new GetCompositionObservable(id, format);\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GetAllConnectionsOfCompositionBulk, GetCompositionWithIdAndDateFromMemory, GetConceptByCharacterAndType, GetConnectionOfTheConcept, GetTheConcept } from \"../app\";\nimport { DATAIDDATE, JUSTDATA, NORMAL } from \"../Constants/FormatConstants\";\nimport { GetCompositionFromMemory, GetCompositionWithIdFromMemory } from \"../Services/GetComposition\";\nimport { DependencyObserver } from \"./DepenedencyObserver\";\n/**\n * This is a class that will give you the observable for the links from a certain concept.\n */\nexport class GetLinkObservable extends DependencyObserver {\n    /**\n     *\n     * @param id this is the id whose links need to be found\n     * @param linker this is the type connection that is connected to the mainConcept(id)\n     * @param inpage number of outputs that has to be displayed\n     * @param page the page which needs to be displayed as per the inpage parameter\n     * @param format the format in which the output should be displayed (NORMAL, DATAID,JUSTDATA,DATAIDDATE)\n     */\n    constructor(id, linker, inpage, page, format) {\n        super();\n        this.connections = [];\n        this.data = [];\n        this.mainConcept = id;\n        this.linker = linker;\n        this.inpage = inpage;\n        this.page = page;\n        this.format = format;\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (!this.isDataLoaded) {\n                let concept = yield GetTheConcept(this.mainConcept);\n                let linkString = ((_a = concept.type) === null || _a === void 0 ? void 0 : _a.characterValue) + \"_s\" + \"_\" + this.linker;\n                let relatedConceptString = yield GetConceptByCharacterAndType(linkString, 16);\n                let relatedConcept = relatedConceptString;\n                if (relatedConcept.id > 0) {\n                    let connectionsString = yield GetConnectionOfTheConcept(relatedConcept.id, concept.id, concept.userId, this.inpage, this.page);\n                    this.connections = connectionsString;\n                    var prefetch = [];\n                    for (var i = 0; i < this.connections.length; i++) {\n                        prefetch.push(this.connections[i].toTheConceptId);\n                        this.listenToEvent(this.connections[i].toTheConceptId);\n                    }\n                    // await GetAllConnectionsOfCompositionBulk(prefetch);\n                    yield GetAllConnectionsOfCompositionBulk(prefetch);\n                }\n                this.isDataLoaded = true;\n                this.listenToEvent(this.mainConcept);\n            }\n            return yield this.build();\n        });\n    }\n    build() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (var i = 0; i < this.connections.length; i++) {\n                let toConceptId = this.connections[i].toTheConceptId;\n                let toConcept = yield GetTheConcept(toConceptId);\n                console.log(\"this is the format\", this.format);\n                if (this.format == NORMAL) {\n                    let newComposition = yield GetCompositionWithIdFromMemory(toConcept.id);\n                    this.data.push(newComposition);\n                }\n                else if (this.format == JUSTDATA) {\n                    let newComposition = yield GetCompositionFromMemory(toConcept.id);\n                    this.data.push(newComposition);\n                }\n                else if (this.format == DATAIDDATE) {\n                    let newComposition = yield GetCompositionWithIdAndDateFromMemory(toConcept.id);\n                    this.data.push(newComposition);\n                }\n                else {\n                    let newComposition = yield GetCompositionWithIdAndDateFromMemory(toConcept.id);\n                    this.data.push(newComposition);\n                }\n            }\n            return this.data;\n        });\n    }\n}\n/**\n *\n * @param id this is the id whose links need to be found\n * @param linker this is the type connection that is connected to the mainConcept(id)\n * @param inpage number of outputs that has to be displayed\n * @param page the page which needs to be displayed as per the inpage parameter\n * @param format the format in which the output should be displayed (NORMAL, DATAID,JUSTDATA,DATAIDDATE)\n */\nexport function GetLinkListener(id, linker, inpage, page, format = NORMAL) {\n    return new GetLinkObservable(id, linker, inpage, page, format);\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DependencyObserver, GetAllConnectionsOfCompositionBulk, GetCompositionFromConnectionsWithDataId, GetConnectionBulk, RecursiveSearchApiRaw, } from \"../app\";\nimport { RAW } from \"../Constants/FormatConstants\";\nclass RecursiveSearchObservable extends DependencyObserver {\n    /**\n     *\n     * @param id this is the id whose links need to be found\n     * @param linker this is the type connection that is connected to the mainConcept(id)\n     * @param inpage number of outputs that has to be displayed\n     * @param page the page which needs to be displayed as per the inpage parameter\n     * @param format the format in which the output should be displayed (RAW, undefined)\n     */\n    constructor(id, linkers, textSearch = \"\", format) {\n        super();\n        this.searchText = \"\";\n        this.connections = [];\n        this.data = [];\n        this.mainConcept = id;\n        this.searchLinkers = linkers;\n        this.textSearch = textSearch;\n        if (format)\n            this.format = format;\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isDataLoaded) {\n                const result = yield RecursiveSearchApiRaw(this.mainConcept, this.searchLinkers, this.textSearch);\n                this.compositionIds = result.compositionIds || [];\n                this.internalConnections = result.internalConnections || [];\n                const externalConnections = result.externalConnections || [];\n                const internalConnections = yield GetConnectionBulk(this.internalConnections);\n                this.connections = yield GetConnectionBulk(externalConnections);\n                var prefetch = [];\n                // listen external connection\n                for (var i = 0; i < this.connections.length; i++) {\n                    prefetch.push(this.connections[i].toTheConceptId);\n                    this.listenToEvent(this.connections[i].toTheConceptId);\n                }\n                // listen internal connection\n                for (var i = 0; i < internalConnections.length; i++) {\n                    prefetch.push(internalConnections[i].toTheConceptId);\n                    this.listenToEvent(internalConnections[i].toTheConceptId);\n                }\n                yield GetAllConnectionsOfCompositionBulk(prefetch);\n                this.isDataLoaded = true;\n                this.listenToEvent(this.mainConcept);\n            }\n            return yield this.build();\n        });\n    }\n    build() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.format && this.format == RAW) {\n                this.data = {\n                    compositionIds: this.compositionIds,\n                    internalConnections: this.internalConnections,\n                    externalConnections: this.connections,\n                };\n            }\n            else {\n                this.data = yield GetCompositionFromConnectionsWithDataId(this.compositionIds, this.internalConnections);\n            }\n            return this.data;\n        });\n    }\n}\n/**\n * Method to listen the changes in recursive search data\n * @param id this is the id whose links need to be found\n * @param linker this is the type connection that is connected to the mainConcept(id)\n * @param inpage number of outputs that has to be displayed\n * @param page the page which needs to be displayed as per the inpage parameter\n * @param format the format in which the output should be displayed (RAW, undefined)\n */\nexport function RecursiveSearchListener(id, linkers, searchText = \"\", format) {\n    return new RecursiveSearchObservable(id, linkers, searchText, format);\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SearchLinkMultipleAll } from \"../app\";\nimport { DATAID } from \"../Constants/FormatConstants\";\nimport { DependencyObserver } from \"./DepenedencyObserver\";\nexport class SearchLinkMultipleAllObservable extends DependencyObserver {\n    constructor(searchQuery, token, format = DATAID) {\n        super();\n        this.searchQuery = [];\n        this.format = DATAID;\n        this.searchQuery = searchQuery;\n        this.format = format;\n    }\n    bind() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.data = yield SearchLinkMultipleAll(this.searchQuery, \"\", this, this.format);\n            this.mainConcept = this.searchQuery[0].composition;\n            this.listenToEvent(this.mainConcept);\n            console.log(\"this is the data\", this.data);\n            return this.data;\n        });\n    }\n}\n/**\n *\n * @param searchQueries Queries that need to be executed.\n * @param token token of the user.\n * @returns  returns the json format of the output.\n */\nexport function searchLinkMultipleListener(searchQueries, token, format = DATAID) {\n    return new SearchLinkMultipleAllObservable(searchQueries, token !== null && token !== void 0 ? token : \"\", format);\n}\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport { init, updateAccessToken };\nimport CreateConceptBinaryTreeFromIndexDb from './Services/CreateBinaryTreeFromData';\nimport { IdentifierFlags } from './DataStructures/IdentifierFlags';\nexport { SearchLinkMultipleApi } from './Api/Search/SearchLinkMultipleApi';\nexport { SplitStrings } from './Services/SplitStrings';\nexport { GetCompositionList, GetCompositionListWithId } from './Services/GetCompositionList';\nexport { GetCompositionListLocal, GetCompositionListLocalWithId } from './Services/Local/GetCompositionListLocal';\nexport { GetAllConnectionsOfComposition } from './Api/GetAllConnectionsOfComposition';\nexport { GetComposition, GetCompositionWithId, recursiveFetch, GetCompositionWithAllIds } from './Services/GetComposition';\nexport { GetCompositionLocal, GetCompositionLocalWithId } from './Services/Local/GetCompositionLocal';\nexport { default as CreateComposition } from './Services/CreateTheComposition';\nexport { CreateTheCompositionLocal } from './Services/Local/CreateTheCompositionLocal';\nexport { CreateConnectionBetweenTwoConcepts, CreateConnectionBetweenTwoConceptsGeneral } from './Services/CreateConnectionBetweenTwoConcepts';\nexport { default as GetTheConcept } from './Services/GetTheConcept';\nexport { default as MakeTheInstanceConcept } from './Services/MakeTheInstanceConcept';\nexport { MakeTheInstanceConceptLocal } from './Services/Local/MakeTheInstanceConceptLocal';\nexport { storeToDatabase, getFromDatabaseWithType, getObjectsFromIndexDb } from './Database/NoIndexDb';\nexport { createTheConnection as CreateTheConnection } from './Services/CreateTheConnection';\nexport { default as GetConceptByCharacter } from './Services/GetConceptByCharacter';\nexport { GetLink, GetLinkRaw } from './Services/GetLink';\nexport { CreateDefaultConcept } from './Services/CreateDefaultConcept';\nexport { MakeTheTypeConceptLocal } from './Services/Local/MakeTheTypeLocal';\nexport { MakeTheTypeConcept } from './Services/MakeTheTypeConcept';\nexport { MakeTheTypeConceptApi } from './Api/MakeTheTypeConceptApi';\nexport { GetLinkerConnectionFromConcepts, GetLinkerConnectionToConcepts } from './Services/GetLinkerConnectionFromConcept';\nexport { DeleteConceptById } from './Services/DeleteConcept';\nexport { DeleteConnectionById } from './Services/DeleteConnection';\nexport { TrashTheConcept } from './Api/Delete/DeleteConceptInBackend';\nexport { GetConnectionById } from './Services/GetConnections';\nexport { MakeTheTimestamp } from './Services/MakeTheTimestamp';\nexport { RecursiveSearchApi, RecursiveSearchApiRaw, RecursiveSearchApiRawFullLinker, RecursiveSearchApiNewRawFullLinker } from './Api/RecursiveSearch';\nexport { GetCompositionBulkWithDataId, GetCompositionBulk, GetCompositionFromConnectionsWithDataId } from './Services/GetCompositionBulk';\nexport { GetConceptBulk } from './Api/GetConceptBulk';\nexport { GetConnectionBulk } from './Api/GetConnectionBulk';\nexport { GetAllConnectionsOfCompositionBulk } from './Api/GetAllConnectionsOfCompositionBulk';\nexport { LoginToBackend } from './Api/Login';\nexport { GetConnectionOfTheConcept } from './Api/GetConnectionOfTheConcept';\nexport { default as Signup } from './Api/Signup';\nexport { default as Signin } from './Api/Signin';\nexport { default as UpdateComposition } from './Services/UpdateComposition';\nexport { SearchAllConcepts } from './Api/Search/Search';\nexport { SearchWithLinker } from './Api/Search/SearchWithLinker';\nexport { GetCompositionWithCache, GetCompositionWithDataIdWithCache, GetCompositionWithDataIdBulk } from './Services/Composition/CompositionCache';\nexport { CreateSession } from './Api/Session/CreateSession';\nexport { CreateSessionVisit } from './Api/Session/CreateSessionVisit';\nexport { GetRelation, GetRelationRaw } from './Services/GetRelation';\nexport { recursiveFetchNew } from './Services/Composition/BuildComposition';\nexport { CreateTheCompositionWithCache } from './Services/Composition/CreateCompositionCache';\nexport { CreateDefaultLConcept } from './Services/Local/CreateDefaultLConcept';\nexport { CreateTheConnectionGeneral } from './Services/CreateTheConnectionGeneral';\nexport { CreateTheConnectionLocal } from './Services/Local/CreateTheConnectionLocal';\nexport { GetCompositionListAll, GetCompositionListAllWithId, GetCompositionListWithIdUpdated } from './Services/GetCompositionList';\nexport { GetUserGhostId, AddGhostConcept } from './Services/User/UserTranslation';\nexport { SearchLinkMultipleAll, FormatFromConnections } from './Services/Search/SearchLinkMultiple';\nexport { GetTheConceptLocal } from './Services/Local/GetTheConceptLocal';\nexport { UpdateCompositionLocal } from './Services/Local/UpdateCompositionLocal';\nexport { GetCompositionFromConnectionsWithDataIdInObject, GetCompositionFromConnectionsWithIndex, GetCompositionFromConnectionsWithDataIdIndex } from './Services/GetCompositionBulk';\nexport { GetRelationLocal } from './Services/Local/GetRelationLocal';\nexport { GetConceptByCharacterAndCategoryLocal } from './Services/Local/GetConceptByCharacterLocal';\nexport { ViewInternalData } from './Services/View/ViewInternalData';\nexport { ViewInternalDataApi } from './Api/View/ViewInternalDataApi';\nexport { convertFromLConceptToConcept, convertFromConceptToLConcept } from './Services/Conversion/ConvertConcepts';\nexport { SearchLinkInternal } from './Services/Search/SearchLinkInternal';\nexport { CreateConnectionBetweenTwoConceptsLocal } from './Services/Local/CreateConnectionBetweenTwoConceptsLocal';\nexport { DeleteConceptLocal } from './Services/Local/DeleteConceptLocal';\nexport { GetConnectionBetweenTwoConceptsLinker } from './Services/GetConnectionBetweenTwoConceptsLinker';\nexport { DelayFunctionExecution } from './Services/Common/DelayFunction';\nexport { GetCompositionWithIdAndDateFromMemory } from './Services/GetComposition';\nexport { GetConceptByCharacterAndType } from './Api/GetConceptByCharacterAndType';\nexport { GetConnectionDataPrefetch } from './Services/GetCompositionBulk';\nexport { FormatFromConnectionsAltered } from './Services/Search/SearchLinkMultiple';\nexport { NORMAL, JUSTDATA, DATAID, DATAIDDATE, RAW } from './Constants/FormatConstants';\nexport { PRIVATE, PUBLIC, ADMIN } from './Constants/AccessConstants';\nexport { SearchWithTypeAndLinkerApi } from './Api/Search/SearchWithTypeAndLinker';\nexport { DependencyObserver } from './WrapperFunctions/DepenedencyObserver';\nexport { SearchLinkMultipleAllObservable, searchLinkMultipleListener } from './WrapperFunctions/SearchLinkMultipleAllObservable';\nexport { GetCompositionListener } from './WrapperFunctions/GetCompositionObservable';\nexport { GetCompositionListListener } from './WrapperFunctions/GetCompositionListObservable';\nexport { SearchWithTypeAndLinker } from './Services/Search/SearchWithTypeAndLinker';\nexport { GetLinkListener } from './WrapperFunctions/GetLinkObservable';\nexport { RecursiveSearchListener } from './WrapperFunctions/RecursiveSearchObservable';\nexport { SyncData } from './DataStructures/SyncData';\nexport { Concept } from './DataStructures/Concept';\nexport { LConcept } from './DataStructures/Local/LConcept';\nexport { LConnection } from './DataStructures/Local/LConnection';\nexport { Connection } from './DataStructures/Connection';\nexport { ConceptsData } from './DataStructures/ConceptData';\nexport { ConnectionData } from './DataStructures/ConnectionData';\nexport { BinaryTree } from './DataStructures/BinaryTree';\nexport { SearchQuery } from './DataStructures/SearchQuery';\nexport { PatcherStructure } from './DataStructures/PatcherStructure';\nexport { SessionData } from './DataStructures/Session/SessionData';\nexport { Composition } from './DataStructures/Composition/Composition';\nexport { CompositionBinaryTree } from './DataStructures/Composition/CompositionBinaryTree';\nexport { CompositionNode } from './DataStructures/Composition/CompositionNode';\nexport { LocalSyncData } from './DataStructures/Local/LocalSyncData';\nexport { UserBinaryTree } from './DataStructures/User/UserBinaryTree';\nexport { FilterSearch } from './DataStructures/FilterSearch';\nexport { SearchStructure } from './DataStructures/Search/SearchStructure';\nexport { LocalConceptsData } from './DataStructures/Local/LocalConceptData';\nimport { GetConnectionsFromIndexDb, GetConnectionsFromIndexDbLocal } from './Services/GetDataFromIndexDb';\nimport CreateLocalBinaryTreeFromIndexDb from './Services/Local/CreateLocalBinaryTreeFromData';\nimport InitializeSystem from './Services/InitializeSystem';\nimport { BaseUrl } from './DataStructures/BaseUrl';\nimport { TokenStorage } from './DataStructures/Security/TokenStorage';\nexport { BaseUrl } from './DataStructures/BaseUrl';\n/**\n * This function lets you update the access token that the package uses. If this is not passed you cannot create, update, view or delete\n * Your concepts using this package.\n * @param accessToken access token got from the sign in process\n */\nfunction updateAccessToken(accessToken = \"\") {\n    TokenStorage.BearerAccessToken = accessToken;\n}\n/**\n *\n * @param url This is the url for the backend c# system or our main data fabric server\n * @param aiurl This is the AI url that pulls in the data using our AI system . If you do not enter this then also disable the enableAi flag.\n * @param accessToken This is the JWT token that needs to be passed (But since you have just initilized the system). There is no way we can get access token\n * So this access token can be empty string. You can set it afterwards with another function UpdateAccessToken();\n * @param nodeUrl This is the url for the node server. This is another server in the data fabric that is used as server for business logic and security features.\n * @param enableAi This flag is used to enable or disable the AI feature that preloads data in the indexdb.\n * @param applicationName This is an unique name that is given to a program. Use this to discern one indexdb from another.\n */\nfunction init() {\n    return __awaiter(this, arguments, void 0, function* (url = \"\", aiurl = \"\", accessToken = \"\", nodeUrl = \"\", enableAi = true, applicationName = \"\", isTest = false) {\n        /**\n         * This process sets the initlizers in the static class BaseUrl that is used all over the system to access the urls\n         * Here we set the following variables.\n         * randomizer is created so that we can uniquely identify this initlization process but in the case that the BASE_RANDOMIZER has been alreay\n         * set in the indexdb this is replaced by the indexdb value.\n         */\n        try {\n            BaseUrl.BASE_URL = url;\n            BaseUrl.AI_URL = aiurl;\n            BaseUrl.NODE_URL = nodeUrl;\n            BaseUrl.BASE_APPLICATION = applicationName;\n            TokenStorage.BearerAccessToken = accessToken;\n            let randomizer = Math.floor(Math.random() * 100000000);\n            BaseUrl.BASE_RANDOMIZER = randomizer;\n            if (isTest) {\n                IdentifierFlags.isDataLoaded = true;\n                IdentifierFlags.isCharacterLoaded = true;\n                IdentifierFlags.isTypeLoaded = true;\n                IdentifierFlags.isLocalDataLoaded = true;\n                IdentifierFlags.isLocalTypeLoaded = true;\n                IdentifierFlags.isLocalCharacterLoaded = true;\n                IdentifierFlags.isConnectionLoaded = true;\n                IdentifierFlags.isConnectionTypeLoaded = true;\n                IdentifierFlags.isLocalConnectionLoaded = true;\n                return true;\n            }\n            console.log(\"This ist he base url\", BaseUrl.BASE_URL, randomizer);\n            /**\n                * We initialize the system so that we get all the concepts from the backend system that are most likely to be used\n                * We use some sort of AI algorithm to initilize these concepts with the most used concept.\n                * @param enableAi enableAi is a flag that the user can choose to set if they want to use this enable AI feature\n                * If the developer does not want to use this feature then they can just set enableAi to false.\n                */\n            yield InitializeSystem(enableAi);\n            const start = new Date().getTime();\n            /**\n             * This  will create a binary tree in the memory from the indexdb.\n             * This process will set Flags to denote that the binary tree is loaded, the character binary tree is  loaded\n             * and that the type binary tree has been loaded.\n             * These trees are helpful in caching concepts and connections for the data fabric.\n             */\n            yield CreateConceptBinaryTreeFromIndexDb().then(() => {\n                // IdentifierFlags.isDataLoaded= true;\n                // IdentifierFlags.isCharacterLoaded= true;\n                // IdentifierFlags.isTypeLoaded= true;\n                let elapsed = new Date().getTime() - start;\n                console.log(\"The time taken to prepare concept  data is  \", elapsed);\n            }).catch((event) => {\n                // console.log(\"This is the error in creating binary tree\", IdentifierFlags.isDataLoaded, IdentifierFlags.isCharacterLoaded, IdentifierFlags.isTypeLoaded);\n                throw event;\n            });\n            /**\n             * This will create a binary tree of local concepts that is saved from the indexdb.\n             * This process after finishing creating a binary tree of local concepts then set flag to denote that\n             * LocalBinaryTree has been created from the concepts in indexdb\n             * Local Binary Type tree has been loaded to the index db (flag is set to denote that)\n             * Character Binary Tree has been loaded from indexdb to memory (flag is set to denote that)\n             */\n            yield CreateLocalBinaryTreeFromIndexDb().then(() => {\n                // IdentifierFlags.isLocalDataLoaded = true;\n                // IdentifierFlags.isLocalTypeLoaded = true;\n                // IdentifierFlags.isLocalCharacterLoaded = true;\n                let elapsed = new Date().getTime() - start;\n                console.log(\"The time taken to prepare local concept  \", elapsed);\n            }).catch((event) => {\n                throw event;\n            });\n            /**\n             * This process gets the local connections from indexdb and loads it to the local connections array which is inside of\n             * a static class called LocalConnectionData.\n             * This function will also set and IdentifierFlag that tells the whole program that this process has finished.\n             */\n            yield GetConnectionsFromIndexDbLocal().then(() => {\n                IdentifierFlags.isLocalConnectionLoaded = true;\n            }).catch((event) => {\n                //console.log(\"This is the error in creating local connections binary tree\");\n                throw event;\n            });\n            /**\n             * We have designed our system to use local concepts and connections with its own local ids(negative ids) that\n             * is only valid for the browser that creates this. We have a translator in our node server.\n             * This function does this process in initlization.\n             */\n            // PopulateTheLocalSettingsToMemory().then(()=>{\n            // }).catch((event) => {\n            //    //console.log(\"This is the error in populating binary tree\");\n            //   throw event;\n            // });\n            /**\n             * This process gets the connections from indexdb and loads it to the connections array which is inside of\n             * a static class called ConnectionData.\n             * This function will also set and IdentifierFlag that tells the whole program that this process has finished.\n             */\n            yield GetConnectionsFromIndexDb().then(() => {\n                IdentifierFlags.isConnectionLoaded = true;\n                IdentifierFlags.isConnectionTypeLoaded = true;\n                let elapsed = new Date().getTime() - start;\n                console.log(\"The time taken to prepare connections  \", elapsed);\n            }).catch((event) => {\n                //console.log(\"This is the error in creating connections tree\");\n                throw event;\n            });\n            return true;\n        }\n        catch (error) {\n            console.log(\"cannot initialize the system\", error);\n        }\n    });\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};", "__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))", "// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};", "", "// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/app.ts\");\n", ""],
  "mappings": "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",
  "names": ["characterData", "result", "i", "event", "Array", "newConnection", "concept", "sessionInformationId", "accessId", "module", "exports"]
}
